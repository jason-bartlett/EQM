"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Context {
    constructor(parent = null, thisStructure = null, vars = {}, iterationStates = {}) {
        this.parent = parent;
        this.thisStructure = thisStructure;
        this.vars = vars;
        this.iterationStates = iterationStates;
    }
    static createWithThis(thisStructure) {
        return new Context(null, thisStructure, {});
    }
    getThis() {
        if (this.thisStructure) {
            return this.thisStructure;
        }
        if (this.parent) {
            return this.parent.getThis();
        }
        console.warn("'this' not defined"); // (happens in principle only in tests...)
        return null;
    }
    withThis(newThis) {
        const newContext = new Context(this);
        newContext.thisStructure = newThis;
        return newContext;
    }
    getValue(_varName) {
        if (_varName in this.vars) {
            return this.vars[_varName];
        }
        if (this.parent) {
            return this.parent.getValue(_varName);
        }
        throw new Error(`Undefined variable: '${_varName}'`);
    }
    withValue(varName, value) {
        const newContext = new Context(this);
        newContext.vars[varName] = value;
        return newContext;
    }
    getIterationState(_varName) {
        if (_varName in this.vars) {
            return this.iterationStates[_varName];
        }
        if (this.parent) {
            return this.parent.getIterationState(_varName);
        }
        throw new Error(`Undefined iterator argument for variable: '${_varName}'`);
    }
    withIterationState(varName, iterationState) {
        const newContext = new Context(this);
        newContext.vars[varName] = iterationState.value();
        newContext.iterationStates[varName] = iterationState;
        return newContext;
    }
}
exports.Context = Context;
//# sourceMappingURL=context.js.map