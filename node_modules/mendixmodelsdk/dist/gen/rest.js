"use strict";
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
const internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
const projects_1 = require("./projects");
const webservices_1 = require("./webservices");
var rest;
(function (rest) {
    class RestAuthenticationType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "rest.RestAuthenticationType";
        }
    }
    RestAuthenticationType.Basic = new RestAuthenticationType("Basic", {});
    RestAuthenticationType.None = new RestAuthenticationType("None", {
        "deleted": "7.13.0",
        "deletionMessage": null
    });
    RestAuthenticationType.Session = new RestAuthenticationType("Session", {
        "introduced": "7.13.0"
    });
    rest.RestAuthenticationType = RestAuthenticationType;
    class RestOperationParameterType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "rest.RestOperationParameterType";
        }
    }
    RestOperationParameterType.Path = new RestOperationParameterType("Path", {});
    RestOperationParameterType.Query = new RestOperationParameterType("Query", {});
    RestOperationParameterType.Body = new RestOperationParameterType("Body", {
        "introduced": "7.13.0"
    });
    rest.RestOperationParameterType = RestOperationParameterType;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-services relevant section in reference guide}
     */
    class PublishedODataService extends projects_1.projects.Document {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__namespace = new internal.PrimitiveProperty(PublishedODataService, this, "namespace", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__path = new internal.PrimitiveProperty(PublishedODataService, this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__allowedModuleRoles = new internal.ByNameReferenceListProperty(PublishedODataService, this, "allowedModuleRoles", [], "Security$ModuleRole");
            /** @internal */
            this.__resources = new internal.PartListProperty(PublishedODataService, this, "resources", []);
            this._containmentName = "documents";
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get namespace() { return this.__namespace.get(); }
        set namespace(newValue) { this.__namespace.set(newValue); }
        get path() { return this.__path.get(); }
        set path(newValue) { this.__path.set(newValue); }
        get allowedModuleRoles() { return this.__allowedModuleRoles.get(); }
        get allowedModuleRolesQualifiedNames() { return this.__allowedModuleRoles.qualifiedNames(); }
        get resources() { return this.__resources.get(); }
        /**
         * Creates a new PublishedODataService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container) {
            return internal.instancehelpers.createUnit(container, PublishedODataService);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.namespace = "DefaultNamespace";
        }
    }
    PublishedODataService.structureTypeName = "Rest$PublishedODataService";
    PublishedODataService.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
    rest.PublishedODataService = PublishedODataService;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-resource relevant section in reference guide}
     */
    class PublishedRestResource extends webservices_1.webservices.PublishedResource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__path = new internal.PrimitiveProperty(PublishedRestResource, this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__usePaging = new internal.PrimitiveProperty(PublishedRestResource, this, "usePaging", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__pageSize = new internal.PrimitiveProperty(PublishedRestResource, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new PublishedRestResource() cannot be invoked directly, please use 'model.rest.createPublishedRestResource()'");
            }
        }
        get containerAsPublishedODataService() { return super.getContainerAs(PublishedODataService); }
        get path() { return this.__path.get(); }
        set path(newValue) { this.__path.set(newValue); }
        get usePaging() { return this.__usePaging.get(); }
        set usePaging(newValue) { this.__usePaging.set(newValue); }
        get pageSize() { return this.__pageSize.get(); }
        set pageSize(newValue) { this.__pageSize.set(newValue); }
        /**
         * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
         * The new PublishedRestResource will be automatically stored in the 'resources' property
         * of the parent PublishedODataService element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, PublishedRestResource, "resources", true);
        }
        /**
         * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PublishedRestResource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.pageSize = 10000;
        }
    }
    PublishedRestResource.structureTypeName = "Rest$PublishedRestResource";
    PublishedRestResource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    rest.PublishedRestResource = PublishedRestResource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-rest-services relevant section in reference guide}
     *
     * In version 7.11.0: removed experimental
     * In version 7.6.0: introduced
     */
    class PublishedRestService extends projects_1.projects.Document {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__path = new internal.PrimitiveProperty(PublishedRestService, this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__serviceName = new internal.PrimitiveProperty(PublishedRestService, this, "serviceName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__version = new internal.PrimitiveProperty(PublishedRestService, this, "version", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__authenticationType = new internal.EnumProperty(PublishedRestService, this, "authenticationType", RestAuthenticationType.Basic, RestAuthenticationType);
            /** @internal */
            this.__authenticationTypes = new internal.EnumListProperty(PublishedRestService, this, "authenticationTypes", [], RestAuthenticationType);
            /** @internal */
            this.__allowedRoles = new internal.ByNameReferenceListProperty(PublishedRestService, this, "allowedRoles", [], "Security$ModuleRole");
            /** @internal */
            this.__resources = new internal.PartListProperty(PublishedRestService, this, "resources", []);
            this._containmentName = "documents";
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get path() { return this.__path.get(); }
        set path(newValue) { this.__path.set(newValue); }
        /**
         * In version 7.12.0: introduced
         */
        get serviceName() { return this.__serviceName.get(); }
        set serviceName(newValue) { this.__serviceName.set(newValue); }
        /**
         * In version 7.12.0: introduced
         */
        get version() { return this.__version.get(); }
        set version(newValue) { this.__version.set(newValue); }
        /**
         * In version 7.13.0: deleted
         * In version 7.11.0: introduced
         */
        get authenticationType() { return this.__authenticationType.get(); }
        set authenticationType(newValue) { this.__authenticationType.set(newValue); }
        /**
         * In version 7.13.0: introduced
         */
        get authenticationTypes() { return this.__authenticationTypes.get(); }
        get allowedRoles() { return this.__allowedRoles.get(); }
        get allowedRolesQualifiedNames() { return this.__allowedRoles.qualifiedNames(); }
        /**
         * In version 7.7.0: introduced
         */
        get resources() { return this.__resources.get(); }
        /**
         * Creates a new PublishedRestService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container) {
            return internal.instancehelpers.createUnit(container, PublishedRestService);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__authenticationType.isAvailable) {
                this.authenticationType = RestAuthenticationType.Basic;
            }
            if (this.__authenticationTypes.isAvailable) {
                this.authenticationTypes.replace([RestAuthenticationType.Basic, RestAuthenticationType.Session]);
            }
            if (this.__version.isAvailable) {
                this.version = "1.0.0";
            }
        }
    }
    PublishedRestService.structureTypeName = "Rest$PublishedRestService";
    PublishedRestService.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.6.0",
        "properties": {
            "serviceName": {
                "introduced": "7.12.0"
            },
            "version": {
                "introduced": "7.12.0"
            },
            "authenticationType": {
                "introduced": "7.11.0",
                "deleted": "7.13.0",
                "deletionMessage": null
            },
            "authenticationTypes": {
                "introduced": "7.13.0"
            },
            "resources": {
                "introduced": "7.7.0"
            }
        },
        "experimental": {
            "currentValue": false,
            "changedIn": [
                "7.11.0"
            ]
        }
    }, internal.StructureType.ModelUnit);
    rest.PublishedRestService = PublishedRestService;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-rest-operation relevant section in reference guide}
     *
     * In version 7.11.0: removed experimental
     * In version 7.7.0: introduced
     */
    class PublishedRestServiceOperation extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__summary = new internal.PrimitiveProperty(PublishedRestServiceOperation, this, "summary", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__documentation = new internal.PrimitiveProperty(PublishedRestServiceOperation, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__path = new internal.PrimitiveProperty(PublishedRestServiceOperation, this, "path", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__httpMethod = new internal.EnumProperty(PublishedRestServiceOperation, this, "httpMethod", services_1.services.HttpMethod.Get, services_1.services.HttpMethod);
            /** @internal */
            this.__microflow = new internal.ByNameReferenceProperty(PublishedRestServiceOperation, this, "microflow", null, "Microflows$Microflow");
            /** @internal */
            this.__exportMapping = new internal.ByNameReferenceProperty(PublishedRestServiceOperation, this, "exportMapping", null, "ExportMappings$ExportMapping");
            /** @internal */
            this.__importMapping = new internal.ByNameReferenceProperty(PublishedRestServiceOperation, this, "importMapping", null, "ImportMappings$ImportMapping");
            /** @internal */
            this.__commit = new internal.EnumProperty(PublishedRestServiceOperation, this, "commit", microflows_1.microflows.CommitEnum.No, microflows_1.microflows.CommitEnum);
            if (arguments.length < 4) {
                throw new Error("new PublishedRestServiceOperation() cannot be invoked directly, please use 'model.rest.createPublishedRestServiceOperation()'");
            }
        }
        get containerAsPublishedRestServiceResource() { return super.getContainerAs(PublishedRestServiceResource); }
        get summary() { return this.__summary.get(); }
        set summary(newValue) { this.__summary.set(newValue); }
        get documentation() { return this.__documentation.get(); }
        set documentation(newValue) { this.__documentation.set(newValue); }
        get path() { return this.__path.get(); }
        set path(newValue) { this.__path.set(newValue); }
        get httpMethod() { return this.__httpMethod.get(); }
        set httpMethod(newValue) { this.__httpMethod.set(newValue); }
        get microflow() { return this.__microflow.get(); }
        set microflow(newValue) { this.__microflow.set(newValue); }
        get microflowQualifiedName() { return this.__microflow.qualifiedName(); }
        /**
         * In version 7.14.0: introduced
         */
        get exportMapping() { return this.__exportMapping.get(); }
        set exportMapping(newValue) { this.__exportMapping.set(newValue); }
        get exportMappingQualifiedName() { return this.__exportMapping.qualifiedName(); }
        /**
         * In version 7.14.0: introduced
         */
        get importMapping() { return this.__importMapping.get(); }
        set importMapping(newValue) { this.__importMapping.set(newValue); }
        get importMappingQualifiedName() { return this.__importMapping.qualifiedName(); }
        /**
         * In version 7.14.0: introduced
         */
        get commit() { return this.__commit.get(); }
        set commit(newValue) { this.__commit.set(newValue); }
        /**
         * Creates and returns a new PublishedRestServiceOperation instance in the SDK and on the server.
         * The new PublishedRestServiceOperation will be automatically stored in the 'operations' property
         * of the parent PublishedRestServiceResource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, PublishedRestServiceOperation.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, PublishedRestServiceOperation, "operations", true);
        }
        /**
         * Creates and returns a new PublishedRestServiceOperation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PublishedRestServiceOperation);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__commit.isAvailable) {
                this.commit = microflows_1.microflows.CommitEnum.No;
            }
            this.httpMethod = services_1.services.HttpMethod.Get;
        }
    }
    PublishedRestServiceOperation.structureTypeName = "Rest$PublishedRestServiceOperation";
    PublishedRestServiceOperation.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0",
        "properties": {
            "exportMapping": {
                "introduced": "7.14.0"
            },
            "importMapping": {
                "introduced": "7.14.0"
            },
            "commit": {
                "introduced": "7.14.0"
            }
        },
        "experimental": {
            "currentValue": false,
            "changedIn": [
                "7.11.0"
            ]
        }
    }, internal.StructureType.Element);
    rest.PublishedRestServiceOperation = PublishedRestServiceOperation;
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-rest-resource relevant section in reference guide}
     *
     * In version 7.11.0: removed experimental
     * In version 7.7.0: introduced
     */
    class PublishedRestServiceResource extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__name = new internal.PrimitiveProperty(PublishedRestServiceResource, this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__documentation = new internal.PrimitiveProperty(PublishedRestServiceResource, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__operations = new internal.PartListProperty(PublishedRestServiceResource, this, "operations", []);
            if (arguments.length < 4) {
                throw new Error("new PublishedRestServiceResource() cannot be invoked directly, please use 'model.rest.createPublishedRestServiceResource()'");
            }
        }
        get containerAsPublishedRestService() { return super.getContainerAs(PublishedRestService); }
        get name() { return this.__name.get(); }
        set name(newValue) { this.__name.set(newValue); }
        get documentation() { return this.__documentation.get(); }
        set documentation(newValue) { this.__documentation.set(newValue); }
        get operations() { return this.__operations.get(); }
        /**
         * Creates and returns a new PublishedRestServiceResource instance in the SDK and on the server.
         * The new PublishedRestServiceResource will be automatically stored in the 'resources' property
         * of the parent PublishedRestService element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, PublishedRestServiceResource.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, PublishedRestServiceResource, "resources", true);
        }
        /**
         * Creates and returns a new PublishedRestServiceResource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PublishedRestServiceResource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    PublishedRestServiceResource.structureTypeName = "Rest$PublishedRestServiceResource";
    PublishedRestServiceResource.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0",
        "experimental": {
            "currentValue": false,
            "changedIn": [
                "7.11.0"
            ]
        }
    }, internal.StructureType.Element);
    rest.PublishedRestServiceResource = PublishedRestServiceResource;
    /**
     * In version 7.11.0: removed experimental
     * In version 7.8.0: introduced
     */
    class RestOperationParameter extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__name = new internal.PrimitiveProperty(RestOperationParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__dataType = new internal.PrimitiveProperty(RestOperationParameter, this, "dataType", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__parameterType = new internal.EnumProperty(RestOperationParameter, this, "parameterType", RestOperationParameterType.Query, RestOperationParameterType);
            if (arguments.length < 4) {
                throw new Error("new RestOperationParameter() cannot be invoked directly, please use 'model.rest.createRestOperationParameter()'");
            }
        }
        get name() { return this.__name.get(); }
        set name(newValue) { this.__name.set(newValue); }
        /**
         * The value of this property is conceptually of type dataTypes.LegacyDataType.
         *
         * In version 7.9.0: deleted
         */
        get dataType() { return this.__dataType.get(); }
        set dataType(newValue) { this.__dataType.set(newValue); }
        get parameterType() { return this.__parameterType.get(); }
        set parameterType(newValue) { this.__parameterType.set(newValue); }
        /**
         * Creates and returns a new RestOperationParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, RestOperationParameter);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__dataType.isAvailable) {
                this.dataType = "String";
            }
            this.parameterType = RestOperationParameterType.Query;
        }
    }
    RestOperationParameter.structureTypeName = "Rest$RestOperationParameter";
    RestOperationParameter.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.8.0",
        "properties": {
            "dataType": {
                "deleted": "7.9.0",
                "deletionMessage": null,
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": false,
            "changedIn": [
                "7.11.0"
            ]
        }
    }, internal.StructureType.Element);
    rest.RestOperationParameter = RestOperationParameter;
})(rest = exports.rest || (exports.rest = {}));
const microflows_1 = require("./microflows");
const services_1 = require("./services");
//# sourceMappingURL=rest.js.map