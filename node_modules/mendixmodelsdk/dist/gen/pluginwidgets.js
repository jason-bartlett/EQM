"use strict";
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
const internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
const pages_1 = require("./pages");
var pluginwidgets;
(function (pluginwidgets) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `PluginWidgets`.
     */
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class PropertyValue extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new PropertyValue() cannot be invoked directly, please use 'model.pluginwidgets.createPropertyValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    PropertyValue.structureTypeName = "PluginWidgets$PropertyValue";
    PropertyValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.PropertyValue = PropertyValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    class ActionValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PartProperty(ActionValue, this, "value", null, false);
            if (arguments.length < 4) {
                throw new Error("new ActionValue() cannot be invoked directly, please use 'model.pluginwidgets.createActionValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new ActionValue instance in the SDK and on the server.
         * The new ActionValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, ActionValue.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ActionValue, "value", false);
        }
        /**
         * Creates and returns a new ActionValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ActionValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ActionValue.structureTypeName = "PluginWidgets$ActionValue";
    ActionValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.6.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.ActionValue = ActionValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.4.0: introduced
     */
    class AttributeValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PartProperty(AttributeValue, this, "value", null, false);
            /** @internal */
            this.__readOnly = new internal.PrimitiveProperty(AttributeValue, this, "readOnly", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__validations = new internal.PartListProperty(AttributeValue, this, "validations", []);
            /** @internal */
            this.__numberFormat = new internal.PartProperty(AttributeValue, this, "numberFormat", null, false);
            /** @internal */
            this.__dateTimeFormat = new internal.PartProperty(AttributeValue, this, "dateTimeFormat", null, false);
            if (arguments.length < 4) {
                throw new Error("new AttributeValue() cannot be invoked directly, please use 'model.pluginwidgets.createAttributeValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        /**
         * In version 7.11.0: introduced
         */
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * In version 7.6.0: introduced
         */
        get readOnly() { return this.__readOnly.get(); }
        set readOnly(newValue) { this.__readOnly.set(newValue); }
        /**
         * In version 7.7.0: introduced
         */
        get validations() { return this.__validations.get(); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.7.0: introduced
         */
        get numberFormat() { return this.__numberFormat.get(); }
        set numberFormat(newValue) { this.__numberFormat.set(newValue); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.11.0: introduced
         */
        get dateTimeFormat() { return this.__dateTimeFormat.get(); }
        set dateTimeFormat(newValue) { this.__dateTimeFormat.set(newValue); }
        /**
         * Creates and returns a new AttributeValue instance in the SDK and on the server.
         * The new AttributeValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.4.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, AttributeValue.structureTypeName, { start: "7.4.0" });
            return internal.instancehelpers.createElement(container, AttributeValue, "value", false);
        }
        /**
         * Creates and returns a new AttributeValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, AttributeValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    AttributeValue.structureTypeName = "PluginWidgets$AttributeValue";
    AttributeValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.4.0",
        "properties": {
            "value": {
                "introduced": "7.11.0"
            },
            "readOnly": {
                "introduced": "7.6.0"
            },
            "validations": {
                "introduced": "7.7.0"
            },
            "numberFormat": {
                "introduced": "7.7.0"
            },
            "dateTimeFormat": {
                "introduced": "7.11.0"
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.AttributeValue = AttributeValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class PrimitiveValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new PrimitiveValue() cannot be invoked directly, please use 'model.pluginwidgets.createPrimitiveValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    PrimitiveValue.structureTypeName = "PluginWidgets$PrimitiveValue";
    PrimitiveValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.PrimitiveValue = PrimitiveValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class BooleanValue extends PrimitiveValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(BooleanValue, this, "value", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new BooleanValue() cannot be invoked directly, please use 'model.pluginwidgets.createBooleanValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new BooleanValue instance in the SDK and on the server.
         * The new BooleanValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, BooleanValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, BooleanValue, "value", false);
        }
        /**
         * Creates and returns a new BooleanValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, BooleanValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    BooleanValue.structureTypeName = "PluginWidgets$BooleanValue";
    BooleanValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.BooleanValue = BooleanValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class CompositeValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__properties = new internal.PartListProperty(CompositeValue, this, "properties", []);
            if (arguments.length < 4) {
                throw new Error("new CompositeValue() cannot be invoked directly, please use 'model.pluginwidgets.createCompositeValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        get properties() { return this.__properties.get(); }
        /**
         * Creates and returns a new CompositeValue instance in the SDK and on the server.
         * The new CompositeValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, CompositeValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, CompositeValue, "value", false);
        }
        /**
         * Creates and returns a new CompositeValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, CompositeValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    CompositeValue.structureTypeName = "PluginWidgets$CompositeValue";
    CompositeValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.CompositeValue = CompositeValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class DateTimeFormat extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__type = new internal.EnumProperty(DateTimeFormat, this, "type", pages_1.pages.DateFormat.Date, pages_1.pages.DateFormat);
            /** @internal */
            this.__pattern = new internal.PrimitiveProperty(DateTimeFormat, this, "pattern", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new DateTimeFormat() cannot be invoked directly, please use 'model.pluginwidgets.createDateTimeFormat()'");
            }
        }
        get containerAsAttributeValue() { return super.getContainerAs(AttributeValue); }
        get type() { return this.__type.get(); }
        set type(newValue) { this.__type.set(newValue); }
        get pattern() { return this.__pattern.get(); }
        set pattern(newValue) { this.__pattern.set(newValue); }
        /**
         * Creates and returns a new DateTimeFormat instance in the SDK and on the server.
         * The new DateTimeFormat will be automatically stored in the 'dateTimeFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DateTimeFormat.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, DateTimeFormat, "dateTimeFormat", false);
        }
        /**
         * Creates and returns a new DateTimeFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DateTimeFormat);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.type = pages_1.pages.DateFormat.Date;
        }
    }
    DateTimeFormat.structureTypeName = "PluginWidgets$DateTimeFormat";
    DateTimeFormat.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.11.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.DateTimeFormat = DateTimeFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    class NumberFormat extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__groupDigits = new internal.PrimitiveProperty(NumberFormat, this, "groupDigits", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new NumberFormat() cannot be invoked directly, please use 'model.pluginwidgets.createNumberFormat()'");
            }
        }
        get containerAsAttributeValue() { return super.getContainerAs(AttributeValue); }
        get groupDigits() { return this.__groupDigits.get(); }
        set groupDigits(newValue) { this.__groupDigits.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NumberFormat.structureTypeName = "PluginWidgets$NumberFormat";
    NumberFormat.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.NumberFormat = NumberFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    class DecimalNumberFormat extends NumberFormat {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__decimalPrecision = new internal.PrimitiveProperty(DecimalNumberFormat, this, "decimalPrecision", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new DecimalNumberFormat() cannot be invoked directly, please use 'model.pluginwidgets.createDecimalNumberFormat()'");
            }
        }
        get containerAsAttributeValue() { return super.getContainerAs(AttributeValue); }
        get decimalPrecision() { return this.__decimalPrecision.get(); }
        set decimalPrecision(newValue) { this.__decimalPrecision.set(newValue); }
        /**
         * Creates and returns a new DecimalNumberFormat instance in the SDK and on the server.
         * The new DecimalNumberFormat will be automatically stored in the 'numberFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DecimalNumberFormat.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DecimalNumberFormat, "numberFormat", false);
        }
        /**
         * Creates and returns a new DecimalNumberFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DecimalNumberFormat);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DecimalNumberFormat.structureTypeName = "PluginWidgets$DecimalNumberFormat";
    DecimalNumberFormat.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.DecimalNumberFormat = DecimalNumberFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class DynamicTextValue extends PrimitiveValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PartProperty(DynamicTextValue, this, "value", null, true);
            if (arguments.length < 4) {
                throw new Error("new DynamicTextValue() cannot be invoked directly, please use 'model.pluginwidgets.createDynamicTextValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new DynamicTextValue instance in the SDK and on the server.
         * The new DynamicTextValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DynamicTextValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DynamicTextValue, "value", false);
        }
        /**
         * Creates and returns a new DynamicTextValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DynamicTextValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.value = pages_1.pages.ClientTemplate.create(this.model);
        }
    }
    DynamicTextValue.structureTypeName = "PluginWidgets$DynamicTextValue";
    DynamicTextValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "properties": {
            "value": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.DynamicTextValue = DynamicTextValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    class EnumValue extends PrimitiveValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(EnumValue, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new EnumValue() cannot be invoked directly, please use 'model.pluginwidgets.createEnumValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new EnumValue instance in the SDK and on the server.
         * The new EnumValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, EnumValue.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, EnumValue, "value", false);
        }
        /**
         * Creates and returns a new EnumValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, EnumValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    EnumValue.structureTypeName = "PluginWidgets$EnumValue";
    EnumValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.9.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.EnumValue = EnumValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    class ExpressionValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(ExpressionValue, this, "value", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__valueModel = new internal.PartProperty(ExpressionValue, this, "valueModel", null, true);
            if (arguments.length < 4) {
                throw new Error("new ExpressionValue() cannot be invoked directly, please use 'model.pluginwidgets.createExpressionValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         */
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.9.0: introduced
         */
        get valueModel() { return this.__valueModel.get(); }
        set valueModel(newValue) { this.__valueModel.set(newValue); }
        /**
         * Creates and returns a new ExpressionValue instance in the SDK and on the server.
         * The new ExpressionValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, ExpressionValue.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ExpressionValue, "value", false);
        }
        /**
         * Creates and returns a new ExpressionValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ExpressionValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__valueModel.isAvailable) {
                this.valueModel = expressions_1.expressions.NoExpression.create(this.model);
            }
        }
    }
    ExpressionValue.structureTypeName = "PluginWidgets$ExpressionValue";
    ExpressionValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.6.0",
        "properties": {
            "valueModel": {
                "introduced": "7.9.0",
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.ExpressionValue = ExpressionValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class ImageValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.ByIdReferenceProperty(ImageValue, this, "value", null);
            if (arguments.length < 4) {
                throw new Error("new ImageValue() cannot be invoked directly, please use 'model.pluginwidgets.createImageValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new ImageValue instance in the SDK and on the server.
         * The new ImageValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, ImageValue.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, ImageValue, "value", false);
        }
        /**
         * Creates and returns a new ImageValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ImageValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ImageValue.structureTypeName = "PluginWidgets$ImageValue";
    ImageValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.11.0",
        "properties": {
            "value": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.ImageValue = ImageValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.7.0: introduced
     */
    class IntegerNumberFormat extends NumberFormat {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new IntegerNumberFormat() cannot be invoked directly, please use 'model.pluginwidgets.createIntegerNumberFormat()'");
            }
        }
        get containerAsAttributeValue() { return super.getContainerAs(AttributeValue); }
        /**
         * Creates and returns a new IntegerNumberFormat instance in the SDK and on the server.
         * The new IntegerNumberFormat will be automatically stored in the 'numberFormat' property
         * of the parent AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, IntegerNumberFormat.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, IntegerNumberFormat, "numberFormat", false);
        }
        /**
         * Creates and returns a new IntegerNumberFormat instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, IntegerNumberFormat);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    IntegerNumberFormat.structureTypeName = "PluginWidgets$IntegerNumberFormat";
    IntegerNumberFormat.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.IntegerNumberFormat = IntegerNumberFormat;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.14.0: introduced
     */
    class MicroflowObjectListValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__microflow = new internal.ByNameReferenceProperty(MicroflowObjectListValue, this, "microflow", null, "Microflows$Microflow");
            if (arguments.length < 4) {
                throw new Error("new MicroflowObjectListValue() cannot be invoked directly, please use 'model.pluginwidgets.createMicroflowObjectListValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get microflow() { return this.__microflow.get(); }
        set microflow(newValue) { this.__microflow.set(newValue); }
        get microflowQualifiedName() { return this.__microflow.qualifiedName(); }
        /**
         * Creates and returns a new MicroflowObjectListValue instance in the SDK and on the server.
         * The new MicroflowObjectListValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.14.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, MicroflowObjectListValue.structureTypeName, { start: "7.14.0" });
            return internal.instancehelpers.createElement(container, MicroflowObjectListValue, "value", false);
        }
        /**
         * Creates and returns a new MicroflowObjectListValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MicroflowObjectListValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    MicroflowObjectListValue.structureTypeName = "PluginWidgets$MicroflowObjectListValue";
    MicroflowObjectListValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.14.0",
        "properties": {
            "microflow": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.MicroflowObjectListValue = MicroflowObjectListValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class NativeClassValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(NativeClassValue, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new NativeClassValue() cannot be invoked directly, please use 'model.pluginwidgets.createNativeClassValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new NativeClassValue instance in the SDK and on the server.
         * The new NativeClassValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, NativeClassValue.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, NativeClassValue, "value", false);
        }
        /**
         * Creates and returns a new NativeClassValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NativeClassValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NativeClassValue.structureTypeName = "PluginWidgets$NativeClassValue";
    NativeClassValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.11.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.NativeClassValue = NativeClassValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    class NestedWidgetValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__entity = new internal.ByNameReferenceProperty(NestedWidgetValue, this, "entity", null, "DomainModels$Entity");
            /** @internal */
            this.__widgets = new internal.PartListProperty(NestedWidgetValue, this, "widgets", []);
            if (arguments.length < 4) {
                throw new Error("new NestedWidgetValue() cannot be invoked directly, please use 'model.pluginwidgets.createNestedWidgetValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        /**
         * In version 7.11.0: deleted
         */
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        get entityQualifiedName() { return this.__entity.qualifiedName(); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        get widgets() { return this.__widgets.get(); }
        /**
         * Creates and returns a new NestedWidgetValue instance in the SDK and on the server.
         * The new NestedWidgetValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, NestedWidgetValue.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, NestedWidgetValue, "value", false);
        }
        /**
         * Creates and returns a new NestedWidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NestedWidgetValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NestedWidgetValue.structureTypeName = "PluginWidgets$NestedWidgetValue";
    NestedWidgetValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.9.0",
        "properties": {
            "entity": {
                "deleted": "7.11.0",
                "deletionMessage": null,
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.NestedWidgetValue = NestedWidgetValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class NumericValue extends PrimitiveValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(NumericValue, this, "value", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new NumericValue() cannot be invoked directly, please use 'model.pluginwidgets.createNumericValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new NumericValue instance in the SDK and on the server.
         * The new NumericValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, NumericValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, NumericValue, "value", false);
        }
        /**
         * Creates and returns a new NumericValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NumericValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NumericValue.structureTypeName = "PluginWidgets$NumericValue";
    NumericValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.NumericValue = NumericValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.9.0: introduced
     */
    class OfflineObjectListValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__entity = new internal.ByNameReferenceProperty(OfflineObjectListValue, this, "entity", null, "DomainModels$Entity");
            /** @internal */
            this.__pageSize = new internal.PrimitiveProperty(OfflineObjectListValue, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new OfflineObjectListValue() cannot be invoked directly, please use 'model.pluginwidgets.createOfflineObjectListValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        get entityQualifiedName() { return this.__entity.qualifiedName(); }
        get pageSize() { return this.__pageSize.get(); }
        set pageSize(newValue) { this.__pageSize.set(newValue); }
        /**
         * Creates and returns a new OfflineObjectListValue instance in the SDK and on the server.
         * The new OfflineObjectListValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, OfflineObjectListValue.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, OfflineObjectListValue, "value", false);
        }
        /**
         * Creates and returns a new OfflineObjectListValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, OfflineObjectListValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    OfflineObjectListValue.structureTypeName = "PluginWidgets$OfflineObjectListValue";
    OfflineObjectListValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.9.0",
        "properties": {
            "entity": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.OfflineObjectListValue = OfflineObjectListValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.0.1: introduced
     */
    class PluginWidget extends pages_1.pages.ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__pluginWidgetName = new internal.PrimitiveProperty(PluginWidget, this, "pluginWidgetName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__pluginWidgetVersion = new internal.PrimitiveProperty(PluginWidget, this, "pluginWidgetVersion", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__properties = new internal.PartListProperty(PluginWidget, this, "properties", []);
            /** @internal */
            this.__widgets = new internal.PartListProperty(PluginWidget, this, "widgets", []);
            if (arguments.length < 4) {
                throw new Error("new PluginWidget() cannot be invoked directly, please use 'model.pluginwidgets.createPluginWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(pages_1.pages.BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(pages_1.pages.DataView); }
        get containerAsDivContainer() { return super.getContainerAs(pages_1.pages.DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(pages_1.pages.GroupBox); }
        get containerAsHeader() { return super.getContainerAs(pages_1.pages.Header); }
        get containerAsLayout() { return super.getContainerAs(pages_1.pages.Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(pages_1.pages.LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(pages_1.pages.LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(pages_1.pages.ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(pages_1.pages.ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(pages_1.pages.MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(pages_1.pages.NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(pages_1.pages.ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(pages_1.pages.Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(pages_1.pages.SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(pages_1.pages.TabPage); }
        get containerAsTableCell() { return super.getContainerAs(pages_1.pages.TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(pages_1.pages.TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(pages_1.pages.VerticalFlow); }
        get containerAsNestedWidgetValue() { return super.getContainerAs(NestedWidgetValue); }
        get containerAsPluginWidget() { return super.getContainerAs(PluginWidget); }
        get containerAsTemplatedWidgetValue() { return super.getContainerAs(TemplatedWidgetValue); }
        get pluginWidgetName() { return this.__pluginWidgetName.get(); }
        set pluginWidgetName(newValue) { this.__pluginWidgetName.set(newValue); }
        get pluginWidgetVersion() { return this.__pluginWidgetVersion.get(); }
        set pluginWidgetVersion(newValue) { this.__pluginWidgetVersion.set(newValue); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.1.0: introduced
         */
        get properties() { return this.__properties.get(); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.14.0: deleted
         * In version 7.8.0: introduced
         */
        get widgets() { return this.__widgets.get(); }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "footerWidget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "leftWidget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "rightWidget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "firstWidget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "secondWidget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1 and higher
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.0.1" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent NestedWidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.9.0 and higher
         */
        static createInNestedWidgetValueUnderWidgets(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.9.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent PluginWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 to 7.13.0
         */
        static createInPluginWidgetUnderWidgets(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.8.0", end: "7.13.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent TemplatedWidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createInTemplatedWidgetValueUnderWidgets(container) {
            internal.createInVersionCheck(container.model, PluginWidget.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        }
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PluginWidget);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    PluginWidget.structureTypeName = "PluginWidgets$PluginWidget";
    PluginWidget.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.1",
        "properties": {
            "properties": {
                "introduced": "7.1.0"
            },
            "widgets": {
                "introduced": "7.8.0",
                "deleted": "7.14.0",
                "deletionMessage": null
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.PluginWidget = PluginWidget;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class PluginWidgetProperty extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__key = new internal.PrimitiveProperty(PluginWidgetProperty, this, "key", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__value = new internal.PartProperty(PluginWidgetProperty, this, "value", null, false);
            if (arguments.length < 4) {
                throw new Error("new PluginWidgetProperty() cannot be invoked directly, please use 'model.pluginwidgets.createPluginWidgetProperty()'");
            }
        }
        get containerAsCompositeValue() { return super.getContainerAs(CompositeValue); }
        get containerAsPluginWidget() { return super.getContainerAs(PluginWidget); }
        get key() { return this.__key.get(); }
        set key(newValue) { this.__key.set(newValue); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * The new PluginWidgetProperty will be automatically stored in the 'properties' property
         * of the parent CompositeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInCompositeValueUnderProperties(container) {
            internal.createInVersionCheck(container.model, PluginWidgetProperty.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, PluginWidgetProperty, "properties", true);
        }
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * The new PluginWidgetProperty will be automatically stored in the 'properties' property
         * of the parent PluginWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInPluginWidgetUnderProperties(container) {
            internal.createInVersionCheck(container.model, PluginWidgetProperty.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, PluginWidgetProperty, "properties", true);
        }
        /**
         * Creates and returns a new PluginWidgetProperty instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PluginWidgetProperty);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    PluginWidgetProperty.structureTypeName = "PluginWidgets$PluginWidgetProperty";
    PluginWidgetProperty.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.PluginWidgetProperty = PluginWidgetProperty;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class StringValue extends PrimitiveValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(StringValue, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new StringValue() cannot be invoked directly, please use 'model.pluginwidgets.createStringValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new StringValue instance in the SDK and on the server.
         * The new StringValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, StringValue.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, StringValue, "value", false);
        }
        /**
         * Creates and returns a new StringValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, StringValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    StringValue.structureTypeName = "PluginWidgets$StringValue";
    StringValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.StringValue = StringValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.11.0: introduced
     */
    class TemplatedWidgetValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widgets = new internal.PartListProperty(TemplatedWidgetValue, this, "widgets", []);
            /** @internal */
            this.__entity = new internal.ByNameReferenceProperty(TemplatedWidgetValue, this, "entity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new TemplatedWidgetValue() cannot be invoked directly, please use 'model.pluginwidgets.createTemplatedWidgetValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        get widgets() { return this.__widgets.get(); }
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        get entityQualifiedName() { return this.__entity.qualifiedName(); }
        /**
         * Creates and returns a new TemplatedWidgetValue instance in the SDK and on the server.
         * The new TemplatedWidgetValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.11.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, TemplatedWidgetValue.structureTypeName, { start: "7.11.0" });
            return internal.instancehelpers.createElement(container, TemplatedWidgetValue, "value", false);
        }
        /**
         * Creates and returns a new TemplatedWidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TemplatedWidgetValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    TemplatedWidgetValue.structureTypeName = "PluginWidgets$TemplatedWidgetValue";
    TemplatedWidgetValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.11.0",
        "properties": {
            "entity": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.TemplatedWidgetValue = TemplatedWidgetValue;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.6.0: introduced
     */
    class ValidationEventValue extends PropertyValue {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__sourceWidget = new internal.PrimitiveProperty(ValidationEventValue, this, "sourceWidget", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ValidationEventValue() cannot be invoked directly, please use 'model.pluginwidgets.createValidationEventValue()'");
            }
        }
        get containerAsPluginWidgetProperty() { return super.getContainerAs(PluginWidgetProperty); }
        get sourceWidget() { return this.__sourceWidget.get(); }
        set sourceWidget(newValue) { this.__sourceWidget.set(newValue); }
        /**
         * Creates and returns a new ValidationEventValue instance in the SDK and on the server.
         * The new ValidationEventValue will be automatically stored in the 'value' property
         * of the parent PluginWidgetProperty element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, ValidationEventValue.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ValidationEventValue, "value", false);
        }
        /**
         * Creates and returns a new ValidationEventValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ValidationEventValue);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ValidationEventValue.structureTypeName = "PluginWidgets$ValidationEventValue";
    ValidationEventValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.6.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.ValidationEventValue = ValidationEventValue;
})(pluginwidgets = exports.pluginwidgets || (exports.pluginwidgets = {}));
const expressions_1 = require("./expressions");
//# sourceMappingURL=pluginwidgets.js.map