"use strict";
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
const internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
const utils_1 = require("../sdk/utils");
const projects_1 = require("./projects");
var pages;
(function (pages) {
    class AggregateFunction extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.AggregateFunction";
        }
    }
    AggregateFunction.None = new AggregateFunction("None", {});
    AggregateFunction.Average = new AggregateFunction("Average", {});
    AggregateFunction.Maximum = new AggregateFunction("Maximum", {});
    AggregateFunction.Minimum = new AggregateFunction("Minimum", {});
    AggregateFunction.Sum = new AggregateFunction("Sum", {});
    AggregateFunction.Count = new AggregateFunction("Count", {});
    pages.AggregateFunction = AggregateFunction;
    class AlignmentEnum extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.AlignmentEnum";
        }
    }
    AlignmentEnum.Left = new AlignmentEnum("Left", {});
    AlignmentEnum.Center = new AlignmentEnum("Center", {});
    AlignmentEnum.Right = new AlignmentEnum("Right", {});
    pages.AlignmentEnum = AlignmentEnum;
    class ButtonStyle extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ButtonStyle";
        }
    }
    ButtonStyle.Default = new ButtonStyle("Default", {});
    ButtonStyle.Inverse = new ButtonStyle("Inverse", {});
    ButtonStyle.Primary = new ButtonStyle("Primary", {});
    ButtonStyle.Info = new ButtonStyle("Info", {});
    ButtonStyle.Success = new ButtonStyle("Success", {});
    ButtonStyle.Warning = new ButtonStyle("Warning", {});
    ButtonStyle.Danger = new ButtonStyle("Danger", {});
    pages.ButtonStyle = ButtonStyle;
    class ClickTypeType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ClickTypeType";
        }
    }
    ClickTypeType.Single = new ClickTypeType("Single", {});
    ClickTypeType.Double = new ClickTypeType("Double", {});
    pages.ClickTypeType = ClickTypeType;
    class ContainerWidth extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ContainerWidth";
        }
    }
    ContainerWidth.FullWidth = new ContainerWidth("FullWidth", {});
    ContainerWidth.FixedWidth = new ContainerWidth("FixedWidth", {});
    pages.ContainerWidth = ContainerWidth;
    class DataViewReadOnlyStyle extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.DataViewReadOnlyStyle";
        }
    }
    DataViewReadOnlyStyle.Control = new DataViewReadOnlyStyle("Control", {});
    DataViewReadOnlyStyle.Text = new DataViewReadOnlyStyle("Text", {});
    pages.DataViewReadOnlyStyle = DataViewReadOnlyStyle;
    class DatabaseConstraintOperator extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.DatabaseConstraintOperator";
        }
    }
    DatabaseConstraintOperator.Equals = new DatabaseConstraintOperator("Equals", {});
    DatabaseConstraintOperator.NotEquals = new DatabaseConstraintOperator("NotEquals", {});
    DatabaseConstraintOperator.Contains = new DatabaseConstraintOperator("Contains", {});
    DatabaseConstraintOperator.NotContains = new DatabaseConstraintOperator("NotContains", {});
    DatabaseConstraintOperator.LessThan = new DatabaseConstraintOperator("LessThan", {});
    DatabaseConstraintOperator.LessThanOrEquals = new DatabaseConstraintOperator("LessThanOrEquals", {});
    DatabaseConstraintOperator.GreaterThan = new DatabaseConstraintOperator("GreaterThan", {});
    DatabaseConstraintOperator.GreaterThanOrEquals = new DatabaseConstraintOperator("GreaterThanOrEquals", {});
    pages.DatabaseConstraintOperator = DatabaseConstraintOperator;
    class DateFormat extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.DateFormat";
        }
    }
    DateFormat.Date = new DateFormat("Date", {});
    DateFormat.Time = new DateFormat("Time", {});
    DateFormat.DateTime = new DateFormat("DateTime", {});
    DateFormat.Custom = new DateFormat("Custom", {});
    pages.DateFormat = DateFormat;
    class EditableEnum extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.EditableEnum";
        }
    }
    EditableEnum.Always = new EditableEnum("Always", {});
    EditableEnum.Never = new EditableEnum("Never", {});
    EditableEnum.Conditional = new EditableEnum("Conditional", {});
    pages.EditableEnum = EditableEnum;
    class EnumFormat extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.EnumFormat";
        }
    }
    EnumFormat.Text = new EnumFormat("Text", {});
    EnumFormat.Image = new EnumFormat("Image", {});
    pages.EnumFormat = EnumFormat;
    class FileManagerType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.FileManagerType";
        }
    }
    FileManagerType.Upload = new FileManagerType("Upload", {});
    FileManagerType.Download = new FileManagerType("Download", {});
    FileManagerType.Both = new FileManagerType("Both", {});
    pages.FileManagerType = FileManagerType;
    class FormLocation extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.FormLocation";
        }
    }
    FormLocation.Content = new FormLocation("Content", {});
    FormLocation.Popup = new FormLocation("Popup", {});
    FormLocation.ModalPopup = new FormLocation("ModalPopup", {});
    pages.FormLocation = FormLocation;
    class FormValidations extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.FormValidations";
        }
    }
    FormValidations.None = new FormValidations("None", {});
    FormValidations.Widget = new FormValidations("Widget", {});
    FormValidations.All = new FormValidations("All", {});
    pages.FormValidations = FormValidations;
    class GridSelectionMode extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.GridSelectionMode";
        }
    }
    GridSelectionMode.None = new GridSelectionMode("None", {});
    GridSelectionMode.Single = new GridSelectionMode("Single", {});
    GridSelectionMode.SingleAndMaintain = new GridSelectionMode("SingleAndMaintain", {});
    GridSelectionMode.Multi = new GridSelectionMode("Multi", {});
    GridSelectionMode.SimpleMulti = new GridSelectionMode("SimpleMulti", {});
    pages.GridSelectionMode = GridSelectionMode;
    class GroupBoxCollapsible extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.GroupBoxCollapsible";
        }
    }
    GroupBoxCollapsible.No = new GroupBoxCollapsible("No", {});
    GroupBoxCollapsible.YesInitiallyExpanded = new GroupBoxCollapsible("YesInitiallyExpanded", {});
    GroupBoxCollapsible.YesInitiallyCollapsed = new GroupBoxCollapsible("YesInitiallyCollapsed", {});
    pages.GroupBoxCollapsible = GroupBoxCollapsible;
    class ImageSizeUnit extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ImageSizeUnit";
        }
    }
    ImageSizeUnit.Auto = new ImageSizeUnit("Auto", {});
    ImageSizeUnit.Pixels = new ImageSizeUnit("Pixels", {});
    ImageSizeUnit.Percentage = new ImageSizeUnit("Percentage", {});
    pages.ImageSizeUnit = ImageSizeUnit;
    class LayoutModeType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.LayoutModeType";
        }
    }
    LayoutModeType.Headline = new LayoutModeType("Headline", {});
    LayoutModeType.Sidebar = new LayoutModeType("Sidebar", {});
    pages.LayoutModeType = LayoutModeType;
    class LayoutType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.LayoutType";
        }
    }
    LayoutType.Responsive = new LayoutType("Responsive", {});
    LayoutType.Tablet = new LayoutType("Tablet", {});
    LayoutType.Phone = new LayoutType("Phone", {});
    LayoutType.ModalPopup = new LayoutType("ModalPopup", {});
    LayoutType.Popup = new LayoutType("Popup", {});
    LayoutType.Legacy = new LayoutType("Legacy", {});
    pages.LayoutType = LayoutType;
    class LinkType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.LinkType";
        }
    }
    LinkType.Web = new LinkType("Web", {});
    LinkType.Email = new LinkType("Email", {});
    LinkType.Call = new LinkType("Call", {});
    LinkType.Text = new LinkType("Text", {});
    pages.LinkType = LinkType;
    class MobileFooterType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.MobileFooterType";
        }
    }
    MobileFooterType.None = new MobileFooterType("None", {});
    MobileFooterType.MenuBar = new MobileFooterType("MenuBar", {});
    MobileFooterType.Custom = new MobileFooterType("Custom", {});
    pages.MobileFooterType = MobileFooterType;
    class NewButtonEditLocation extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.NewButtonEditLocation";
        }
    }
    NewButtonEditLocation.InlineAtTop = new NewButtonEditLocation("InlineAtTop", {});
    NewButtonEditLocation.InlineAtBottom = new NewButtonEditLocation("InlineAtBottom", {});
    NewButtonEditLocation.Form = new NewButtonEditLocation("Form", {});
    pages.NewButtonEditLocation = NewButtonEditLocation;
    class PageTemplateType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.PageTemplateType";
        }
    }
    PageTemplateType.Standard = new PageTemplateType("Standard", {});
    PageTemplateType.Edit = new PageTemplateType("Edit", {});
    PageTemplateType.Select = new PageTemplateType("Select", {});
    pages.PageTemplateType = PageTemplateType;
    class ProgressBarType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ProgressBarType";
        }
    }
    ProgressBarType.None = new ProgressBarType("None", {});
    ProgressBarType.NonBlocking = new ProgressBarType("NonBlocking", {});
    ProgressBarType.Blocking = new ProgressBarType("Blocking", {});
    pages.ProgressBarType = ProgressBarType;
    class ReadOnlyStyle extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ReadOnlyStyle";
        }
    }
    ReadOnlyStyle.Inherit = new ReadOnlyStyle("Inherit", {});
    ReadOnlyStyle.Control = new ReadOnlyStyle("Control", {});
    ReadOnlyStyle.Text = new ReadOnlyStyle("Text", {});
    pages.ReadOnlyStyle = ReadOnlyStyle;
    class ReferenceSelectorRenderModeType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ReferenceSelectorRenderModeType";
        }
    }
    ReferenceSelectorRenderModeType.Form = new ReferenceSelectorRenderModeType("Form", {});
    ReferenceSelectorRenderModeType.DropDown = new ReferenceSelectorRenderModeType("DropDown", {});
    pages.ReferenceSelectorRenderModeType = ReferenceSelectorRenderModeType;
    class RenderType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.RenderType";
        }
    }
    RenderType.Button = new RenderType("Button", {});
    RenderType.Link = new RenderType("Link", {});
    pages.RenderType = RenderType;
    class ScrollBehavior extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ScrollBehavior";
        }
    }
    ScrollBehavior.PerRegion = new ScrollBehavior("PerRegion", {});
    ScrollBehavior.FullWidget = new ScrollBehavior("FullWidget", {});
    pages.ScrollBehavior = ScrollBehavior;
    class SearchBarTypeEnum extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SearchBarTypeEnum";
        }
    }
    SearchBarTypeEnum.None = new SearchBarTypeEnum("None", {});
    SearchBarTypeEnum.FoldableOpen = new SearchBarTypeEnum("FoldableOpen", {});
    SearchBarTypeEnum.FoldableClosed = new SearchBarTypeEnum("FoldableClosed", {});
    SearchBarTypeEnum.AlwaysOpen = new SearchBarTypeEnum("AlwaysOpen", {});
    pages.SearchBarTypeEnum = SearchBarTypeEnum;
    class SearchFieldOperator extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SearchFieldOperator";
        }
    }
    SearchFieldOperator.Contains = new SearchFieldOperator("Contains", {});
    SearchFieldOperator.StartsWith = new SearchFieldOperator("StartsWith", {});
    SearchFieldOperator.Greater = new SearchFieldOperator("Greater", {});
    SearchFieldOperator.GreaterOrEqual = new SearchFieldOperator("GreaterOrEqual", {});
    SearchFieldOperator.Equal = new SearchFieldOperator("Equal", {});
    SearchFieldOperator.NotEqual = new SearchFieldOperator("NotEqual", {});
    SearchFieldOperator.SmallerOrEqual = new SearchFieldOperator("SmallerOrEqual", {});
    SearchFieldOperator.Smaller = new SearchFieldOperator("Smaller", {});
    pages.SearchFieldOperator = SearchFieldOperator;
    class SearchFieldType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SearchFieldType";
        }
    }
    SearchFieldType.Normal = new SearchFieldType("Normal", {});
    SearchFieldType.Hidden = new SearchFieldType("Hidden", {});
    SearchFieldType.ReadOnly = new SearchFieldType("ReadOnly", {});
    pages.SearchFieldType = SearchFieldType;
    class SelectionType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SelectionType";
        }
    }
    SelectionType.SelectPage = new SelectionType("SelectPage", {});
    SelectionType.SelectAll = new SelectionType("SelectAll", {});
    pages.SelectionType = SelectionType;
    class SidebarToggleMode extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SidebarToggleMode";
        }
    }
    SidebarToggleMode.PushContentAside = new SidebarToggleMode("PushContentAside", {});
    SidebarToggleMode.SlideOverContent = new SidebarToggleMode("SlideOverContent", {});
    SidebarToggleMode.ShrinkContent = new SidebarToggleMode("ShrinkContent", {});
    pages.SidebarToggleMode = SidebarToggleMode;
    class SidebarToggleRegion extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SidebarToggleRegion";
        }
    }
    SidebarToggleRegion.Left = new SidebarToggleRegion("Left", {});
    SidebarToggleRegion.Right = new SidebarToggleRegion("Right", {});
    pages.SidebarToggleRegion = SidebarToggleRegion;
    class SimpleMenuBarOrientation extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SimpleMenuBarOrientation";
        }
    }
    SimpleMenuBarOrientation.Horizontal = new SimpleMenuBarOrientation("Horizontal", {});
    SimpleMenuBarOrientation.Vertical = new SimpleMenuBarOrientation("Vertical", {});
    pages.SimpleMenuBarOrientation = SimpleMenuBarOrientation;
    class SizeMode extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SizeMode";
        }
    }
    SizeMode.Auto = new SizeMode("Auto", {});
    SizeMode.Pixels = new SizeMode("Pixels", {});
    SizeMode.Percentage = new SizeMode("Percentage", {});
    pages.SizeMode = SizeMode;
    class SortDirection extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.SortDirection";
        }
    }
    SortDirection.Ascending = new SortDirection("Ascending", {});
    SortDirection.Descending = new SortDirection("Descending", {});
    pages.SortDirection = SortDirection;
    class TableCellRenderModeType extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.TableCellRenderModeType";
        }
    }
    TableCellRenderModeType.Default = new TableCellRenderModeType("Default", {});
    TableCellRenderModeType.Header = new TableCellRenderModeType("Header", {});
    TableCellRenderModeType.Title = new TableCellRenderModeType("Title", {});
    pages.TableCellRenderModeType = TableCellRenderModeType;
    class TextRenderMode extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.TextRenderMode";
        }
    }
    TextRenderMode.Text = new TextRenderMode("Text", {});
    TextRenderMode.Paragraph = new TextRenderMode("Paragraph", {});
    TextRenderMode.H1 = new TextRenderMode("H1", {});
    TextRenderMode.H2 = new TextRenderMode("H2", {});
    TextRenderMode.H3 = new TextRenderMode("H3", {});
    TextRenderMode.H4 = new TextRenderMode("H4", {});
    TextRenderMode.H5 = new TextRenderMode("H5", {});
    TextRenderMode.H6 = new TextRenderMode("H6", {});
    pages.TextRenderMode = TextRenderMode;
    class ToggleMode extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.ToggleMode";
        }
    }
    ToggleMode.None = new ToggleMode("None", {});
    ToggleMode.PushContentAside = new ToggleMode("PushContentAside", {});
    ToggleMode.SlideOverContent = new ToggleMode("SlideOverContent", {});
    ToggleMode.ShrinkContentInitiallyOpen = new ToggleMode("ShrinkContentInitiallyOpen", {});
    ToggleMode.ShrinkContentInitiallyClosed = new ToggleMode("ShrinkContentInitiallyClosed", {});
    pages.ToggleMode = ToggleMode;
    class UnitEnum extends internal.AbstractEnum {
        constructor() {
            super(...arguments);
            this.qualifiedTsTypeName = "pages.UnitEnum";
        }
    }
    UnitEnum.Weight = new UnitEnum("Weight", {});
    UnitEnum.Pixels = new UnitEnum("Pixels", {});
    pages.UnitEnum = UnitEnum;
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Pages`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     */
    class Widget extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__name = new internal.PrimitiveProperty(Widget, this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(Widget, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(Widget, this, "style", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__tabIndex = new internal.PrimitiveProperty(Widget, this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new Widget() cannot be invoked directly, please use 'model.pages.createWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsNestedWidgetValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.NestedWidgetValue); }
        get containerAsPluginWidget() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.PluginWidget); }
        get containerAsTemplatedWidgetValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.TemplatedWidgetValue); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get name() { return this.__name.get(); }
        set name(newValue) { this.__name.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        get tabIndex() { return this.__tabIndex.get(); }
        set tabIndex(newValue) { this.__tabIndex.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    Widget.structureTypeName = "Pages$Widget";
    Widget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Widget = Widget;
    class ConditionallyVisibleWidget extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__conditionalVisibilitySettings = new internal.PartProperty(ConditionallyVisibleWidget, this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4) {
                throw new Error("new ConditionallyVisibleWidget() cannot be invoked directly, please use 'model.pages.createConditionallyVisibleWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsNestedWidgetValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.NestedWidgetValue); }
        get containerAsPluginWidget() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.PluginWidget); }
        get containerAsTemplatedWidgetValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.TemplatedWidgetValue); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get conditionalVisibilitySettings() { return this.__conditionalVisibilitySettings.get(); }
        set conditionalVisibilitySettings(newValue) { this.__conditionalVisibilitySettings.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ConditionallyVisibleWidget.structureTypeName = "Pages$ConditionallyVisibleWidget";
    ConditionallyVisibleWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionallyVisibleWidget = ConditionallyVisibleWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
     */
    class Button extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__caption = new internal.PartProperty(Button, this, "caption", null, true);
            /** @internal */
            this.__tooltip = new internal.PartProperty(Button, this, "tooltip", null, true);
            /** @internal */
            this.__icon = new internal.PartProperty(Button, this, "icon", null, false);
            /** @internal */
            this.__renderType = new internal.EnumProperty(Button, this, "renderType", RenderType.Button, RenderType);
            /** @internal */
            this.__buttonStyle = new internal.EnumProperty(Button, this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
            if (arguments.length < 4) {
                throw new Error("new Button() cannot be invoked directly, please use 'model.pages.createButton()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        get tooltip() { return this.__tooltip.get(); }
        set tooltip(newValue) { this.__tooltip.set(newValue); }
        get icon() { return this.__icon.get(); }
        set icon(newValue) { this.__icon.set(newValue); }
        get renderType() { return this.__renderType.get(); }
        set renderType(newValue) { this.__renderType.set(newValue); }
        get buttonStyle() { return this.__buttonStyle.get(); }
        set buttonStyle(newValue) { this.__buttonStyle.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.buttonStyle = ButtonStyle.Default;
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.caption = ClientTemplate.create(this.model);
                    return;
                }
            })();
            this.renderType = RenderType.Button;
            this.tooltip = texts_1.texts.Text.create(this.model);
        }
    }
    Button.structureTypeName = "Pages$Button";
    Button.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            },
            "tooltip": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.Button = Button;
    /**
     * See: {@link https://docs.mendix.com/refguide7/action-button relevant section in reference guide}
     */
    class ActionButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__action = new internal.PartProperty(ActionButton, this, "action", null, true);
            /** @internal */
            this.__disabledDuringAction = new internal.PrimitiveProperty(ActionButton, this, "disabledDuringAction", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ActionButton() cannot be invoked directly, please use 'model.pages.createActionButton()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get action() { return this.__action.get(); }
        set action(newValue) { this.__action.set(newValue); }
        get disabledDuringAction() { return this.__disabledDuringAction.get(); }
        set disabledDuringAction(newValue) { this.__disabledDuringAction.set(newValue); }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, ActionButton.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, ActionButton.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ActionButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ActionButton.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widgets", true);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, ActionButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ActionButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, ActionButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ActionButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ActionButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.action = NoClientAction.create(this.model);
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Action";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Actie";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    ActionButton.structureTypeName = "Pages$ActionButton";
    ActionButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ActionButton = ActionButton;
    class ActionItem extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__action = new internal.PartProperty(ActionItem, this, "action", null, true);
            if (arguments.length < 4) {
                throw new Error("new ActionItem() cannot be invoked directly, please use 'model.pages.createActionItem()'");
            }
        }
        get containerAsDropDownButton() { return super.getContainerAs(DropDownButton); }
        get containerAsNavigationList() { return super.getContainerAs(NavigationList); }
        get action() { return this.__action.get(); }
        set action(newValue) { this.__action.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.action = NoClientAction.create(this.model);
        }
    }
    ActionItem.structureTypeName = "Pages$ActionItem";
    ActionItem.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ActionItem = ActionItem;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-sources relevant section in reference guide}
     */
    class DataSource extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new DataSource() cannot be invoked directly, please use 'model.pages.createDataSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DataSource.structureTypeName = "Pages$DataSource";
    DataSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataSource = DataSource;
    class EntityPathSource extends DataSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__entityPath = new internal.PrimitiveProperty(EntityPathSource, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__entityRef = new internal.PartProperty(EntityPathSource, this, "entityRef", null, false);
            if (arguments.length < 4) {
                throw new Error("new EntityPathSource() cannot be invoked directly, please use 'model.pages.createEntityPathSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         */
        get entityPath() { return this.__entityPath.get(); }
        set entityPath(newValue) { this.__entityPath.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get entityRef() { return this.__entityRef.get(); }
        set entityRef(newValue) { this.__entityRef.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    EntityPathSource.structureTypeName = "Pages$EntityPathSource";
    EntityPathSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "entityPath": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'entityRef' instead"
            },
            "entityRef": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.EntityPathSource = EntityPathSource;
    class AssociationSource extends EntityPathSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new AssociationSource() cannot be invoked directly, please use 'model.pages.createAssociationSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * The new AssociationSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, AssociationSource, "dataSource", false);
        }
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, AssociationSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    AssociationSource.structureTypeName = "Pages$AssociationSource";
    AssociationSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.AssociationSource = AssociationSource;
    class ConditionallyEditableWidget extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__conditionalEditabilitySettings = new internal.PartProperty(ConditionallyEditableWidget, this, "conditionalEditabilitySettings", null, false);
            /** @internal */
            this.__editable = new internal.EnumProperty(ConditionallyEditableWidget, this, "editable", EditableEnum.Always, EditableEnum);
            if (arguments.length < 4) {
                throw new Error("new ConditionallyEditableWidget() cannot be invoked directly, please use 'model.pages.createConditionallyEditableWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get conditionalEditabilitySettings() { return this.__conditionalEditabilitySettings.get(); }
        set conditionalEditabilitySettings(newValue) { this.__conditionalEditabilitySettings.set(newValue); }
        get editable() { return this.__editable.get(); }
        set editable(newValue) { this.__editable.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.editable = EditableEnum.Always;
        }
    }
    ConditionallyEditableWidget.structureTypeName = "Pages$ConditionallyEditableWidget";
    ConditionallyEditableWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionallyEditableWidget = ConditionallyEditableWidget;
    class InputWidget extends ConditionallyEditableWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__label = new internal.PartProperty(InputWidget, this, "label", null, false);
            if (arguments.length < 4) {
                throw new Error("new InputWidget() cannot be invoked directly, please use 'model.pages.createInputWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get label() { return this.__label.get(); }
        set label(newValue) { this.__label.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    InputWidget.structureTypeName = "Pages$InputWidget";
    InputWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.InputWidget = InputWidget;
    class MemberWidget extends InputWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__attributePath = new internal.PrimitiveProperty(MemberWidget, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__attributeRef = new internal.PartProperty(MemberWidget, this, "attributeRef", null, false);
            /** @internal */
            this.__readOnlyStyle = new internal.EnumProperty(MemberWidget, this, "readOnlyStyle", ReadOnlyStyle.Inherit, ReadOnlyStyle);
            if (arguments.length < 4) {
                throw new Error("new MemberWidget() cannot be invoked directly, please use 'model.pages.createMemberWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath() { return this.__attributePath.get(); }
        set attributePath(newValue) { this.__attributePath.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef() { return this.__attributeRef.get(); }
        set attributeRef(newValue) { this.__attributeRef.set(newValue); }
        /**
         * In version 6.9.0: introduced
         */
        get readOnlyStyle() { return this.__readOnlyStyle.get(); }
        set readOnlyStyle(newValue) { this.__readOnlyStyle.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__readOnlyStyle.isAvailable) {
                this.readOnlyStyle = ReadOnlyStyle.Inherit;
            }
        }
    }
    MemberWidget.structureTypeName = "Pages$MemberWidget";
    MemberWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "attributePath": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'attributeRef' instead"
            },
            "attributeRef": {
                "introduced": "7.11.0"
            },
            "readOnlyStyle": {
                "introduced": "6.9.0"
            }
        }
    }, internal.StructureType.Element);
    pages.MemberWidget = MemberWidget;
    class AssociationWidget extends MemberWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__selectorSource = new internal.PartProperty(AssociationWidget, this, "selectorSource", null, true);
            /** @internal */
            this.__selectPageSettings = new internal.PartProperty(AssociationWidget, this, "selectPageSettings", null, true);
            /** @internal */
            this.__onChangeMicroflowSettings = new internal.PartProperty(AssociationWidget, this, "onChangeMicroflowSettings", null, true);
            /** @internal */
            this.__onChangeAction = new internal.PartProperty(AssociationWidget, this, "onChangeAction", null, true);
            if (arguments.length < 4) {
                throw new Error("new AssociationWidget() cannot be invoked directly, please use 'model.pages.createAssociationWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get selectorSource() { return this.__selectorSource.get(); }
        set selectorSource(newValue) { this.__selectorSource.set(newValue); }
        get selectPageSettings() { return this.__selectPageSettings.get(); }
        set selectPageSettings(newValue) { this.__selectPageSettings.set(newValue); }
        /**
         * In version 7.13.0: deleted
         */
        get onChangeMicroflowSettings() { return this.__onChangeMicroflowSettings.get(); }
        set onChangeMicroflowSettings(newValue) { this.__onChangeMicroflowSettings.set(newValue); }
        /**
         * In version 7.13.0: introduced
         */
        get onChangeAction() { return this.__onChangeAction.get(); }
        set onChangeAction(newValue) { this.__onChangeAction.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__onChangeAction.isAvailable) {
                this.onChangeAction = NoClientAction.create(this.model);
            }
            if (this.__onChangeMicroflowSettings.isAvailable) {
                this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
            }
            this.selectPageSettings = PageSettings.create(this.model);
            this.selectorSource = SelectorXPathSource.create(this.model);
        }
    }
    AssociationWidget.structureTypeName = "Pages$AssociationWidget";
    AssociationWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "selectorSource": {
                "required": {
                    "currentValue": true
                }
            },
            "selectPageSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "onChangeMicroflowSettings": {
                "deleted": "7.13.0",
                "deletionMessage": "Use property 'onChangeAction' instead",
                "required": {
                    "currentValue": true
                }
            },
            "onChangeAction": {
                "introduced": "7.13.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.AssociationWidget = AssociationWidget;
    class AttributeWidget extends MemberWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__required = new internal.PrimitiveProperty(AttributeWidget, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__requiredMessage = new internal.PartProperty(AttributeWidget, this, "requiredMessage", null, true);
            /** @internal */
            this.__validation = new internal.PartProperty(AttributeWidget, this, "validation", null, true);
            /** @internal */
            this.__onChangeMicroflowSettings = new internal.PartProperty(AttributeWidget, this, "onChangeMicroflowSettings", null, true);
            /** @internal */
            this.__onEnterMicroflowSettings = new internal.PartProperty(AttributeWidget, this, "onEnterMicroflowSettings", null, true);
            /** @internal */
            this.__onLeaveMicroflowSettings = new internal.PartProperty(AttributeWidget, this, "onLeaveMicroflowSettings", null, true);
            /** @internal */
            this.__onChangeAction = new internal.PartProperty(AttributeWidget, this, "onChangeAction", null, true);
            /** @internal */
            this.__onEnterAction = new internal.PartProperty(AttributeWidget, this, "onEnterAction", null, true);
            /** @internal */
            this.__onLeaveAction = new internal.PartProperty(AttributeWidget, this, "onLeaveAction", null, true);
            if (arguments.length < 4) {
                throw new Error("new AttributeWidget() cannot be invoked directly, please use 'model.pages.createAttributeWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 7.6.0: deleted
         */
        get required() { return this.__required.get(); }
        set required(newValue) { this.__required.set(newValue); }
        /**
         * In version 7.6.0: deleted
         */
        get requiredMessage() { return this.__requiredMessage.get(); }
        set requiredMessage(newValue) { this.__requiredMessage.set(newValue); }
        /**
         * In version 7.6.0: introduced
         */
        get validation() { return this.__validation.get(); }
        set validation(newValue) { this.__validation.set(newValue); }
        /**
         * In version 7.13.0: deleted
         */
        get onChangeMicroflowSettings() { return this.__onChangeMicroflowSettings.get(); }
        set onChangeMicroflowSettings(newValue) { this.__onChangeMicroflowSettings.set(newValue); }
        /**
         * In version 7.13.0: deleted
         */
        get onEnterMicroflowSettings() { return this.__onEnterMicroflowSettings.get(); }
        set onEnterMicroflowSettings(newValue) { this.__onEnterMicroflowSettings.set(newValue); }
        /**
         * In version 7.13.0: deleted
         */
        get onLeaveMicroflowSettings() { return this.__onLeaveMicroflowSettings.get(); }
        set onLeaveMicroflowSettings(newValue) { this.__onLeaveMicroflowSettings.set(newValue); }
        /**
         * In version 7.13.0: introduced
         */
        get onChangeAction() { return this.__onChangeAction.get(); }
        set onChangeAction(newValue) { this.__onChangeAction.set(newValue); }
        /**
         * In version 7.13.0: introduced
         */
        get onEnterAction() { return this.__onEnterAction.get(); }
        set onEnterAction(newValue) { this.__onEnterAction.set(newValue); }
        /**
         * In version 7.13.0: introduced
         */
        get onLeaveAction() { return this.__onLeaveAction.get(); }
        set onLeaveAction(newValue) { this.__onLeaveAction.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__onChangeAction.isAvailable) {
                this.onChangeAction = NoClientAction.create(this.model);
            }
            if (this.__onChangeMicroflowSettings.isAvailable) {
                this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
            }
            if (this.__onEnterAction.isAvailable) {
                this.onEnterAction = NoClientAction.create(this.model);
            }
            if (this.__onEnterMicroflowSettings.isAvailable) {
                this.onEnterMicroflowSettings = MicroflowSettings.create(this.model);
            }
            if (this.__onLeaveAction.isAvailable) {
                this.onLeaveAction = NoClientAction.create(this.model);
            }
            if (this.__onLeaveMicroflowSettings.isAvailable) {
                this.onLeaveMicroflowSettings = MicroflowSettings.create(this.model);
            }
            if (this.__requiredMessage.isAvailable) {
                this.requiredMessage = texts_1.texts.Text.create(this.model);
            }
            if (this.__validation.isAvailable) {
                this.validation = WidgetValidation.create(this.model);
            }
        }
    }
    AttributeWidget.structureTypeName = "Pages$AttributeWidget";
    AttributeWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "required": {
                "deleted": "7.6.0",
                "deletionMessage": "Use validation property instead"
            },
            "requiredMessage": {
                "deleted": "7.6.0",
                "deletionMessage": "Use validation property instead",
                "required": {
                    "currentValue": true
                }
            },
            "validation": {
                "introduced": "7.6.0",
                "required": {
                    "currentValue": true
                }
            },
            "onChangeMicroflowSettings": {
                "deleted": "7.13.0",
                "deletionMessage": "Use property 'onChangeAction' instead",
                "required": {
                    "currentValue": true
                }
            },
            "onEnterMicroflowSettings": {
                "deleted": "7.13.0",
                "deletionMessage": "Use property 'onEnterAction' instead",
                "required": {
                    "currentValue": true
                }
            },
            "onLeaveMicroflowSettings": {
                "deleted": "7.13.0",
                "deletionMessage": "Use property 'onLeaveAction' instead",
                "required": {
                    "currentValue": true
                }
            },
            "onChangeAction": {
                "introduced": "7.13.0",
                "required": {
                    "currentValue": true
                }
            },
            "onEnterAction": {
                "introduced": "7.13.0",
                "required": {
                    "currentValue": true
                }
            },
            "onLeaveAction": {
                "introduced": "7.13.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.AttributeWidget = AttributeWidget;
    class AttributeWidgetWithPlaceholder extends AttributeWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__placeholder = new internal.PartProperty(AttributeWidgetWithPlaceholder, this, "placeholder", null, true);
            if (arguments.length < 4) {
                throw new Error("new AttributeWidgetWithPlaceholder() cannot be invoked directly, please use 'model.pages.createAttributeWidgetWithPlaceholder()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get placeholder() { return this.__placeholder.get(); }
        set placeholder(newValue) { this.__placeholder.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.placeholder = texts_1.texts.Text.create(this.model);
        }
    }
    AttributeWidgetWithPlaceholder.structureTypeName = "Pages$AttributeWidgetWithPlaceholder";
    AttributeWidgetWithPlaceholder.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "placeholder": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.AttributeWidgetWithPlaceholder = AttributeWidgetWithPlaceholder;
    /**
     * See: {@link https://docs.mendix.com/refguide7/close-page-button relevant section in reference guide}
     *
     * In version 7.0.2: deleted
     */
    class BackButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new BackButton() cannot be invoked directly, please use 'model.pages.createBackButton()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { start: "6.7.0", end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, BackButton, "widgets", true);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, BackButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, BackButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, BackButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, BackButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Back";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Terug";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        }
    }
    BackButton.structureTypeName = "Pages$BackButton";
    BackButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "7.0.2",
        "deletionMessage": "Use an ActionButton with ClosePageClientAction instead"
    }, internal.StructureType.Element);
    pages.BackButton = BackButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     */
    class FormBase extends projects_1.projects.Document {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__canvasWidth = new internal.PrimitiveProperty(FormBase, this, "canvasWidth", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__canvasHeight = new internal.PrimitiveProperty(FormBase, this, "canvasHeight", 0, internal.PrimitiveTypeEnum.Integer);
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get canvasWidth() { return this.__canvasWidth.get(); }
        set canvasWidth(newValue) { this.__canvasWidth.set(newValue); }
        get canvasHeight() { return this.__canvasHeight.get(); }
        set canvasHeight(newValue) { this.__canvasHeight.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.canvasHeight = 600;
            this.canvasWidth = 800;
        }
    }
    FormBase.structureTypeName = "Pages$FormBase";
    FormBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
    pages.FormBase = FormBase;
    /**
     * In version 7.7.0: introduced
     */
    class TemplateFormBase extends FormBase {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__displayName = new internal.PrimitiveProperty(TemplateFormBase, this, "displayName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__imageData = new internal.PrimitiveProperty(TemplateFormBase, this, "imageData", null, internal.PrimitiveTypeEnum.Blob);
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get displayName() { return this.__displayName.get(); }
        set displayName(newValue) { this.__displayName.set(newValue); }
        get imageData() { return this.__imageData.get(); }
        set imageData(newValue) { this.__imageData.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    TemplateFormBase.structureTypeName = "Pages$TemplateFormBase";
    TemplateFormBase.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0"
    }, internal.StructureType.ModelUnit);
    pages.TemplateFormBase = TemplateFormBase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/building-block relevant section in reference guide}
     *
     * In version 7.7.0: introduced
     */
    class BuildingBlock extends TemplateFormBase {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__widget = new internal.PartProperty(BuildingBlock, this, "widget", null, false);
            this._containmentName = "documents";
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates a new BuildingBlock unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container) {
            return internal.instancehelpers.createUnit(container, BuildingBlock);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    BuildingBlock.structureTypeName = "Pages$BuildingBlock";
    BuildingBlock.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0"
    }, internal.StructureType.ModelUnit);
    pages.BuildingBlock = BuildingBlock;
    class ClientAction extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ClientAction() cannot be invoked directly, please use 'model.pages.createClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsDataViewActionButton() { return super.getContainerAs(DataViewActionButton); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ClientAction.structureTypeName = "Pages$ClientAction";
    ClientAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ClientAction = ClientAction;
    /**
     * In version 7.12.0: removed experimental
     * In version 7.8.0: introduced
     */
    class CallNanoflowClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__nanoflow = new internal.ByNameReferenceProperty(CallNanoflowClientAction, this, "nanoflow", null, "Microflows$Nanoflow");
            /** @internal */
            this.__progressBar = new internal.EnumProperty(CallNanoflowClientAction, this, "progressBar", ProgressBarType.None, ProgressBarType);
            /** @internal */
            this.__progressMessage = new internal.PartProperty(CallNanoflowClientAction, this, "progressMessage", null, false);
            /** @internal */
            this.__confirmationInfo = new internal.PartProperty(CallNanoflowClientAction, this, "confirmationInfo", null, false);
            if (arguments.length < 4) {
                throw new Error("new CallNanoflowClientAction() cannot be invoked directly, please use 'model.pages.createCallNanoflowClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        /**
         * In version 7.10.0: introduced
         */
        get nanoflow() { return this.__nanoflow.get(); }
        set nanoflow(newValue) { this.__nanoflow.set(newValue); }
        get nanoflowQualifiedName() { return this.__nanoflow.qualifiedName(); }
        get progressBar() { return this.__progressBar.get(); }
        set progressBar(newValue) { this.__progressBar.set(newValue); }
        get progressMessage() { return this.__progressMessage.get(); }
        set progressMessage(newValue) { this.__progressMessage.set(newValue); }
        get confirmationInfo() { return this.__confirmationInfo.get(); }
        set confirmationInfo(newValue) { this.__confirmationInfo.set(newValue); }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInMenuItemUnderAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInActionItemUnderAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInGridActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInListViewUnderClickAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, CallNanoflowClientAction.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, CallNanoflowClientAction, "value", false);
        }
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, CallNanoflowClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.progressBar = ProgressBarType.None;
        }
    }
    CallNanoflowClientAction.structureTypeName = "Pages$CallNanoflowClientAction";
    CallNanoflowClientAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.8.0",
        "properties": {
            "nanoflow": {
                "introduced": "7.10.0"
            }
        },
        "experimental": {
            "currentValue": false,
            "changedIn": [
                "7.12.0"
            ]
        }
    }, internal.StructureType.Element);
    pages.CallNanoflowClientAction = CallNanoflowClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/cancel-button relevant section in reference guide}
     *
     * In version 7.0.2: deleted
     */
    class CancelButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__closePage = new internal.PrimitiveProperty(CancelButton, this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new CancelButton() cannot be invoked directly, please use 'model.pages.createCancelButton()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 6.7.0: introduced
         */
        get closePage() { return this.__closePage.get(); }
        set closePage(newValue) { this.__closePage.set(newValue); }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { start: "6.7.0", end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, CancelButton, "widgets", true);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, CancelButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, CancelButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, CancelButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, CancelButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Cancel";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Annuleren";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            if (this.__closePage.isAvailable) {
                this.closePage = true;
            }
        }
    }
    CancelButton.structureTypeName = "Pages$CancelButton";
    CancelButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "7.0.2",
        "deletionMessage": "Use an ActionButton with CancelChangesClientAction instead",
        "properties": {
            "closePage": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.Element);
    pages.CancelButton = CancelButton;
    /**
     * In version 7.0.2: introduced
     */
    class CancelChangesClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__closePage = new internal.PrimitiveProperty(CancelChangesClientAction, this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new CancelChangesClientAction() cannot be invoked directly, please use 'model.pages.createCancelChangesClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        get closePage() { return this.__closePage.get(); }
        set closePage(newValue) { this.__closePage.set(newValue); }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, CancelChangesClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, CancelChangesClientAction, "value", false);
        }
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, CancelChangesClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.closePage = true;
        }
    }
    CancelChangesClientAction.structureTypeName = "Pages$CancelChangesClientAction";
    CancelChangesClientAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.CancelChangesClientAction = CancelChangesClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/check-box relevant section in reference guide}
     */
    class CheckBox extends AttributeWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new CheckBox() cannot be invoked directly, please use 'model.pages.createCheckBox()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, CheckBox.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, CheckBox.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, CheckBox, "footerWidget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "leftWidget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "rightWidget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, CheckBox.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "firstWidget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "secondWidget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widgets", true);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, CheckBox.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, CheckBox, "parameterWidget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, CheckBox.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, CheckBox, "reportWidget", false);
        }
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, CheckBox);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    CheckBox.structureTypeName = "Pages$CheckBox";
    CheckBox.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.CheckBox = CheckBox;
    class ClientTemplate extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__template = new internal.PartProperty(ClientTemplate, this, "template", null, true);
            /** @internal */
            this.__parameters = new internal.PartListProperty(ClientTemplate, this, "parameters", []);
            if (arguments.length < 4) {
                throw new Error("new ClientTemplate() cannot be invoked directly, please use 'model.pages.createClientTemplate()'");
            }
        }
        get containerAsButton() { return super.getContainerAs(Button); }
        get containerAsControlBarButton() { return super.getContainerAs(ControlBarButton); }
        get containerAsDynamicText() { return super.getContainerAs(DynamicText); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsDynamicTextValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.DynamicTextValue); }
        get template() { return this.__template.get(); }
        set template(newValue) { this.__template.set(newValue); }
        get parameters() { return this.__parameters.get(); }
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderCaption(container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
        }
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderCaption(container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
        }
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'content' property
         * of the parent DynamicText element passed as argument.
         */
        static createInDynamicTextUnderContent(container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "content", false);
        }
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderCaption(container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
        }
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'value' property
         * of the parent pluginwidgets.DynamicTextValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInDynamicTextValueUnderValue(container) {
            internal.createInVersionCheck(container.model, ClientTemplate.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ClientTemplate, "value", false);
        }
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ClientTemplate);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.template = texts_1.texts.Text.create(this.model);
        }
    }
    ClientTemplate.structureTypeName = "Pages$ClientTemplate";
    ClientTemplate.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "template": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ClientTemplate = ClientTemplate;
    class ClientTemplateParameter extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__attributePath = new internal.PrimitiveProperty(ClientTemplateParameter, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__attributeRef = new internal.PartProperty(ClientTemplateParameter, this, "attributeRef", null, false);
            if (arguments.length < 4) {
                throw new Error("new ClientTemplateParameter() cannot be invoked directly, please use 'model.pages.createClientTemplateParameter()'");
            }
        }
        get containerAsClientTemplate() { return super.getContainerAs(ClientTemplate); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath() { return this.__attributePath.get(); }
        set attributePath(newValue) { this.__attributePath.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef() { return this.__attributeRef.get(); }
        set attributeRef(newValue) { this.__attributeRef.set(newValue); }
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * The new ClientTemplateParameter will be automatically stored in the 'parameters' property
         * of the parent ClientTemplate element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ClientTemplateParameter, "parameters", true);
        }
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ClientTemplateParameter);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ClientTemplateParameter.structureTypeName = "Pages$ClientTemplateParameter";
    ClientTemplateParameter.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "attributePath": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'attributeRef' instead"
            },
            "attributeRef": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.ClientTemplateParameter = ClientTemplateParameter;
    /**
     * In version 7.0.2: introduced
     */
    class ClosePageClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ClosePageClientAction() cannot be invoked directly, please use 'model.pages.createClosePageClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "action", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "action", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "action", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "action", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, ClosePageClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, ClosePageClientAction, "value", false);
        }
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ClosePageClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ClosePageClientAction.structureTypeName = "Pages$ClosePageClientAction";
    ClosePageClientAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.ClosePageClientAction = ClosePageClientAction;
    class EntityWidget extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__dataSource = new internal.PartProperty(EntityWidget, this, "dataSource", null, false);
            if (arguments.length < 4) {
                throw new Error("new EntityWidget() cannot be invoked directly, please use 'model.pages.createEntityWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get dataSource() { return this.__dataSource.get(); }
        set dataSource(newValue) { this.__dataSource.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    EntityWidget.structureTypeName = "Pages$EntityWidget";
    EntityWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "dataSource": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.EntityWidget = EntityWidget;
    class ListenTargetWidget extends EntityWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ListenTargetWidget() cannot be invoked directly, please use 'model.pages.createListenTargetWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ListenTargetWidget.structureTypeName = "Pages$ListenTargetWidget";
    ListenTargetWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ListenTargetWidget = ListenTargetWidget;
    class Grid extends ListenTargetWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__isControlBarVisible = new internal.PrimitiveProperty(Grid, this, "isControlBarVisible", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__isPagingEnabled = new internal.PrimitiveProperty(Grid, this, "isPagingEnabled", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__selectionMode = new internal.EnumProperty(Grid, this, "selectionMode", GridSelectionMode.Single, GridSelectionMode);
            /** @internal */
            this.__selectFirst = new internal.PrimitiveProperty(Grid, this, "selectFirst", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__defaultButtonTrigger = new internal.EnumProperty(Grid, this, "defaultButtonTrigger", ClickTypeType.Double, ClickTypeType);
            /** @internal */
            this.__refreshTime = new internal.PrimitiveProperty(Grid, this, "refreshTime", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__controlBar = new internal.PartProperty(Grid, this, "controlBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new Grid() cannot be invoked directly, please use 'model.pages.createGrid()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get isControlBarVisible() { return this.__isControlBarVisible.get(); }
        set isControlBarVisible(newValue) { this.__isControlBarVisible.set(newValue); }
        get isPagingEnabled() { return this.__isPagingEnabled.get(); }
        set isPagingEnabled(newValue) { this.__isPagingEnabled.set(newValue); }
        get selectionMode() { return this.__selectionMode.get(); }
        set selectionMode(newValue) { this.__selectionMode.set(newValue); }
        get selectFirst() { return this.__selectFirst.get(); }
        set selectFirst(newValue) { this.__selectFirst.set(newValue); }
        get defaultButtonTrigger() { return this.__defaultButtonTrigger.get(); }
        set defaultButtonTrigger(newValue) { this.__defaultButtonTrigger.set(newValue); }
        get refreshTime() { return this.__refreshTime.get(); }
        set refreshTime(newValue) { this.__refreshTime.set(newValue); }
        get controlBar() { return this.__controlBar.get(); }
        set controlBar(newValue) { this.__controlBar.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.controlBar = GridControlBar.create(this.model);
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.dataSource = GridDatabaseSource.create(this.model);
                    return;
                }
                this.dataSource = GridXPathSource.create(this.model);
            })();
            this.defaultButtonTrigger = ClickTypeType.Double;
            this.isControlBarVisible = true;
            this.isPagingEnabled = true;
            this.selectionMode = GridSelectionMode.Single;
        }
    }
    Grid.structureTypeName = "Pages$Grid";
    Grid.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "controlBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.Grid = Grid;
    class ColumnGrid extends Grid {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__columns = new internal.PartListProperty(ColumnGrid, this, "columns", []);
            /** @internal */
            this.__numberOfRows = new internal.PrimitiveProperty(ColumnGrid, this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__showEmptyRows = new internal.PrimitiveProperty(ColumnGrid, this, "showEmptyRows", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__widthUnit = new internal.EnumProperty(ColumnGrid, this, "widthUnit", UnitEnum.Weight, UnitEnum);
            /** @internal */
            this.__tooltipPage = new internal.ByNameReferenceProperty(ColumnGrid, this, "tooltipPage", null, "Pages$Page");
            if (arguments.length < 4) {
                throw new Error("new ColumnGrid() cannot be invoked directly, please use 'model.pages.createColumnGrid()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get columns() { return this.__columns.get(); }
        get numberOfRows() { return this.__numberOfRows.get(); }
        set numberOfRows(newValue) { this.__numberOfRows.set(newValue); }
        get showEmptyRows() { return this.__showEmptyRows.get(); }
        set showEmptyRows(newValue) { this.__showEmptyRows.set(newValue); }
        get widthUnit() { return this.__widthUnit.get(); }
        set widthUnit(newValue) { this.__widthUnit.set(newValue); }
        get tooltipPage() { return this.__tooltipPage.get(); }
        set tooltipPage(newValue) { this.__tooltipPage.set(newValue); }
        get tooltipPageQualifiedName() { return this.__tooltipPage.qualifiedName(); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.columns.replace([((gridColumn) => {
                    gridColumn.width = 1;
                    return gridColumn;
                })(GridColumn.create(this.model))]);
            this.numberOfRows = 20;
            this.widthUnit = UnitEnum.Weight;
        }
    }
    ColumnGrid.structureTypeName = "Pages$ColumnGrid";
    ColumnGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ColumnGrid = ColumnGrid;
    class ControlBarItem extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__name = new internal.PrimitiveProperty(ControlBarItem, this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ControlBarItem() cannot be invoked directly, please use 'model.pages.createControlBarItem()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get containerAsGridControlBar() { return super.getContainerAs(GridControlBar); }
        get name() { return this.__name.get(); }
        set name(newValue) { this.__name.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ControlBarItem.structureTypeName = "Pages$ControlBarItem";
    ControlBarItem.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ControlBarItem = ControlBarItem;
    class SearchField extends ControlBarItem {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__caption = new internal.PartProperty(SearchField, this, "caption", null, true);
            /** @internal */
            this.__type = new internal.EnumProperty(SearchField, this, "type", SearchFieldType.Normal, SearchFieldType);
            /** @internal */
            this.__defaultValue = new internal.PrimitiveProperty(SearchField, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new SearchField() cannot be invoked directly, please use 'model.pages.createSearchField()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        get type() { return this.__type.get(); }
        set type(newValue) { this.__type.set(newValue); }
        get defaultValue() { return this.__defaultValue.get(); }
        set defaultValue(newValue) { this.__defaultValue.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((text) => {
                text.translations.replace([((translation) => {
                        translation.languageCode = "en_US";
                        translation.text = "Caption";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.type = SearchFieldType.Normal;
        }
    }
    SearchField.structureTypeName = "Pages$SearchField";
    SearchField.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SearchField = SearchField;
    class SingleSearchField extends SearchField {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__attributePath = new internal.PrimitiveProperty(SingleSearchField, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__attributeRef = new internal.PartProperty(SingleSearchField, this, "attributeRef", null, false);
            /** @internal */
            this.__operator = new internal.EnumProperty(SingleSearchField, this, "operator", SearchFieldOperator.Contains, SearchFieldOperator);
            if (arguments.length < 4) {
                throw new Error("new SingleSearchField() cannot be invoked directly, please use 'model.pages.createSingleSearchField()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath() { return this.__attributePath.get(); }
        set attributePath(newValue) { this.__attributePath.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef() { return this.__attributeRef.get(); }
        set attributeRef(newValue) { this.__attributeRef.set(newValue); }
        get operator() { return this.__operator.get(); }
        set operator(newValue) { this.__operator.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    SingleSearchField.structureTypeName = "Pages$SingleSearchField";
    SingleSearchField.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "attributePath": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'attributeRef' instead"
            },
            "attributeRef": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.SingleSearchField = SingleSearchField;
    /**
     * See: {@link https://docs.mendix.com/refguide7/comparison-search-field relevant section in reference guide}
     */
    class ComparisonSearchField extends SingleSearchField {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ComparisonSearchField() cannot be invoked directly, please use 'model.pages.createComparisonSearchField()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * The new ComparisonSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ComparisonSearchField, "items", true);
        }
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ComparisonSearchField);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.operator = SearchFieldOperator.Contains;
        }
    }
    ComparisonSearchField.structureTypeName = "Pages$ComparisonSearchField";
    ComparisonSearchField.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ComparisonSearchField = ComparisonSearchField;
    class ConditionalSettings extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__attribute = new internal.ByNameReferenceProperty(ConditionalSettings, this, "attribute", null, "DomainModels$Attribute");
            /** @internal */
            this.__conditions = new internal.PartListProperty(ConditionalSettings, this, "conditions", []);
            /** @internal */
            this.__expression = new internal.PrimitiveProperty(ConditionalSettings, this, "expression", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__expressionModel = new internal.PartProperty(ConditionalSettings, this, "expressionModel", null, true);
            if (arguments.length < 4) {
                throw new Error("new ConditionalSettings() cannot be invoked directly, please use 'model.pages.createConditionalSettings()'");
            }
        }
        get containerAsConditionallyEditableWidget() { return super.getContainerAs(ConditionallyEditableWidget); }
        get containerAsConditionallyVisibleWidget() { return super.getContainerAs(ConditionallyVisibleWidget); }
        get containerAsControlBarButton() { return super.getContainerAs(ControlBarButton); }
        get containerAsLayoutGridRow() { return super.getContainerAs(LayoutGridRow); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableRow() { return super.getContainerAs(TableRow); }
        get attribute() { return this.__attribute.get(); }
        set attribute(newValue) { this.__attribute.set(newValue); }
        get attributeQualifiedName() { return this.__attribute.qualifiedName(); }
        get conditions() { return this.__conditions.get(); }
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 7.0.1: introduced
         */
        get expression() { return this.__expression.get(); }
        set expression(newValue) { this.__expression.set(newValue); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.9.0: introduced
         */
        get expressionModel() { return this.__expressionModel.get(); }
        set expressionModel(newValue) { this.__expressionModel.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__expressionModel.isAvailable) {
                this.expressionModel = expressions_1.expressions.NoExpression.create(this.model);
            }
        }
    }
    ConditionalSettings.structureTypeName = "Pages$ConditionalSettings";
    ConditionalSettings.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "expression": {
                "introduced": "7.0.1"
            },
            "expressionModel": {
                "introduced": "7.9.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ConditionalSettings = ConditionalSettings;
    class ConditionalEditabilitySettings extends ConditionalSettings {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ConditionalEditabilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalEditabilitySettings()'");
            }
        }
        get containerAsConditionallyEditableWidget() { return super.getContainerAs(ConditionallyEditableWidget); }
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
         * of the parent ConditionallyEditableWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ConditionalEditabilitySettings, "conditionalEditabilitySettings", false);
        }
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ConditionalEditabilitySettings);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ConditionalEditabilitySettings.structureTypeName = "Pages$ConditionalEditabilitySettings";
    ConditionalEditabilitySettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionalEditabilitySettings = ConditionalEditabilitySettings;
    class ConditionalVisibilitySettings extends ConditionalSettings {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__moduleRoles = new internal.ByNameReferenceListProperty(ConditionalVisibilitySettings, this, "moduleRoles", [], "Security$ModuleRole");
            /** @internal */
            this.__ignoreSecurity = new internal.PrimitiveProperty(ConditionalVisibilitySettings, this, "ignoreSecurity", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ConditionalVisibilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalVisibilitySettings()'");
            }
        }
        get containerAsConditionallyVisibleWidget() { return super.getContainerAs(ConditionallyVisibleWidget); }
        get containerAsControlBarButton() { return super.getContainerAs(ControlBarButton); }
        get containerAsLayoutGridRow() { return super.getContainerAs(LayoutGridRow); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableRow() { return super.getContainerAs(TableRow); }
        get moduleRoles() { return this.__moduleRoles.get(); }
        get moduleRolesQualifiedNames() { return this.__moduleRoles.qualifiedNames(); }
        get ignoreSecurity() { return this.__ignoreSecurity.get(); }
        set ignoreSecurity(newValue) { this.__ignoreSecurity.set(newValue); }
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ConditionallyVisibleWidget element passed as argument.
         */
        static createInConditionallyVisibleWidgetUnderConditionalVisibilitySettings(container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        }
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderConditionalVisibilitySettings(container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        }
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent LayoutGridRow element passed as argument.
         */
        static createInLayoutGridRowUnderConditionalVisibilitySettings(container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        }
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderConditionalVisibilitySettings(container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        }
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderConditionalVisibilitySettings(container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        }
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TableRow element passed as argument.
         */
        static createInTableRowUnderConditionalVisibilitySettings(container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        }
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ConditionalVisibilitySettings);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ConditionalVisibilitySettings.structureTypeName = "Pages$ConditionalVisibilitySettings";
    ConditionalVisibilitySettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionalVisibilitySettings = ConditionalVisibilitySettings;
    class ConfirmationInfo extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__question = new internal.PartProperty(ConfirmationInfo, this, "question", null, true);
            /** @internal */
            this.__proceedButtonCaption = new internal.PartProperty(ConfirmationInfo, this, "proceedButtonCaption", null, true);
            /** @internal */
            this.__cancelButtonCaption = new internal.PartProperty(ConfirmationInfo, this, "cancelButtonCaption", null, true);
            if (arguments.length < 4) {
                throw new Error("new ConfirmationInfo() cannot be invoked directly, please use 'model.pages.createConfirmationInfo()'");
            }
        }
        get containerAsCallNanoflowClientAction() { return super.getContainerAs(CallNanoflowClientAction); }
        get containerAsMicroflowSettings() { return super.getContainerAs(MicroflowSettings); }
        get question() { return this.__question.get(); }
        set question(newValue) { this.__question.set(newValue); }
        get proceedButtonCaption() { return this.__proceedButtonCaption.get(); }
        set proceedButtonCaption(newValue) { this.__proceedButtonCaption.set(newValue); }
        get cancelButtonCaption() { return this.__cancelButtonCaption.get(); }
        set cancelButtonCaption(newValue) { this.__cancelButtonCaption.set(newValue); }
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent MicroflowSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.7.0
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, ConfirmationInfo.structureTypeName, { end: "7.7.0" });
            return internal.instancehelpers.createElement(container, ConfirmationInfo, "confirmationInfo", false);
        }
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent CallNanoflowClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInCallNanoflowClientActionUnderConfirmationInfo(container) {
            internal.createInVersionCheck(container.model, ConfirmationInfo.structureTypeName, { start: "7.8.0" });
            return internal.instancehelpers.createElement(container, ConfirmationInfo, "confirmationInfo", false);
        }
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent MicroflowSettings element passed as argument.
         */
        static createInMicroflowSettingsUnderConfirmationInfo(container) {
            return internal.instancehelpers.createElement(container, ConfirmationInfo, "confirmationInfo", false);
        }
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ConfirmationInfo);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.cancelButtonCaption = ((text) => {
                text.translations.replace([((translation) => {
                        translation.languageCode = "en_US";
                        translation.text = "Cancel";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                        translation.languageCode = "nl_NL";
                        translation.text = "Annuleren";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.proceedButtonCaption = ((text) => {
                text.translations.replace([((translation) => {
                        translation.languageCode = "en_US";
                        translation.text = "Proceed";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                        translation.languageCode = "nl_NL";
                        translation.text = "Doorgaan";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.question = ((text) => {
                text.translations.replace([((translation) => {
                        translation.languageCode = "en_US";
                        translation.text = "Are you sure?";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                        translation.languageCode = "nl_NL";
                        translation.text = "Weet u het zeker?";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        }
    }
    ConfirmationInfo.structureTypeName = "Pages$ConfirmationInfo";
    ConfirmationInfo.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "question": {
                "required": {
                    "currentValue": true
                }
            },
            "proceedButtonCaption": {
                "required": {
                    "currentValue": true
                }
            },
            "cancelButtonCaption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ConfirmationInfo = ConfirmationInfo;
    class ControlBar extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__items = new internal.PartListProperty(ControlBar, this, "items", []);
            if (arguments.length < 4) {
                throw new Error("new ControlBar() cannot be invoked directly, please use 'model.pages.createControlBar()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsGrid() { return super.getContainerAs(Grid); }
        get containerAsGridBaseSource() { return super.getContainerAs(GridBaseSource); }
        get containerAsGridDatabaseSource() { return super.getContainerAs(GridDatabaseSource); }
        get items() { return this.__items.get(); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ControlBar.structureTypeName = "Pages$ControlBar";
    ControlBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ControlBar = ControlBar;
    class ControlBarButton extends ControlBarItem {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__caption = new internal.PartProperty(ControlBarButton, this, "caption", null, true);
            /** @internal */
            this.__tooltip = new internal.PartProperty(ControlBarButton, this, "tooltip", null, true);
            /** @internal */
            this.__icon = new internal.PartProperty(ControlBarButton, this, "icon", null, false);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(ControlBarButton, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(ControlBarButton, this, "style", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__conditionalVisibilitySettings = new internal.PartProperty(ControlBarButton, this, "conditionalVisibilitySettings", null, false);
            /** @internal */
            this.__buttonStyle = new internal.EnumProperty(ControlBarButton, this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
            if (arguments.length < 4) {
                throw new Error("new ControlBarButton() cannot be invoked directly, please use 'model.pages.createControlBarButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get containerAsGridControlBar() { return super.getContainerAs(GridControlBar); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        get tooltip() { return this.__tooltip.get(); }
        set tooltip(newValue) { this.__tooltip.set(newValue); }
        get icon() { return this.__icon.get(); }
        set icon(newValue) { this.__icon.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        get conditionalVisibilitySettings() { return this.__conditionalVisibilitySettings.get(); }
        set conditionalVisibilitySettings(newValue) { this.__conditionalVisibilitySettings.set(newValue); }
        get buttonStyle() { return this.__buttonStyle.get(); }
        set buttonStyle(newValue) { this.__buttonStyle.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.buttonStyle = ButtonStyle.Default;
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.caption = ClientTemplate.create(this.model);
                    return;
                }
            })();
            this.tooltip = texts_1.texts.Text.create(this.model);
        }
    }
    ControlBarButton.structureTypeName = "Pages$ControlBarButton";
    ControlBarButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            },
            "tooltip": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ControlBarButton = ControlBarButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-grid relevant section in reference guide}
     */
    class DataGrid extends ColumnGrid {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new DataGrid() cannot be invoked directly, please use 'model.pages.createDataGrid()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DataGrid.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DataGrid.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DataGrid, "footerWidget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "leftWidget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "rightWidget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DataGrid.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "firstWidget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "secondWidget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widgets", true);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DataGrid.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DataGrid, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DataGrid.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DataGrid, "reportWidget", false);
        }
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataGrid);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DataGrid.structureTypeName = "Pages$DataGrid";
    DataGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGrid = DataGrid;
    class GridControlBarButton extends ControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new GridControlBarButton() cannot be invoked directly, please use 'model.pages.createGridControlBarButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get containerAsGridControlBar() { return super.getContainerAs(GridControlBar); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    GridControlBarButton.structureTypeName = "Pages$GridControlBarButton";
    GridControlBarButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridControlBarButton = GridControlBarButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/add-button relevant section in reference guide}
     */
    class DataGridAddButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__pageSettings = new internal.PartProperty(DataGridAddButton, this, "pageSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new DataGridAddButton() cannot be invoked directly, please use 'model.pages.createDataGridAddButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get pageSettings() { return this.__pageSettings.get(); }
        set pageSettings(newValue) { this.__pageSettings.set(newValue); }
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * The new DataGridAddButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, DataGridAddButton, "items", true);
        }
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataGridAddButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Add";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Toevoegen";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.pageSettings = PageSettings.create(this.model);
        }
    }
    DataGridAddButton.structureTypeName = "Pages$DataGridAddButton";
    DataGridAddButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DataGridAddButton = DataGridAddButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-csv-button relevant section in reference guide}
     */
    class DataGridExportToCSVButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__maxNumberOfRows = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__decimalSeparator = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "decimalSeparator", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__groupSeparator = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "groupSeparator", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__delimiter = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "delimiter", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__generateExcelHint = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "generateExcelHint", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__useGridDateFormat = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "useGridDateFormat", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataGridExportToCSVButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToCSVButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get maxNumberOfRows() { return this.__maxNumberOfRows.get(); }
        set maxNumberOfRows(newValue) { this.__maxNumberOfRows.set(newValue); }
        get decimalSeparator() { return this.__decimalSeparator.get(); }
        set decimalSeparator(newValue) { this.__decimalSeparator.set(newValue); }
        get groupSeparator() { return this.__groupSeparator.get(); }
        set groupSeparator(newValue) { this.__groupSeparator.set(newValue); }
        get delimiter() { return this.__delimiter.get(); }
        set delimiter(newValue) { this.__delimiter.set(newValue); }
        get generateExcelHint() { return this.__generateExcelHint.get(); }
        set generateExcelHint(newValue) { this.__generateExcelHint.set(newValue); }
        get useGridDateFormat() { return this.__useGridDateFormat.get(); }
        set useGridDateFormat(newValue) { this.__useGridDateFormat.set(newValue); }
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * The new DataGridExportToCSVButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, DataGridExportToCSVButton, "items", true);
        }
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataGridExportToCSVButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Export to CSV";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Naar CSV exporteren";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.decimalSeparator = ".";
            this.delimiter = ";";
            this.groupSeparator = ",";
            this.maxNumberOfRows = 1000;
        }
    }
    DataGridExportToCSVButton.structureTypeName = "Pages$DataGridExportToCSVButton";
    DataGridExportToCSVButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGridExportToCSVButton = DataGridExportToCSVButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-excel-button relevant section in reference guide}
     */
    class DataGridExportToExcelButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__maxNumberOfRows = new internal.PrimitiveProperty(DataGridExportToExcelButton, this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__useExcelDateType = new internal.PrimitiveProperty(DataGridExportToExcelButton, this, "useExcelDateType", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataGridExportToExcelButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToExcelButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get maxNumberOfRows() { return this.__maxNumberOfRows.get(); }
        set maxNumberOfRows(newValue) { this.__maxNumberOfRows.set(newValue); }
        get useExcelDateType() { return this.__useExcelDateType.get(); }
        set useExcelDateType(newValue) { this.__useExcelDateType.set(newValue); }
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * The new DataGridExportToExcelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, DataGridExportToExcelButton, "items", true);
        }
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataGridExportToExcelButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Export to Excel";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Naar Excel exporteren";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.maxNumberOfRows = 1000;
            this.useExcelDateType = true;
        }
    }
    DataGridExportToExcelButton.structureTypeName = "Pages$DataGridExportToExcelButton";
    DataGridExportToExcelButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGridExportToExcelButton = DataGridExportToExcelButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/remove-button relevant section in reference guide}
     */
    class DataGridRemoveButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new DataGridRemoveButton() cannot be invoked directly, please use 'model.pages.createDataGridRemoveButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * The new DataGridRemoveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, DataGridRemoveButton, "items", true);
        }
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataGridRemoveButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Remove";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Weghalen";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    DataGridRemoveButton.structureTypeName = "Pages$DataGridRemoveButton";
    DataGridRemoveButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGridRemoveButton = DataGridRemoveButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view relevant section in reference guide}
     */
    class DataView extends EntityWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widget = new internal.PartProperty(DataView, this, "widget", null, false);
            /** @internal */
            this.__footerWidget = new internal.PartProperty(DataView, this, "footerWidget", null, false);
            /** @internal */
            this.__editable = new internal.PrimitiveProperty(DataView, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__showControlBar = new internal.PrimitiveProperty(DataView, this, "showControlBar", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__showFooter = new internal.PrimitiveProperty(DataView, this, "showFooter", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__closeOnSaveOrCancel = new internal.PrimitiveProperty(DataView, this, "closeOnSaveOrCancel", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__useSchema = new internal.PrimitiveProperty(DataView, this, "useSchema", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__noEntityMessage = new internal.PartProperty(DataView, this, "noEntityMessage", null, true);
            /** @internal */
            this.__labelWidth = new internal.PrimitiveProperty(DataView, this, "labelWidth", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__controlBar = new internal.PartProperty(DataView, this, "controlBar", null, false);
            /** @internal */
            this.__readOnlyStyle = new internal.EnumProperty(DataView, this, "readOnlyStyle", DataViewReadOnlyStyle.Control, DataViewReadOnlyStyle);
            if (arguments.length < 4) {
                throw new Error("new DataView() cannot be invoked directly, please use 'model.pages.createDataView()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * In version 6.7.0: introduced
         */
        get footerWidget() { return this.__footerWidget.get(); }
        set footerWidget(newValue) { this.__footerWidget.set(newValue); }
        get editable() { return this.__editable.get(); }
        set editable(newValue) { this.__editable.set(newValue); }
        /**
         * In version 6.7.0: deleted
         */
        get showControlBar() { return this.__showControlBar.get(); }
        set showControlBar(newValue) { this.__showControlBar.set(newValue); }
        /**
         * In version 6.7.0: introduced
         */
        get showFooter() { return this.__showFooter.get(); }
        set showFooter(newValue) { this.__showFooter.set(newValue); }
        /**
         * In version 6.7.0: deleted
         */
        get closeOnSaveOrCancel() { return this.__closeOnSaveOrCancel.get(); }
        set closeOnSaveOrCancel(newValue) { this.__closeOnSaveOrCancel.set(newValue); }
        get useSchema() { return this.__useSchema.get(); }
        set useSchema(newValue) { this.__useSchema.set(newValue); }
        get noEntityMessage() { return this.__noEntityMessage.get(); }
        set noEntityMessage(newValue) { this.__noEntityMessage.set(newValue); }
        get labelWidth() { return this.__labelWidth.get(); }
        set labelWidth(newValue) { this.__labelWidth.set(newValue); }
        /**
         * In version 6.7.0: deleted
         * In version 6.5.0: added optional
         */
        get controlBar() { return this.__controlBar.get(); }
        set controlBar(newValue) { this.__controlBar.set(newValue); }
        /**
         * In version 6.9.0: introduced
         */
        get readOnlyStyle() { return this.__readOnlyStyle.get(); }
        set readOnlyStyle(newValue) { this.__readOnlyStyle.set(newValue); }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DataView.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DataView.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DataView, "footerWidget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "leftWidget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "rightWidget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DataView.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "firstWidget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "secondWidget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DataView, "widgets", true);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DataView.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DataView, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DataView.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DataView, "reportWidget", false);
        }
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataView);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__closeOnSaveOrCancel.isAvailable) {
                (() => {
                    if (internal.isAtLeast("6.7.0", this.model)) {
                        return;
                    }
                    this.closeOnSaveOrCancel = true;
                })();
            }
            if (this.__controlBar.isAvailable) {
                (() => {
                    if (internal.isAtLeast("6.7.0", this.model)) {
                        return;
                    }
                    this.controlBar = DataViewControlBar.create(this.model);
                })();
            }
            this.dataSource = DataViewSource.create(this.model);
            this.editable = true;
            this.labelWidth = 3;
            this.noEntityMessage = texts_1.texts.Text.create(this.model);
            if (this.__readOnlyStyle.isAvailable) {
                this.readOnlyStyle = DataViewReadOnlyStyle.Control;
            }
            if (this.__showControlBar.isAvailable) {
                (() => {
                    if (internal.isAtLeast("6.7.0", this.model)) {
                        return;
                    }
                    this.showControlBar = true;
                })();
            }
            if (this.__showFooter.isAvailable) {
                this.showFooter = true;
            }
        }
    }
    DataView.structureTypeName = "Pages$DataView";
    DataView.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "footerWidget": {
                "introduced": "6.7.0"
            },
            "showControlBar": {
                "deleted": "6.7.0",
                "deletionMessage": null
            },
            "showFooter": {
                "introduced": "6.7.0"
            },
            "closeOnSaveOrCancel": {
                "deleted": "6.7.0",
                "deletionMessage": null
            },
            "noEntityMessage": {
                "required": {
                    "currentValue": true
                }
            },
            "controlBar": {
                "deleted": "6.7.0",
                "deletionMessage": null,
                "required": {
                    "currentValue": false,
                    "changedIn": [
                        "6.5.0"
                    ]
                }
            },
            "readOnlyStyle": {
                "introduced": "6.9.0"
            }
        }
    }, internal.StructureType.Element);
    pages.DataView = DataView;
    /**
     * In version 6.7.0: deleted
     */
    class DataViewControlBarButton extends ControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__tabIndex = new internal.PrimitiveProperty(DataViewControlBarButton, this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new DataViewControlBarButton() cannot be invoked directly, please use 'model.pages.createDataViewControlBarButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get tabIndex() { return this.__tabIndex.get(); }
        set tabIndex(newValue) { this.__tabIndex.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DataViewControlBarButton.structureTypeName = "Pages$DataViewControlBarButton";
    DataViewControlBarButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": null
    }, internal.StructureType.Element);
    pages.DataViewControlBarButton = DataViewControlBarButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-action-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewActionButton extends DataViewControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__action = new internal.PartProperty(DataViewActionButton, this, "action", null, true);
            if (arguments.length < 4) {
                throw new Error("new DataViewActionButton() cannot be invoked directly, please use 'model.pages.createDataViewActionButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get action() { return this.__action.get(); }
        set action(newValue) { this.__action.set(newValue); }
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * The new DataViewActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DataViewActionButton.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, DataViewActionButton, "items", true);
        }
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataViewActionButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.action = NoClientAction.create(this.model);
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Action";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Actie";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        }
    }
    DataViewActionButton.structureTypeName = "Pages$DataViewActionButton";
    DataViewActionButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'ActionButton' in data view footer instead.",
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DataViewActionButton = DataViewActionButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-cancel-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewCancelButton extends DataViewControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new DataViewCancelButton() cannot be invoked directly, please use 'model.pages.createDataViewCancelButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * The new DataViewCancelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DataViewCancelButton.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, DataViewCancelButton, "items", true);
        }
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataViewCancelButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Cancel";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Annuleren";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        }
    }
    DataViewCancelButton.structureTypeName = "Pages$DataViewCancelButton";
    DataViewCancelButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'CancelButton' in data view footer instead."
    }, internal.StructureType.Element);
    pages.DataViewCancelButton = DataViewCancelButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-close-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewCloseButton extends DataViewControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new DataViewCloseButton() cannot be invoked directly, please use 'model.pages.createDataViewCloseButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * The new DataViewCloseButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DataViewCloseButton.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, DataViewCloseButton, "items", true);
        }
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataViewCloseButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Close";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Sluiten";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        }
    }
    DataViewCloseButton.structureTypeName = "Pages$DataViewCloseButton";
    DataViewCloseButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'BackButton' in data view footer instead."
    }, internal.StructureType.Element);
    pages.DataViewCloseButton = DataViewCloseButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-control-bar relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewControlBar extends ControlBar {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__closeButton = new internal.ByIdReferenceProperty(DataViewControlBar, this, "closeButton", null);
            if (arguments.length < 4) {
                throw new Error("new DataViewControlBar() cannot be invoked directly, please use 'model.pages.createDataViewControlBar()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get closeButton() { return this.__closeButton.get(); }
        set closeButton(newValue) { this.__closeButton.set(newValue); }
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * The new DataViewControlBar will be automatically stored in the 'controlBar' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DataViewControlBar.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, DataViewControlBar, "controlBar", false);
        }
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataViewControlBar);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DataViewControlBar.structureTypeName = "Pages$DataViewControlBar";
    DataViewControlBar.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use the data view footer instead."
    }, internal.StructureType.Element);
    pages.DataViewControlBar = DataViewControlBar;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-save-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewSaveButton extends DataViewControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__syncAutomatically = new internal.PrimitiveProperty(DataViewSaveButton, this, "syncAutomatically", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataViewSaveButton() cannot be invoked directly, please use 'model.pages.createDataViewSaveButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * In version 6.6.0: introduced
         */
        get syncAutomatically() { return this.__syncAutomatically.get(); }
        set syncAutomatically(newValue) { this.__syncAutomatically.set(newValue); }
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * The new DataViewSaveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DataViewSaveButton.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, DataViewSaveButton, "items", true);
        }
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataViewSaveButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Save";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Opslaan";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        }
    }
    DataViewSaveButton.structureTypeName = "Pages$DataViewSaveButton";
    DataViewSaveButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'SaveButton' in data view footer instead.",
        "properties": {
            "syncAutomatically": {
                "introduced": "6.6.0"
            }
        }
    }, internal.StructureType.Element);
    pages.DataViewSaveButton = DataViewSaveButton;
    class DataViewSource extends EntityPathSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new DataViewSource() cannot be invoked directly, please use 'model.pages.createDataViewSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * The new DataViewSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, DataViewSource, "dataSource", false);
        }
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DataViewSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DataViewSource.structureTypeName = "Pages$DataViewSource";
    DataViewSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataViewSource = DataViewSource;
    class DatabaseConstraint extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__attribute = new internal.ByNameReferenceProperty(DatabaseConstraint, this, "attribute", null, "DomainModels$Attribute");
            /** @internal */
            this.__operator = new internal.EnumProperty(DatabaseConstraint, this, "operator", DatabaseConstraintOperator.Equals, DatabaseConstraintOperator);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(DatabaseConstraint, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new DatabaseConstraint() cannot be invoked directly, please use 'model.pages.createDatabaseConstraint()'");
            }
        }
        get containerAsDatabaseSourceBase() { return super.getContainerAs(DatabaseSourceBase); }
        get containerAsSelectorDatabaseSource() { return super.getContainerAs(SelectorDatabaseSource); }
        get attribute() { return this.__attribute.get(); }
        set attribute(newValue) { this.__attribute.set(newValue); }
        get attributeQualifiedName() { return this.__attribute.qualifiedName(); }
        get operator() { return this.__operator.get(); }
        set operator(newValue) { this.__operator.set(newValue); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.0.1
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, DatabaseConstraint.structureTypeName, { end: "6.0.1" });
            return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
        }
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         */
        static createInDatabaseSourceBaseUnderDatabaseConstraints(container) {
            return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
        }
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0 and higher
         */
        static createInSelectorDatabaseSourceUnderDatabaseConstraints(container) {
            internal.createInVersionCheck(container.model, DatabaseConstraint.structureTypeName, { start: "6.1.0" });
            return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
        }
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DatabaseConstraint);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.operator = DatabaseConstraintOperator.Equals;
        }
    }
    DatabaseConstraint.structureTypeName = "Pages$DatabaseConstraint";
    DatabaseConstraint.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DatabaseConstraint = DatabaseConstraint;
    class SortableEntityPathSource extends EntityPathSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__sortBar = new internal.PartProperty(SortableEntityPathSource, this, "sortBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new SortableEntityPathSource() cannot be invoked directly, please use 'model.pages.createSortableEntityPathSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get sortBar() { return this.__sortBar.get(); }
        set sortBar(newValue) { this.__sortBar.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.sortBar = GridSortBar.create(this.model);
        }
    }
    SortableEntityPathSource.structureTypeName = "Pages$SortableEntityPathSource";
    SortableEntityPathSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sortBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SortableEntityPathSource = SortableEntityPathSource;
    class DatabaseSourceBase extends SortableEntityPathSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__databaseConstraints = new internal.PartListProperty(DatabaseSourceBase, this, "databaseConstraints", []);
            if (arguments.length < 4) {
                throw new Error("new DatabaseSourceBase() cannot be invoked directly, please use 'model.pages.createDatabaseSourceBase()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get databaseConstraints() { return this.__databaseConstraints.get(); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DatabaseSourceBase.structureTypeName = "Pages$DatabaseSourceBase";
    DatabaseSourceBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DatabaseSourceBase = DatabaseSourceBase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/date-picker relevant section in reference guide}
     */
    class DatePicker extends AttributeWidgetWithPlaceholder {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__formattingInfo = new internal.PartProperty(DatePicker, this, "formattingInfo", null, true);
            if (arguments.length < 4) {
                throw new Error("new DatePicker() cannot be invoked directly, please use 'model.pages.createDatePicker()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get formattingInfo() { return this.__formattingInfo.get(); }
        set formattingInfo(newValue) { this.__formattingInfo.set(newValue); }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DatePicker.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DatePicker.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DatePicker, "footerWidget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "leftWidget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "rightWidget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DatePicker.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "firstWidget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "secondWidget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widgets", true);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DatePicker.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DatePicker, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DatePicker.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DatePicker, "reportWidget", false);
        }
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DatePicker);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.formattingInfo = FormattingInfo.create(this.model);
        }
    }
    DatePicker.structureTypeName = "Pages$DatePicker";
    DatePicker.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DatePicker = DatePicker;
    /**
     * See: {@link https://docs.mendix.com/refguide7/container relevant section in reference guide}
     */
    class DivContainer extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widget = new internal.PartProperty(DivContainer, this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new DivContainer() cannot be invoked directly, please use 'model.pages.createDivContainer()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DivContainer.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DivContainer.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DivContainer, "footerWidget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "leftWidget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "rightWidget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DivContainer.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "firstWidget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "secondWidget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widgets", true);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DivContainer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DivContainer, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DivContainer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DivContainer, "reportWidget", false);
        }
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DivContainer);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    DivContainer.structureTypeName = "Pages$DivContainer";
    DivContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DivContainer = DivContainer;
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-widget relevant section in reference guide}
     */
    class DropDown extends AttributeWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__emptyOptionCaption = new internal.PartProperty(DropDown, this, "emptyOptionCaption", null, true);
            if (arguments.length < 4) {
                throw new Error("new DropDown() cannot be invoked directly, please use 'model.pages.createDropDown()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 7.2.0: introduced
         */
        get emptyOptionCaption() { return this.__emptyOptionCaption.get(); }
        set emptyOptionCaption(newValue) { this.__emptyOptionCaption.set(newValue); }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DropDown.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DropDown.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DropDown, "footerWidget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "leftWidget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "rightWidget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DropDown.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "firstWidget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "secondWidget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DropDown, "widgets", true);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DropDown.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DropDown, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DropDown.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DropDown, "reportWidget", false);
        }
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DropDown);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__emptyOptionCaption.isAvailable) {
                this.emptyOptionCaption = texts_1.texts.Text.create(this.model);
            }
        }
    }
    DropDown.structureTypeName = "Pages$DropDown";
    DropDown.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "emptyOptionCaption": {
                "introduced": "7.2.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DropDown = DropDown;
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-button relevant section in reference guide}
     */
    class DropDownButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__items = new internal.PartListProperty(DropDownButton, this, "items", []);
            if (arguments.length < 4) {
                throw new Error("new DropDownButton() cannot be invoked directly, please use 'model.pages.createDropDownButton()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get items() { return this.__items.get(); }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DropDownButton.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DropDownButton.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DropDownButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DropDownButton.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widgets", true);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DropDownButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DropDownButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DropDownButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DropDownButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DropDownButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Drop down";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Uitklappen";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    DropDownButton.structureTypeName = "Pages$DropDownButton";
    DropDownButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DropDownButton = DropDownButton;
    class DropDownButtonItem extends ActionItem {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__caption = new internal.PartProperty(DropDownButtonItem, this, "caption", null, true);
            /** @internal */
            this.__image = new internal.ByNameReferenceProperty(DropDownButtonItem, this, "image", null, "Images$Image");
            if (arguments.length < 4) {
                throw new Error("new DropDownButtonItem() cannot be invoked directly, please use 'model.pages.createDropDownButtonItem()'");
            }
        }
        get containerAsDropDownButton() { return super.getContainerAs(DropDownButton); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        get image() { return this.__image.get(); }
        set image(newValue) { this.__image.set(newValue); }
        get imageQualifiedName() { return this.__image.qualifiedName(); }
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * The new DropDownButtonItem will be automatically stored in the 'items' property
         * of the parent DropDownButton element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, DropDownButtonItem, "items", true);
        }
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DropDownButtonItem);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((text) => {
                text.translations.replace([((translation) => {
                        translation.languageCode = "en_US";
                        translation.text = "Item";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        }
    }
    DropDownButtonItem.structureTypeName = "Pages$DropDownButtonItem";
    DropDownButtonItem.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DropDownButtonItem = DropDownButtonItem;
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-search-field relevant section in reference guide}
     */
    class DropDownSearchField extends SingleSearchField {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__sortBar = new internal.PartProperty(DropDownSearchField, this, "sortBar", null, true);
            /** @internal */
            this.__xPathConstraint = new internal.PrimitiveProperty(DropDownSearchField, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__allowMultipleSelect = new internal.PrimitiveProperty(DropDownSearchField, this, "allowMultipleSelect", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DropDownSearchField() cannot be invoked directly, please use 'model.pages.createDropDownSearchField()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get sortBar() { return this.__sortBar.get(); }
        set sortBar(newValue) { this.__sortBar.set(newValue); }
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint() { return this.__xPathConstraint.get(); }
        set xPathConstraint(newValue) { this.__xPathConstraint.set(newValue); }
        get allowMultipleSelect() { return this.__allowMultipleSelect.get(); }
        set allowMultipleSelect(newValue) { this.__allowMultipleSelect.set(newValue); }
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * The new DropDownSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, DropDownSearchField, "items", true);
        }
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DropDownSearchField);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.operator = SearchFieldOperator.Equal;
            this.sortBar = GridSortBar.create(this.model);
        }
    }
    DropDownSearchField.structureTypeName = "Pages$DropDownSearchField";
    DropDownSearchField.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sortBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DropDownSearchField = DropDownSearchField;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-viewer relevant section in reference guide}
     */
    class DynamicImageViewer extends EntityWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__defaultImage = new internal.ByNameReferenceProperty(DynamicImageViewer, this, "defaultImage", null, "Images$Image");
            /** @internal */
            this.__widthUnit = new internal.EnumProperty(DynamicImageViewer, this, "widthUnit", ImageSizeUnit.Percentage, ImageSizeUnit);
            /** @internal */
            this.__heightUnit = new internal.EnumProperty(DynamicImageViewer, this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            /** @internal */
            this.__width = new internal.PrimitiveProperty(DynamicImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__height = new internal.PrimitiveProperty(DynamicImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__responsive = new internal.PrimitiveProperty(DynamicImageViewer, this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__showAsThumbnail = new internal.PrimitiveProperty(DynamicImageViewer, this, "showAsThumbnail", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__onClickBehavior = new internal.PartProperty(DynamicImageViewer, this, "onClickBehavior", null, true);
            if (arguments.length < 4) {
                throw new Error("new DynamicImageViewer() cannot be invoked directly, please use 'model.pages.createDynamicImageViewer()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get defaultImage() { return this.__defaultImage.get(); }
        set defaultImage(newValue) { this.__defaultImage.set(newValue); }
        get defaultImageQualifiedName() { return this.__defaultImage.qualifiedName(); }
        get widthUnit() { return this.__widthUnit.get(); }
        set widthUnit(newValue) { this.__widthUnit.set(newValue); }
        get heightUnit() { return this.__heightUnit.get(); }
        set heightUnit(newValue) { this.__heightUnit.set(newValue); }
        get width() { return this.__width.get(); }
        set width(newValue) { this.__width.set(newValue); }
        get height() { return this.__height.get(); }
        set height(newValue) { this.__height.set(newValue); }
        get responsive() { return this.__responsive.get(); }
        set responsive(newValue) { this.__responsive.set(newValue); }
        get showAsThumbnail() { return this.__showAsThumbnail.get(); }
        set showAsThumbnail(newValue) { this.__showAsThumbnail.set(newValue); }
        get onClickBehavior() { return this.__onClickBehavior.get(); }
        set onClickBehavior(newValue) { this.__onClickBehavior.set(newValue); }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "footerWidget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "leftWidget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "rightWidget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "firstWidget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "secondWidget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widgets", true);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "reportWidget", false);
        }
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DynamicImageViewer);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.dataSource = ImageViewerSource.create(this.model);
            this.heightUnit = ImageSizeUnit.Auto;
            this.onClickBehavior = OnClickNothing.create(this.model);
            this.responsive = true;
            this.showAsThumbnail = true;
            this.width = 100;
            this.widthUnit = ImageSizeUnit.Percentage;
        }
    }
    DynamicImageViewer.structureTypeName = "Pages$DynamicImageViewer";
    DynamicImageViewer.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "onClickBehavior": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DynamicImageViewer = DynamicImageViewer;
    /**
     * See: {@link https://docs.mendix.com/refguide7/text relevant section in reference guide}
     */
    class DynamicText extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__content = new internal.PartProperty(DynamicText, this, "content", null, true);
            /** @internal */
            this.__renderMode = new internal.EnumProperty(DynamicText, this, "renderMode", TextRenderMode.Text, TextRenderMode);
            if (arguments.length < 4) {
                throw new Error("new DynamicText() cannot be invoked directly, please use 'model.pages.createDynamicText()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get content() { return this.__content.get(); }
        set content(newValue) { this.__content.set(newValue); }
        get renderMode() { return this.__renderMode.get(); }
        set renderMode(newValue) { this.__renderMode.set(newValue); }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, DynamicText.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, DynamicText.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, DynamicText, "footerWidget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "leftWidget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "rightWidget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, DynamicText.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "firstWidget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "secondWidget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widgets", true);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, DynamicText.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DynamicText, "parameterWidget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, DynamicText.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, DynamicText, "reportWidget", false);
        }
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, DynamicText);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.content = ClientTemplate.create(this.model);
                    return;
                }
                this.content = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Text";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Tekst";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.renderMode = TextRenderMode.Text;
        }
    }
    DynamicText.structureTypeName = "Pages$DynamicText";
    DynamicText.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "content": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DynamicText = DynamicText;
    /**
     * See: {@link https://docs.mendix.com/refguide7/file-manager relevant section in reference guide}
     */
    class FileManager extends InputWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__allowedExtensions = new internal.PrimitiveProperty(FileManager, this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__type = new internal.EnumProperty(FileManager, this, "type", FileManagerType.Both, FileManagerType);
            /** @internal */
            this.__maxFileSize = new internal.PrimitiveProperty(FileManager, this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__showFileInBrowser = new internal.PrimitiveProperty(FileManager, this, "showFileInBrowser", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new FileManager() cannot be invoked directly, please use 'model.pages.createFileManager()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get allowedExtensions() { return this.__allowedExtensions.get(); }
        set allowedExtensions(newValue) { this.__allowedExtensions.set(newValue); }
        get type() { return this.__type.get(); }
        set type(newValue) { this.__type.set(newValue); }
        get maxFileSize() { return this.__maxFileSize.get(); }
        set maxFileSize(newValue) { this.__maxFileSize.set(newValue); }
        get showFileInBrowser() { return this.__showFileInBrowser.get(); }
        set showFileInBrowser(newValue) { this.__showFileInBrowser.set(newValue); }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, FileManager.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, FileManager.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, FileManager, "footerWidget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "leftWidget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "rightWidget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, FileManager.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "firstWidget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "secondWidget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, FileManager, "widgets", true);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, FileManager.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, FileManager, "parameterWidget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, FileManager.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, FileManager, "reportWidget", false);
        }
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, FileManager);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.label = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "File";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Bestand";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
            })();
            this.maxFileSize = 5;
            this.type = FileManagerType.Both;
        }
    }
    FileManager.structureTypeName = "Pages$FileManager";
    FileManager.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.FileManager = FileManager;
    class FormattingInfo extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__decimalPrecision = new internal.PrimitiveProperty(FormattingInfo, this, "decimalPrecision", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__groupDigits = new internal.PrimitiveProperty(FormattingInfo, this, "groupDigits", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__enumFormat = new internal.EnumProperty(FormattingInfo, this, "enumFormat", EnumFormat.Text, EnumFormat);
            /** @internal */
            this.__dateFormat = new internal.EnumProperty(FormattingInfo, this, "dateFormat", DateFormat.Date, DateFormat);
            /** @internal */
            this.__customDateFormat = new internal.PrimitiveProperty(FormattingInfo, this, "customDateFormat", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new FormattingInfo() cannot be invoked directly, please use 'model.pages.createFormattingInfo()'");
            }
        }
        get containerAsDataGridColumn() { return super.getContainerAs(documenttemplates_1.documenttemplates.DataGridColumn); }
        get containerAsDynamicLabel() { return super.getContainerAs(documenttemplates_1.documenttemplates.DynamicLabel); }
        get containerAsDatePicker() { return super.getContainerAs(DatePicker); }
        get containerAsGridColumn() { return super.getContainerAs(GridColumn); }
        get containerAsReferenceSelector() { return super.getContainerAs(ReferenceSelector); }
        get containerAsTextBox() { return super.getContainerAs(TextBox); }
        get decimalPrecision() { return this.__decimalPrecision.get(); }
        set decimalPrecision(newValue) { this.__decimalPrecision.set(newValue); }
        get groupDigits() { return this.__groupDigits.get(); }
        set groupDigits(newValue) { this.__groupDigits.set(newValue); }
        get enumFormat() { return this.__enumFormat.get(); }
        set enumFormat(newValue) { this.__enumFormat.set(newValue); }
        get dateFormat() { return this.__dateFormat.get(); }
        set dateFormat(newValue) { this.__dateFormat.set(newValue); }
        get customDateFormat() { return this.__customDateFormat.get(); }
        set customDateFormat(newValue) { this.__customDateFormat.set(newValue); }
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DataGridColumn element passed as argument.
         */
        static createInDataGridColumnUnderFormattingInfo(container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        }
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DynamicLabel element passed as argument.
         */
        static createInDynamicLabelUnderFormattingInfo(container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        }
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent DatePicker element passed as argument.
         */
        static createInDatePickerUnderFormattingInfo(container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        }
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent GridColumn element passed as argument.
         */
        static createInGridColumnUnderFormattingInfo(container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        }
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent ReferenceSelector element passed as argument.
         */
        static createInReferenceSelectorUnderFormattingInfo(container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        }
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent TextBox element passed as argument.
         */
        static createInTextBoxUnderFormattingInfo(container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        }
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, FormattingInfo);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.dateFormat = DateFormat.Date;
            this.decimalPrecision = 2;
            this.enumFormat = EnumFormat.Text;
        }
    }
    FormattingInfo.structureTypeName = "Pages$FormattingInfo";
    FormattingInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.FormattingInfo = FormattingInfo;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-property relevant section in reference guide}
     */
    class Icon extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new Icon() cannot be invoked directly, please use 'model.pages.createIcon()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsButton() { return super.getContainerAs(Button); }
        get containerAsControlBarButton() { return super.getContainerAs(ControlBarButton); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    Icon.structureTypeName = "Pages$Icon";
    Icon.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Icon = Icon;
    class GlyphIcon extends Icon {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__code = new internal.PrimitiveProperty(GlyphIcon, this, "code", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new GlyphIcon() cannot be invoked directly, please use 'model.pages.createGlyphIcon()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsButton() { return super.getContainerAs(Button); }
        get containerAsControlBarButton() { return super.getContainerAs(ControlBarButton); }
        get code() { return this.__code.get(); }
        set code(newValue) { this.__code.set(newValue); }
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderIcon(container) {
            return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
        }
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderIcon(container) {
            return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
        }
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderIcon(container) {
            return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
        }
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GlyphIcon);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.code = -1;
        }
    }
    GlyphIcon.structureTypeName = "Pages$GlyphIcon";
    GlyphIcon.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GlyphIcon = GlyphIcon;
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-action-button relevant section in reference guide}
     */
    class GridActionButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__action = new internal.PartProperty(GridActionButton, this, "action", null, true);
            /** @internal */
            this.__maintainSelectionAfterMicroflow = new internal.PrimitiveProperty(GridActionButton, this, "maintainSelectionAfterMicroflow", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new GridActionButton() cannot be invoked directly, please use 'model.pages.createGridActionButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get action() { return this.__action.get(); }
        set action(newValue) { this.__action.set(newValue); }
        get maintainSelectionAfterMicroflow() { return this.__maintainSelectionAfterMicroflow.get(); }
        set maintainSelectionAfterMicroflow(newValue) { this.__maintainSelectionAfterMicroflow.set(newValue); }
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * The new GridActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridActionButton, "items", true);
        }
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridActionButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.action = NoClientAction.create(this.model);
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Action";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Actie";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    GridActionButton.structureTypeName = "Pages$GridActionButton";
    GridActionButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridActionButton = GridActionButton;
    class GridBaseSource extends SortableEntityPathSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__searchBar = new internal.PartProperty(GridBaseSource, this, "searchBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new GridBaseSource() cannot be invoked directly, please use 'model.pages.createGridBaseSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get searchBar() { return this.__searchBar.get(); }
        set searchBar(newValue) { this.__searchBar.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.searchBar = SearchBar.create(this.model);
        }
    }
    GridBaseSource.structureTypeName = "Pages$GridBaseSource";
    GridBaseSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "searchBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridBaseSource = GridBaseSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns relevant section in reference guide}
     */
    class GridColumn extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__name = new internal.PrimitiveProperty(GridColumn, this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__caption = new internal.PartProperty(GridColumn, this, "caption", null, true);
            /** @internal */
            this.__attributePath = new internal.PrimitiveProperty(GridColumn, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__attributeRef = new internal.PartProperty(GridColumn, this, "attributeRef", null, false);
            /** @internal */
            this.__formattingInfo = new internal.PartProperty(GridColumn, this, "formattingInfo", null, true);
            /** @internal */
            this.__showTooltip = new internal.PrimitiveProperty(GridColumn, this, "showTooltip", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__aggregateCaption = new internal.PartProperty(GridColumn, this, "aggregateCaption", null, true);
            /** @internal */
            this.__aggregateFunction = new internal.EnumProperty(GridColumn, this, "aggregateFunction", AggregateFunction.None, AggregateFunction);
            /** @internal */
            this.__editable = new internal.PrimitiveProperty(GridColumn, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__width = new internal.PrimitiveProperty(GridColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(GridColumn, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(GridColumn, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new GridColumn() cannot be invoked directly, please use 'model.pages.createGridColumn()'");
            }
        }
        get containerAsColumnGrid() { return super.getContainerAs(ColumnGrid); }
        get name() { return this.__name.get(); }
        set name(newValue) { this.__name.set(newValue); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath() { return this.__attributePath.get(); }
        set attributePath(newValue) { this.__attributePath.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef() { return this.__attributeRef.get(); }
        set attributeRef(newValue) { this.__attributeRef.set(newValue); }
        get formattingInfo() { return this.__formattingInfo.get(); }
        set formattingInfo(newValue) { this.__formattingInfo.set(newValue); }
        get showTooltip() { return this.__showTooltip.get(); }
        set showTooltip(newValue) { this.__showTooltip.set(newValue); }
        get aggregateCaption() { return this.__aggregateCaption.get(); }
        set aggregateCaption(newValue) { this.__aggregateCaption.set(newValue); }
        get aggregateFunction() { return this.__aggregateFunction.get(); }
        set aggregateFunction(newValue) { this.__aggregateFunction.set(newValue); }
        get editable() { return this.__editable.get(); }
        set editable(newValue) { this.__editable.set(newValue); }
        get width() { return this.__width.get(); }
        set width(newValue) { this.__width.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * The new GridColumn will be automatically stored in the 'columns' property
         * of the parent ColumnGrid element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridColumn, "columns", true);
        }
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridColumn);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.aggregateCaption = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return;
                }
                this.aggregateCaption = texts_1.texts.Text.create(this.model);
            })();
            this.aggregateFunction = AggregateFunction.None;
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.caption = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Column";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Kolom";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return;
                }
                this.caption = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Column";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
            })();
            this.formattingInfo = FormattingInfo.create(this.model);
        }
    }
    GridColumn.structureTypeName = "Pages$GridColumn";
    GridColumn.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            },
            "attributePath": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'attributeRef' instead"
            },
            "attributeRef": {
                "introduced": "7.11.0"
            },
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            },
            "aggregateCaption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridColumn = GridColumn;
    /**
     * See: {@link https://docs.mendix.com/refguide7/control-bar relevant section in reference guide}
     */
    class GridControlBar extends ControlBar {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__searchButton = new internal.PartProperty(GridControlBar, this, "searchButton", null, true);
            /** @internal */
            this.__defaultButton = new internal.ByIdReferenceProperty(GridControlBar, this, "defaultButton", null);
            if (arguments.length < 4) {
                throw new Error("new GridControlBar() cannot be invoked directly, please use 'model.pages.createGridControlBar()'");
            }
        }
        get containerAsGrid() { return super.getContainerAs(Grid); }
        /**
         * In version 7.13.0: deleted
         */
        get searchButton() { return this.__searchButton.get(); }
        set searchButton(newValue) { this.__searchButton.set(newValue); }
        get defaultButton() { return this.__defaultButton.get(); }
        set defaultButton(newValue) { this.__defaultButton.set(newValue); }
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * The new GridControlBar will be automatically stored in the 'controlBar' property
         * of the parent Grid element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridControlBar, "controlBar", false);
        }
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridControlBar);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__searchButton.isAvailable) {
                this.searchButton = GridSearchButton.create(this.model);
            }
        }
    }
    GridControlBar.structureTypeName = "Pages$GridControlBar";
    GridControlBar.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "searchButton": {
                "deleted": "7.13.0",
                "deletionMessage": null,
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridControlBar = GridControlBar;
    class GridDatabaseSource extends DatabaseSourceBase {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__searchBar = new internal.PartProperty(GridDatabaseSource, this, "searchBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new GridDatabaseSource() cannot be invoked directly, please use 'model.pages.createGridDatabaseSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get searchBar() { return this.__searchBar.get(); }
        set searchBar(newValue) { this.__searchBar.set(newValue); }
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridDatabaseSource, "dataSource", false);
        }
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridDatabaseSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.searchBar = SearchBar.create(this.model);
        }
    }
    GridDatabaseSource.structureTypeName = "Pages$GridDatabaseSource";
    GridDatabaseSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "searchBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridDatabaseSource = GridDatabaseSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/delete-button relevant section in reference guide}
     */
    class GridDeleteButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new GridDeleteButton() cannot be invoked directly, please use 'model.pages.createGridDeleteButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * The new GridDeleteButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridDeleteButton, "items", true);
        }
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridDeleteButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Delete";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Verwijderen";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    GridDeleteButton.structureTypeName = "Pages$GridDeleteButton";
    GridDeleteButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridDeleteButton = GridDeleteButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/deselect-all-button relevant section in reference guide}
     */
    class GridDeselectAllButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new GridDeselectAllButton() cannot be invoked directly, please use 'model.pages.createGridDeselectAllButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * The new GridDeselectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridDeselectAllButton, "items", true);
        }
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridDeselectAllButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Deselect all";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Alles deselecteren";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    GridDeselectAllButton.structureTypeName = "Pages$GridDeselectAllButton";
    GridDeselectAllButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridDeselectAllButton = GridDeselectAllButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
     */
    class GridEditButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__pageSettings = new internal.PartProperty(GridEditButton, this, "pageSettings", null, true);
            /** @internal */
            this.__pagesForSpecializations = new internal.PartListProperty(GridEditButton, this, "pagesForSpecializations", []);
            if (arguments.length < 4) {
                throw new Error("new GridEditButton() cannot be invoked directly, please use 'model.pages.createGridEditButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get pageSettings() { return this.__pageSettings.get(); }
        set pageSettings(newValue) { this.__pageSettings.set(newValue); }
        get pagesForSpecializations() { return this.__pagesForSpecializations.get(); }
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * The new GridEditButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridEditButton, "items", true);
        }
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridEditButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Edit";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Bewerken";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.pageSettings = PageSettings.create(this.model);
        }
    }
    GridEditButton.structureTypeName = "Pages$GridEditButton";
    GridEditButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridEditButton = GridEditButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-new-button relevant section in reference guide}
     */
    class GridNewButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__entity = new internal.ByNameReferenceProperty(GridNewButton, this, "entity", null, "DomainModels$Entity");
            /** @internal */
            this.__editLocation = new internal.EnumProperty(GridNewButton, this, "editLocation", NewButtonEditLocation.Form, NewButtonEditLocation);
            /** @internal */
            this.__pageSettings = new internal.PartProperty(GridNewButton, this, "pageSettings", null, true);
            /** @internal */
            this.__isPersistent = new internal.PrimitiveProperty(GridNewButton, this, "isPersistent", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new GridNewButton() cannot be invoked directly, please use 'model.pages.createGridNewButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        get entityQualifiedName() { return this.__entity.qualifiedName(); }
        get editLocation() { return this.__editLocation.get(); }
        set editLocation(newValue) { this.__editLocation.set(newValue); }
        get pageSettings() { return this.__pageSettings.get(); }
        set pageSettings(newValue) { this.__pageSettings.set(newValue); }
        /**
         * In version 6.2.0: deleted
         * In version 6.0.0: deprecated
         */
        get isPersistent() { return this.__isPersistent.get(); }
        set isPersistent(newValue) { this.__isPersistent.set(newValue); }
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * The new GridNewButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridNewButton, "items", true);
        }
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridNewButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "New";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Nieuw";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.editLocation = NewButtonEditLocation.Form;
            this.pageSettings = PageSettings.create(this.model);
        }
    }
    GridNewButton.structureTypeName = "Pages$GridNewButton";
    GridNewButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "isPersistent": {
                "deprecated": "6.0.0",
                "deprecationMessage": "Persistent 'New' buttons are not supported in Mendix 6.",
                "deleted": "6.2.0",
                "deletionMessage": null
            }
        }
    }, internal.StructureType.Element);
    pages.GridNewButton = GridNewButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-button relevant section in reference guide}
     */
    class GridSearchButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new GridSearchButton() cannot be invoked directly, please use 'model.pages.createGridSearchButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get containerAsGridControlBar() { return super.getContainerAs(GridControlBar); }
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, GridSearchButton.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, GridSearchButton, "items", true);
        }
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createInControlBarUnderItems(container) {
            return internal.instancehelpers.createElement(container, GridSearchButton, "items", true);
        }
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'searchButton' property
         * of the parent GridControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInGridControlBarUnderSearchButton(container) {
            internal.createInVersionCheck(container.model, GridSearchButton.structureTypeName, { end: "7.12.0" });
            return internal.instancehelpers.createElement(container, GridSearchButton, "searchButton", false);
        }
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridSearchButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Search";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Zoeken";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    GridSearchButton.structureTypeName = "Pages$GridSearchButton";
    GridSearchButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridSearchButton = GridSearchButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-all-button relevant section in reference guide}
     */
    class GridSelectAllButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__selectionType = new internal.EnumProperty(GridSelectAllButton, this, "selectionType", SelectionType.SelectPage, SelectionType);
            if (arguments.length < 4) {
                throw new Error("new GridSelectAllButton() cannot be invoked directly, please use 'model.pages.createGridSelectAllButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        get selectionType() { return this.__selectionType.get(); }
        set selectionType(newValue) { this.__selectionType.set(newValue); }
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * The new GridSelectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridSelectAllButton, "items", true);
        }
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridSelectAllButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Select all";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Alles selecteren";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.selectionType = SelectionType.SelectPage;
        }
    }
    GridSelectAllButton.structureTypeName = "Pages$GridSelectAllButton";
    GridSelectAllButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridSelectAllButton = GridSelectAllButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
     */
    class GridSortBar extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__sortItems = new internal.PartListProperty(GridSortBar, this, "sortItems", []);
            if (arguments.length < 4) {
                throw new Error("new GridSortBar() cannot be invoked directly, please use 'model.pages.createGridSortBar()'");
            }
        }
        get containerAsDropDownSearchField() { return super.getContainerAs(DropDownSearchField); }
        get containerAsSelectorDatabaseSource() { return super.getContainerAs(SelectorDatabaseSource); }
        get containerAsSelectorXPathSource() { return super.getContainerAs(SelectorXPathSource); }
        get containerAsSortableEntityPathSource() { return super.getContainerAs(SortableEntityPathSource); }
        get sortItems() { return this.__sortItems.get(); }
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent DropDownSearchField element passed as argument.
         */
        static createInDropDownSearchFieldUnderSortBar(container) {
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        }
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.2.0 and higher
         */
        static createInSelectorDatabaseSourceUnderSortBar(container) {
            internal.createInVersionCheck(container.model, GridSortBar.structureTypeName, { start: "6.2.0" });
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        }
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorXPathSource element passed as argument.
         */
        static createInSelectorXPathSourceUnderSortBar(container) {
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        }
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SortableEntityPathSource element passed as argument.
         */
        static createInSortableEntityPathSourceUnderSortBar(container) {
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        }
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridSortBar);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    GridSortBar.structureTypeName = "Pages$GridSortBar";
    GridSortBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridSortBar = GridSortBar;
    class GridSortItem extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__attributePath = new internal.PrimitiveProperty(GridSortItem, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__attributeRef = new internal.PartProperty(GridSortItem, this, "attributeRef", null, true);
            /** @internal */
            this.__sortDirection = new internal.EnumProperty(GridSortItem, this, "sortDirection", SortDirection.Ascending, SortDirection);
            if (arguments.length < 4) {
                throw new Error("new GridSortItem() cannot be invoked directly, please use 'model.pages.createGridSortItem()'");
            }
        }
        get containerAsGridSortBar() { return super.getContainerAs(GridSortBar); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath() { return this.__attributePath.get(); }
        set attributePath(newValue) { this.__attributePath.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef() { return this.__attributeRef.get(); }
        set attributeRef(newValue) { this.__attributeRef.set(newValue); }
        get sortDirection() { return this.__sortDirection.get(); }
        set sortDirection(newValue) { this.__sortDirection.set(newValue); }
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * The new GridSortItem will be automatically stored in the 'sortItems' property
         * of the parent GridSortBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridSortItem, "sortItems", true);
        }
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridSortItem);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__attributePath.isAvailable) {
                this.attributePath = "";
            }
            if (this.__attributeRef.isAvailable) {
                this.attributeRef = domainmodels_1.domainmodels.AttributeRef.create(this.model);
            }
            this.sortDirection = SortDirection.Ascending;
        }
    }
    GridSortItem.structureTypeName = "Pages$GridSortItem";
    GridSortItem.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "attributePath": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'attributeRef' instead",
                "required": {
                    "currentValue": true
                }
            },
            "attributeRef": {
                "introduced": "7.11.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridSortItem = GridSortItem;
    class GridXPathSource extends GridBaseSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__xPathConstraint = new internal.PrimitiveProperty(GridXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__applyContext = new internal.PrimitiveProperty(GridXPathSource, this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__removeAllFromContext = new internal.PrimitiveProperty(GridXPathSource, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__removeFromContextIds = new internal.ByNameReferenceListProperty(GridXPathSource, this, "removeFromContextIds", [], "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new GridXPathSource() cannot be invoked directly, please use 'model.pages.createGridXPathSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint() { return this.__xPathConstraint.get(); }
        set xPathConstraint(newValue) { this.__xPathConstraint.set(newValue); }
        get applyContext() { return this.__applyContext.get(); }
        set applyContext(newValue) { this.__applyContext.set(newValue); }
        get removeAllFromContext() { return this.__removeAllFromContext.get(); }
        set removeAllFromContext(newValue) { this.__removeAllFromContext.set(newValue); }
        get removeFromContextIds() { return this.__removeFromContextIds.get(); }
        get removeFromContextIdsQualifiedNames() { return this.__removeFromContextIds.qualifiedNames(); }
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * The new GridXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, GridXPathSource, "dataSource", false);
        }
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GridXPathSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    GridXPathSource.structureTypeName = "Pages$GridXPathSource";
    GridXPathSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridXPathSource = GridXPathSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/group-box relevant section in reference guide}
     */
    class GroupBox extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__caption = new internal.PartProperty(GroupBox, this, "caption", null, false);
            /** @internal */
            this.__collapsible = new internal.EnumProperty(GroupBox, this, "collapsible", GroupBoxCollapsible.YesInitiallyExpanded, GroupBoxCollapsible);
            /** @internal */
            this.__widget = new internal.PartProperty(GroupBox, this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new GroupBox() cannot be invoked directly, please use 'model.pages.createGroupBox()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        get collapsible() { return this.__collapsible.get(); }
        set collapsible(newValue) { this.__collapsible.set(newValue); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, GroupBox.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, GroupBox.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, GroupBox, "footerWidget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "leftWidget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "rightWidget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, GroupBox.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "firstWidget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "secondWidget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widgets", true);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, GroupBox.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, GroupBox, "parameterWidget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, GroupBox.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, GroupBox, "reportWidget", false);
        }
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, GroupBox);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Group box";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Group box";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.collapsible = GroupBoxCollapsible.YesInitiallyExpanded;
        }
    }
    GroupBox.structureTypeName = "Pages$GroupBox";
    GroupBox.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {}
        }
    }, internal.StructureType.Element);
    pages.GroupBox = GroupBox;
    /**
     * See: {@link https://docs.mendix.com/refguide7/header relevant section in reference guide}
     */
    class Header extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__leftWidget = new internal.PartProperty(Header, this, "leftWidget", null, false);
            /** @internal */
            this.__rightWidget = new internal.PartProperty(Header, this, "rightWidget", null, false);
            if (arguments.length < 4) {
                throw new Error("new Header() cannot be invoked directly, please use 'model.pages.createHeader()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get leftWidget() { return this.__leftWidget.get(); }
        set leftWidget(newValue) { this.__leftWidget.set(newValue); }
        get rightWidget() { return this.__rightWidget.get(); }
        set rightWidget(newValue) { this.__rightWidget.set(newValue); }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, Header.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, Header.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, Header, "footerWidget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "leftWidget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "rightWidget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, Header.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "firstWidget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "secondWidget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, Header, "widgets", true);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, Header.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Header, "parameterWidget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, Header.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Header, "reportWidget", false);
        }
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, Header);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    Header.structureTypeName = "Pages$Header";
    Header.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Header = Header;
    class SplitPane extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__firstWidget = new internal.PartProperty(SplitPane, this, "firstWidget", null, false);
            /** @internal */
            this.__secondWidget = new internal.PartProperty(SplitPane, this, "secondWidget", null, false);
            /** @internal */
            this.__animatedResize = new internal.PrimitiveProperty(SplitPane, this, "animatedResize", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__height = new internal.PrimitiveProperty(SplitPane, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__position = new internal.PrimitiveProperty(SplitPane, this, "position", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new SplitPane() cannot be invoked directly, please use 'model.pages.createSplitPane()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get firstWidget() { return this.__firstWidget.get(); }
        set firstWidget(newValue) { this.__firstWidget.set(newValue); }
        get secondWidget() { return this.__secondWidget.get(); }
        set secondWidget(newValue) { this.__secondWidget.set(newValue); }
        get animatedResize() { return this.__animatedResize.get(); }
        set animatedResize(newValue) { this.__animatedResize.set(newValue); }
        get height() { return this.__height.get(); }
        set height(newValue) { this.__height.set(newValue); }
        get position() { return this.__position.get(); }
        set position(newValue) { this.__position.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.position = 50;
        }
    }
    SplitPane.structureTypeName = "Pages$SplitPane";
    SplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SplitPane = SplitPane;
    /**
     * See: {@link https://docs.mendix.com/refguide7/horizontal-split-pane relevant section in reference guide}
     */
    class HorizontalSplitPane extends SplitPane {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new HorizontalSplitPane() cannot be invoked directly, please use 'model.pages.createHorizontalSplitPane()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "footerWidget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "leftWidget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "rightWidget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "firstWidget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "secondWidget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widgets", true);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "parameterWidget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "reportWidget", false);
        }
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, HorizontalSplitPane);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    HorizontalSplitPane.structureTypeName = "Pages$HorizontalSplitPane";
    HorizontalSplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.HorizontalSplitPane = HorizontalSplitPane;
    class ImageIcon extends Icon {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__image = new internal.ByNameReferenceProperty(ImageIcon, this, "image", null, "Images$Image");
            if (arguments.length < 4) {
                throw new Error("new ImageIcon() cannot be invoked directly, please use 'model.pages.createImageIcon()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsButton() { return super.getContainerAs(Button); }
        get containerAsControlBarButton() { return super.getContainerAs(ControlBarButton); }
        get image() { return this.__image.get(); }
        set image(newValue) { this.__image.set(newValue); }
        get imageQualifiedName() { return this.__image.qualifiedName(); }
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderIcon(container) {
            return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
        }
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderIcon(container) {
            return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
        }
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderIcon(container) {
            return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
        }
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ImageIcon);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ImageIcon.structureTypeName = "Pages$ImageIcon";
    ImageIcon.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "image": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ImageIcon = ImageIcon;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-uploader relevant section in reference guide}
     */
    class ImageUploader extends InputWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__allowedExtensions = new internal.PrimitiveProperty(ImageUploader, this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__thumbnailSize = new internal.PrimitiveProperty(ImageUploader, this, "thumbnailSize", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            /** @internal */
            this.__maxFileSize = new internal.PrimitiveProperty(ImageUploader, this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new ImageUploader() cannot be invoked directly, please use 'model.pages.createImageUploader()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get allowedExtensions() { return this.__allowedExtensions.get(); }
        set allowedExtensions(newValue) { this.__allowedExtensions.set(newValue); }
        get thumbnailSize() { return this.__thumbnailSize.get(); }
        set thumbnailSize(newValue) { this.__thumbnailSize.set(newValue); }
        get maxFileSize() { return this.__maxFileSize.get(); }
        set maxFileSize(newValue) { this.__maxFileSize.set(newValue); }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, ImageUploader.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, ImageUploader.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ImageUploader, "footerWidget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "leftWidget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "rightWidget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ImageUploader.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "firstWidget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "secondWidget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widgets", true);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, ImageUploader.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ImageUploader, "parameterWidget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, ImageUploader.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ImageUploader, "reportWidget", false);
        }
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ImageUploader);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.label = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Upload image";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Upload afbeelding";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
            })();
            this.maxFileSize = 5;
            this.thumbnailSize = { width: 100, height: 75 };
        }
    }
    ImageUploader.structureTypeName = "Pages$ImageUploader";
    ImageUploader.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ImageUploader = ImageUploader;
    class ImageViewerSource extends EntityPathSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ImageViewerSource() cannot be invoked directly, please use 'model.pages.createImageViewerSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * The new ImageViewerSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ImageViewerSource, "dataSource", false);
        }
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ImageViewerSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ImageViewerSource.structureTypeName = "Pages$ImageViewerSource";
    ImageViewerSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ImageViewerSource = ImageViewerSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/input-reference-set-selector relevant section in reference guide}
     */
    class InputReferenceSetSelector extends AssociationWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new InputReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createInputReferenceSetSelector()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "footerWidget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "leftWidget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "rightWidget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "firstWidget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "secondWidget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widgets", true);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "parameterWidget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "reportWidget", false);
        }
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, InputReferenceSetSelector);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    InputReferenceSetSelector.structureTypeName = "Pages$InputReferenceSetSelector";
    InputReferenceSetSelector.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.InputReferenceSetSelector = InputReferenceSetSelector;
    /**
     * See: {@link https://docs.mendix.com/refguide7/label relevant section in reference guide}
     */
    class Label extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__caption = new internal.PartProperty(Label, this, "caption", null, true);
            if (arguments.length < 4) {
                throw new Error("new Label() cannot be invoked directly, please use 'model.pages.createLabel()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, Label.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, Label.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, Label, "footerWidget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "leftWidget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "rightWidget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, Label.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "firstWidget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "secondWidget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, Label, "widgets", true);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, Label.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Label, "parameterWidget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, Label.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Label, "reportWidget", false);
        }
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, Label);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.caption = texts_1.texts.Text.create(this.model);
                    return;
                }
                this.caption = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Label";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
            })();
        }
    }
    Label.structureTypeName = "Pages$Label";
    Label.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.Label = Label;
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
     */
    class Layout extends FormBase {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__widget = new internal.PartProperty(Layout, this, "widget", null, false);
            /** @internal */
            this.__layoutCall = new internal.PartProperty(Layout, this, "layoutCall", null, false);
            /** @internal */
            this.__layoutType = new internal.EnumProperty(Layout, this, "layoutType", LayoutType.Responsive, LayoutType);
            /** @internal */
            this.__mainPlaceholder = new internal.ByNameReferenceProperty(Layout, this, "mainPlaceholder", null, "Pages$LayoutParameter");
            /** @internal */
            this.__acceptButtonPlaceholder = new internal.ByNameReferenceProperty(Layout, this, "acceptButtonPlaceholder", null, "Pages$LayoutParameter");
            /** @internal */
            this.__cancelButtonPlaceholder = new internal.ByNameReferenceProperty(Layout, this, "cancelButtonPlaceholder", null, "Pages$LayoutParameter");
            /** @internal */
            this.__mainPlaceholderName = new internal.PrimitiveProperty(Layout, this, "mainPlaceholderName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__acceptPlaceholderName = new internal.PrimitiveProperty(Layout, this, "acceptPlaceholderName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__cancelPlaceholderName = new internal.PrimitiveProperty(Layout, this, "cancelPlaceholderName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__useMainPlaceholderForPopups = new internal.PrimitiveProperty(Layout, this, "useMainPlaceholderForPopups", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(Layout, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(Layout, this, "style", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * In version 6.8.0: added optional
         */
        get layoutCall() { return this.__layoutCall.get(); }
        set layoutCall(newValue) { this.__layoutCall.set(newValue); }
        /**
         * In version 6.8.0: added public
         */
        get layoutType() { return this.__layoutType.get(); }
        set layoutType(newValue) { this.__layoutType.set(newValue); }
        /**
         * In version 6.8.0: deleted
         */
        get mainPlaceholder() { return this.__mainPlaceholder.get(); }
        set mainPlaceholder(newValue) { this.__mainPlaceholder.set(newValue); }
        get mainPlaceholderQualifiedName() { return this.__mainPlaceholder.qualifiedName(); }
        /**
         * In version 6.8.0: deleted
         */
        get acceptButtonPlaceholder() { return this.__acceptButtonPlaceholder.get(); }
        set acceptButtonPlaceholder(newValue) { this.__acceptButtonPlaceholder.set(newValue); }
        get acceptButtonPlaceholderQualifiedName() { return this.__acceptButtonPlaceholder.qualifiedName(); }
        /**
         * In version 6.8.0: deleted
         */
        get cancelButtonPlaceholder() { return this.__cancelButtonPlaceholder.get(); }
        set cancelButtonPlaceholder(newValue) { this.__cancelButtonPlaceholder.set(newValue); }
        get cancelButtonPlaceholderQualifiedName() { return this.__cancelButtonPlaceholder.qualifiedName(); }
        /**
         * In version 7.9.0: deleted
         * In version 6.8.0: introduced
         */
        get mainPlaceholderName() { return this.__mainPlaceholderName.get(); }
        set mainPlaceholderName(newValue) { this.__mainPlaceholderName.set(newValue); }
        /**
         * In version 7.9.0: deleted
         * In version 6.8.0: introduced
         */
        get acceptPlaceholderName() { return this.__acceptPlaceholderName.get(); }
        set acceptPlaceholderName(newValue) { this.__acceptPlaceholderName.set(newValue); }
        /**
         * In version 7.9.0: deleted
         * In version 6.8.0: introduced
         */
        get cancelPlaceholderName() { return this.__cancelPlaceholderName.get(); }
        set cancelPlaceholderName(newValue) { this.__cancelPlaceholderName.set(newValue); }
        /**
         * In version 7.9.0: deleted
         */
        get useMainPlaceholderForPopups() { return this.__useMainPlaceholderForPopups.get(); }
        set useMainPlaceholderForPopups(newValue) { this.__useMainPlaceholderForPopups.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        /**
         * Creates a new Layout unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container) {
            return internal.instancehelpers.createUnit(container, Layout);
        }
        /** @internal */
        _isByNameReferrable() { return true; }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("6.8.0", this.model)) {
                    return;
                }
                this.layoutCall = LayoutCall.create(this.model);
            })();
            this.layoutType = LayoutType.Responsive;
        }
    }
    Layout.structureTypeName = "Pages$Layout";
    Layout.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "layoutCall": {
                "required": {
                    "currentValue": false,
                    "changedIn": [
                        "6.8.0"
                    ]
                }
            },
            "layoutType": {
                "public": {
                    "currentValue": true,
                    "changedIn": [
                        "6.8.0"
                    ]
                }
            },
            "mainPlaceholder": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "acceptButtonPlaceholder": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "cancelButtonPlaceholder": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "mainPlaceholderName": {
                "introduced": "6.8.0",
                "deleted": "7.9.0",
                "deletionMessage": null
            },
            "acceptPlaceholderName": {
                "introduced": "6.8.0",
                "deleted": "7.9.0",
                "deletionMessage": null
            },
            "cancelPlaceholderName": {
                "introduced": "6.8.0",
                "deleted": "7.9.0",
                "deletionMessage": null
            },
            "useMainPlaceholderForPopups": {
                "deleted": "7.9.0",
                "deletionMessage": null
            }
        }
    }, internal.StructureType.ModelUnit);
    pages.Layout = Layout;
    class LayoutCall extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__layout = new internal.ByNameReferenceProperty(LayoutCall, this, "layout", null, "Pages$Layout");
            /** @internal */
            this.__arguments = new internal.PartListProperty(LayoutCall, this, "arguments", []);
            if (arguments.length < 4) {
                throw new Error("new LayoutCall() cannot be invoked directly, please use 'model.pages.createLayoutCall()'");
            }
        }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsPage() { return super.getContainerAs(Page); }
        get containerAsPageTemplate() { return super.getContainerAs(PageTemplate); }
        get layout() { return this.__layout.get(); }
        set layout(newValue) { this.__layout.set(newValue); }
        get layoutQualifiedName() { return this.__layout.qualifiedName(); }
        get arguments() { return this.__arguments.get(); }
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderLayoutCall(container) {
            return internal.instancehelpers.createElement(container, LayoutCall, "layoutCall", false);
        }
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Page element passed as argument.
         */
        static createInPageUnderLayoutCall(container) {
            return internal.instancehelpers.createElement(container, LayoutCall, "layoutCall", false);
        }
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInPageTemplateUnderLayoutCall(container) {
            internal.createInVersionCheck(container.model, LayoutCall.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, LayoutCall, "layoutCall", false);
        }
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LayoutCall);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    LayoutCall.structureTypeName = "Pages$LayoutCall";
    LayoutCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutCall = LayoutCall;
    class LayoutCallArgument extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__parameterName = new internal.PrimitiveProperty(LayoutCallArgument, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__parameter = new internal.ByNameReferenceProperty(LayoutCallArgument, this, "parameter", null, "Pages$LayoutParameter");
            /** @internal */
            this.__widget = new internal.PartProperty(LayoutCallArgument, this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new LayoutCallArgument() cannot be invoked directly, please use 'model.pages.createLayoutCallArgument()'");
            }
        }
        get containerAsLayoutCall() { return super.getContainerAs(LayoutCall); }
        /**
         * In version 6.8.0: deleted
         */
        get parameterName() { return this.__parameterName.get(); }
        set parameterName(newValue) { this.__parameterName.set(newValue); }
        /**
         * In version 6.8.0: introduced
         */
        get parameter() { return this.__parameter.get(); }
        set parameter(newValue) { this.__parameter.set(newValue); }
        get parameterQualifiedName() { return this.__parameter.qualifiedName(); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * The new LayoutCallArgument will be automatically stored in the 'arguments' property
         * of the parent LayoutCall element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, LayoutCallArgument, "arguments", true);
        }
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LayoutCallArgument);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    LayoutCallArgument.structureTypeName = "Pages$LayoutCallArgument";
    LayoutCallArgument.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "parameterName": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "parameter": {
                "introduced": "6.8.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.LayoutCallArgument = LayoutCallArgument;
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout-grid relevant section in reference guide}
     */
    class LayoutGrid extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__width = new internal.EnumProperty(LayoutGrid, this, "width", ContainerWidth.FullWidth, ContainerWidth);
            /** @internal */
            this.__rows = new internal.PartListProperty(LayoutGrid, this, "rows", []);
            if (arguments.length < 4) {
                throw new Error("new LayoutGrid() cannot be invoked directly, please use 'model.pages.createLayoutGrid()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get width() { return this.__width.get(); }
        set width(newValue) { this.__width.set(newValue); }
        get rows() { return this.__rows.get(); }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, LayoutGrid.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, LayoutGrid.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, LayoutGrid, "footerWidget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "leftWidget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "rightWidget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LayoutGrid.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "firstWidget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "secondWidget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widgets", true);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, LayoutGrid.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, LayoutGrid, "parameterWidget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, LayoutGrid.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, LayoutGrid, "reportWidget", false);
        }
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LayoutGrid);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.rows.replace([LayoutGridRow.create(this.model)]);
            this.width = ContainerWidth.FullWidth;
        }
    }
    LayoutGrid.structureTypeName = "Pages$LayoutGrid";
    LayoutGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutGrid = LayoutGrid;
    class LayoutGridColumn extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__weight = new internal.PrimitiveProperty(LayoutGridColumn, this, "weight", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__widget = new internal.PartProperty(LayoutGridColumn, this, "widget", null, false);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(LayoutGridColumn, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(LayoutGridColumn, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LayoutGridColumn() cannot be invoked directly, please use 'model.pages.createLayoutGridColumn()'");
            }
        }
        get containerAsLayoutGridRow() { return super.getContainerAs(LayoutGridRow); }
        get weight() { return this.__weight.get(); }
        set weight(newValue) { this.__weight.set(newValue); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * The new LayoutGridColumn will be automatically stored in the 'columns' property
         * of the parent LayoutGridRow element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, LayoutGridColumn, "columns", true);
        }
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LayoutGridColumn);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.weight = 1;
        }
    }
    LayoutGridColumn.structureTypeName = "Pages$LayoutGridColumn";
    LayoutGridColumn.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutGridColumn = LayoutGridColumn;
    class LayoutGridRow extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__columns = new internal.PartListProperty(LayoutGridRow, this, "columns", []);
            /** @internal */
            this.__conditionalVisibilitySettings = new internal.PartProperty(LayoutGridRow, this, "conditionalVisibilitySettings", null, false);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(LayoutGridRow, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(LayoutGridRow, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LayoutGridRow() cannot be invoked directly, please use 'model.pages.createLayoutGridRow()'");
            }
        }
        get containerAsLayoutGrid() { return super.getContainerAs(LayoutGrid); }
        get columns() { return this.__columns.get(); }
        get conditionalVisibilitySettings() { return this.__conditionalVisibilitySettings.get(); }
        set conditionalVisibilitySettings(newValue) { this.__conditionalVisibilitySettings.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * The new LayoutGridRow will be automatically stored in the 'rows' property
         * of the parent LayoutGrid element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, LayoutGridRow, "rows", true);
        }
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LayoutGridRow);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.columns.replace([((layoutGridColumn) => {
                    layoutGridColumn.weight = 12;
                    return layoutGridColumn;
                })(LayoutGridColumn.create(this.model))]);
        }
    }
    LayoutGridRow.structureTypeName = "Pages$LayoutGridRow";
    LayoutGridRow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutGridRow = LayoutGridRow;
    class LayoutParameter extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__name = new internal.PrimitiveProperty(LayoutParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LayoutParameter() cannot be invoked directly, please use 'model.pages.createLayoutParameter()'");
            }
        }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get name() { return this.__name.get(); }
        set name(newValue) { this.__name.set(newValue); }
        /** @internal */
        _isByNameReferrable() { return true; }
        get qualifiedName() {
            return this._getQualifiedName();
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    LayoutParameter.structureTypeName = "Pages$LayoutParameter";
    LayoutParameter.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "name": {
                "public": {
                    "currentValue": true
                }
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pages.LayoutParameter = LayoutParameter;
    /**
     * See: {@link https://docs.mendix.com/refguide7/link-button relevant section in reference guide}
     *
     * In version 7.3.0: deleted
     */
    class LinkButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__linkType = new internal.EnumProperty(LinkButton, this, "linkType", LinkType.Web, LinkType);
            /** @internal */
            this.__address = new internal.PartProperty(LinkButton, this, "address", null, true);
            if (arguments.length < 4) {
                throw new Error("new LinkButton() cannot be invoked directly, please use 'model.pages.createLinkButton()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get linkType() { return this.__linkType.get(); }
        set linkType(newValue) { this.__linkType.set(newValue); }
        get address() { return this.__address.get(); }
        set address(newValue) { this.__address.set(newValue); }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.2.0
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { start: "6.7.0", end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.2.0
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { start: "7.1.0", end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "widgets", true);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, LinkButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, LinkButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LinkButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.address = ((staticOrDynamicString) => {
                staticOrDynamicString.value = "http://www.mendix.com/";
                return staticOrDynamicString;
            })(StaticOrDynamicString.create(this.model));
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Link";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Koppeling";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.linkType = LinkType.Web;
        }
    }
    LinkButton.structureTypeName = "Pages$LinkButton";
    LinkButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "7.3.0",
        "deletionMessage": "Use an ActionButton with OpenLinkClientAction instead",
        "properties": {
            "address": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.LinkButton = LinkButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/list-view relevant section in reference guide}
     */
    class ListView extends ListenTargetWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widget = new internal.PartProperty(ListView, this, "widget", null, false);
            /** @internal */
            this.__pageSize = new internal.PrimitiveProperty(ListView, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__clickAction = new internal.PartProperty(ListView, this, "clickAction", null, true);
            /** @internal */
            this.__editable = new internal.PrimitiveProperty(ListView, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__templates = new internal.PartListProperty(ListView, this, "templates", []);
            if (arguments.length < 4) {
                throw new Error("new ListView() cannot be invoked directly, please use 'model.pages.createListView()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        get pageSize() { return this.__pageSize.get(); }
        set pageSize(newValue) { this.__pageSize.set(newValue); }
        get clickAction() { return this.__clickAction.get(); }
        set clickAction(newValue) { this.__clickAction.set(newValue); }
        get editable() { return this.__editable.get(); }
        set editable(newValue) { this.__editable.set(newValue); }
        get templates() { return this.__templates.get(); }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, ListView.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, ListView.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ListView, "footerWidget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "leftWidget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "rightWidget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ListView.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "firstWidget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "secondWidget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, ListView, "widgets", true);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, ListView.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ListView, "parameterWidget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, ListView.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ListView, "reportWidget", false);
        }
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ListView);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.clickAction = NoClientAction.create(this.model);
            this.dataSource = ListViewDatabaseSource.create(this.model);
            this.pageSize = 10;
        }
    }
    ListView.structureTypeName = "Pages$ListView";
    ListView.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "clickAction": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListView = ListView;
    class ListViewDatabaseSource extends DatabaseSourceBase {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__search = new internal.PartProperty(ListViewDatabaseSource, this, "search", null, true);
            if (arguments.length < 4) {
                throw new Error("new ListViewDatabaseSource() cannot be invoked directly, please use 'model.pages.createListViewDatabaseSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get search() { return this.__search.get(); }
        set search(newValue) { this.__search.set(newValue); }
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ListViewDatabaseSource, "dataSource", false);
        }
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ListViewDatabaseSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.search = ListViewSearch.create(this.model);
        }
    }
    ListViewDatabaseSource.structureTypeName = "Pages$ListViewDatabaseSource";
    ListViewDatabaseSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "search": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListViewDatabaseSource = ListViewDatabaseSource;
    class ListViewSearch extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__searchPaths = new internal.PrimitiveListProperty(ListViewSearch, this, "searchPaths", [], internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__searchRefs = new internal.PartListProperty(ListViewSearch, this, "searchRefs", []);
            if (arguments.length < 4) {
                throw new Error("new ListViewSearch() cannot be invoked directly, please use 'model.pages.createListViewSearch()'");
            }
        }
        get containerAsListViewDatabaseSource() { return super.getContainerAs(ListViewDatabaseSource); }
        get containerAsListViewXPathSource() { return super.getContainerAs(ListViewXPathSource); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get searchPaths() { return this.__searchPaths.get(); }
        /**
         * In version 7.11.0: introduced
         */
        get searchRefs() { return this.__searchRefs.get(); }
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewDatabaseSource element passed as argument.
         */
        static createInListViewDatabaseSourceUnderSearch(container) {
            return internal.instancehelpers.createElement(container, ListViewSearch, "search", false);
        }
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewXPathSource element passed as argument.
         */
        static createInListViewXPathSourceUnderSearch(container) {
            return internal.instancehelpers.createElement(container, ListViewSearch, "search", false);
        }
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ListViewSearch);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ListViewSearch.structureTypeName = "Pages$ListViewSearch";
    ListViewSearch.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "searchPaths": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'searchRefs' instead"
            },
            "searchRefs": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.ListViewSearch = ListViewSearch;
    class ListViewTemplate extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__specialization = new internal.ByNameReferenceProperty(ListViewTemplate, this, "specialization", null, "DomainModels$Entity");
            /** @internal */
            this.__widget = new internal.PartProperty(ListViewTemplate, this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new ListViewTemplate() cannot be invoked directly, please use 'model.pages.createListViewTemplate()'");
            }
        }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get specialization() { return this.__specialization.get(); }
        set specialization(newValue) { this.__specialization.set(newValue); }
        get specializationQualifiedName() { return this.__specialization.qualifiedName(); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * The new ListViewTemplate will be automatically stored in the 'templates' property
         * of the parent ListView element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ListViewTemplate, "templates", true);
        }
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ListViewTemplate);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ListViewTemplate.structureTypeName = "Pages$ListViewTemplate";
    ListViewTemplate.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "specialization": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListViewTemplate = ListViewTemplate;
    class ListViewXPathSource extends SortableEntityPathSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__search = new internal.PartProperty(ListViewXPathSource, this, "search", null, true);
            /** @internal */
            this.__xPathConstraint = new internal.PrimitiveProperty(ListViewXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ListViewXPathSource() cannot be invoked directly, please use 'model.pages.createListViewXPathSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get search() { return this.__search.get(); }
        set search(newValue) { this.__search.set(newValue); }
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint() { return this.__xPathConstraint.get(); }
        set xPathConstraint(newValue) { this.__xPathConstraint.set(newValue); }
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ListViewXPathSource, "dataSource", false);
        }
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ListViewXPathSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.search = ListViewSearch.create(this.model);
        }
    }
    ListViewXPathSource.structureTypeName = "Pages$ListViewXPathSource";
    ListViewXPathSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "search": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListViewXPathSource = ListViewXPathSource;
    class ListenTargetSource extends DataSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__listenTarget = new internal.PrimitiveProperty(ListenTargetSource, this, "listenTarget", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ListenTargetSource() cannot be invoked directly, please use 'model.pages.createListenTargetSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get listenTarget() { return this.__listenTarget.get(); }
        set listenTarget(newValue) { this.__listenTarget.set(newValue); }
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * The new ListenTargetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ListenTargetSource, "dataSource", false);
        }
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ListenTargetSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ListenTargetSource.structureTypeName = "Pages$ListenTargetSource";
    ListenTargetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ListenTargetSource = ListenTargetSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sign-in-button relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class LoginButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__validationMessageWidget = new internal.PrimitiveProperty(LoginButton, this, "validationMessageWidget", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LoginButton() cannot be invoked directly, please use 'model.pages.createLoginButton()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get validationMessageWidget() { return this.__validationMessageWidget.get(); }
        set validationMessageWidget(newValue) { this.__validationMessageWidget.set(newValue); }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widget", false);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, LoginButton.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginButton, "widgets", true);
        }
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LoginButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Sign in";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Aanmelden";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    LoginButton.structureTypeName = "Pages$LoginButton";
    LoginButton.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.LoginButton = LoginButton;
    /**
     * In version 7.0.2: introduced
     */
    class LoginTextBox extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__label = new internal.PartProperty(LoginTextBox, this, "label", null, false);
            /** @internal */
            this.__labelWidth = new internal.PrimitiveProperty(LoginTextBox, this, "labelWidth", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__placeholder = new internal.PartProperty(LoginTextBox, this, "placeholder", null, true);
            if (arguments.length < 4) {
                throw new Error("new LoginTextBox() cannot be invoked directly, please use 'model.pages.createLoginTextBox()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get label() { return this.__label.get(); }
        set label(newValue) { this.__label.set(newValue); }
        get labelWidth() { return this.__labelWidth.get(); }
        set labelWidth(newValue) { this.__labelWidth.set(newValue); }
        get placeholder() { return this.__placeholder.get(); }
        set placeholder(newValue) { this.__placeholder.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.labelWidth = 3;
            this.placeholder = texts_1.texts.Text.create(this.model);
        }
    }
    LoginTextBox.structureTypeName = "Pages$LoginTextBox";
    LoginTextBox.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2",
        "properties": {
            "placeholder": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.LoginTextBox = LoginTextBox;
    /**
     * See: {@link https://docs.mendix.com/refguide7/login-id-text-box relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class LoginIdTextBox extends LoginTextBox {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new LoginIdTextBox() cannot be invoked directly, please use 'model.pages.createLoginIdTextBox()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "footerWidget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "leftWidget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "rightWidget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "firstWidget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "secondWidget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widget", false);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, LoginIdTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, LoginIdTextBox, "widgets", true);
        }
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LoginIdTextBox);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    LoginIdTextBox.structureTypeName = "Pages$LoginIdTextBox";
    LoginIdTextBox.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.LoginIdTextBox = LoginIdTextBox;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sign-out-button relevant section in reference guide}
     *
     * In version 7.1.0: deleted
     */
    class LogoutButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new LogoutButton() cannot be invoked directly, please use 'model.pages.createLogoutButton()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.2
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { start: "6.7.0", end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "7.0.2" });
            return internal.instancehelpers.createElement(container, LogoutButton, "widgets", true);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, LogoutButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, LogoutButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, LogoutButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, LogoutButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Sign out";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Afmelden";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        }
    }
    LogoutButton.structureTypeName = "Pages$LogoutButton";
    LogoutButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "7.1.0",
        "deletionMessage": "Use an ActionButton with SignOutClientAction instead"
    }, internal.StructureType.Element);
    pages.LogoutButton = LogoutButton;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class MasterDetail extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__master = new internal.PartProperty(MasterDetail, this, "master", null, true);
            /** @internal */
            this.__detail = new internal.PartProperty(MasterDetail, this, "detail", null, true);
            if (arguments.length < 4) {
                throw new Error("new MasterDetail() cannot be invoked directly, please use 'model.pages.createMasterDetail()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        get master() { return this.__master.get(); }
        set master(newValue) { this.__master.set(newValue); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         */
        get detail() { return this.__detail.get(); }
        set detail(newValue) { this.__detail.set(newValue); }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "footerWidget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "leftWidget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "rightWidget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "firstWidget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "secondWidget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widget", false);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, MasterDetail.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetail, "widgets", true);
        }
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MasterDetail);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.detail = MasterDetailDetailRegion.create(this.model);
            this.master = MasterDetailMasterRegion.create(this.model);
        }
    }
    MasterDetail.structureTypeName = "Pages$MasterDetail";
    MasterDetail.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "properties": {
            "master": {
                "required": {
                    "currentValue": true
                }
            },
            "detail": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pages.MasterDetail = MasterDetail;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class MasterDetailRegion extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widget = new internal.PartProperty(MasterDetailRegion, this, "widget", null, false);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(MasterDetailRegion, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(MasterDetailRegion, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MasterDetailRegion() cannot be invoked directly, please use 'model.pages.createMasterDetailRegion()'");
            }
        }
        get containerAsMasterDetail() { return super.getContainerAs(MasterDetail); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    MasterDetailRegion.structureTypeName = "Pages$MasterDetailRegion";
    MasterDetailRegion.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pages.MasterDetailRegion = MasterDetailRegion;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class MasterDetailDetailRegion extends MasterDetailRegion {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__responsiveWeight = new internal.PrimitiveProperty(MasterDetailDetailRegion, this, "responsiveWeight", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__tabletWeight = new internal.PrimitiveProperty(MasterDetailDetailRegion, this, "tabletWeight", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__title = new internal.PartProperty(MasterDetailDetailRegion, this, "title", null, true);
            if (arguments.length < 4) {
                throw new Error("new MasterDetailDetailRegion() cannot be invoked directly, please use 'model.pages.createMasterDetailDetailRegion()'");
            }
        }
        get containerAsMasterDetail() { return super.getContainerAs(MasterDetail); }
        get responsiveWeight() { return this.__responsiveWeight.get(); }
        set responsiveWeight(newValue) { this.__responsiveWeight.set(newValue); }
        get tabletWeight() { return this.__tabletWeight.get(); }
        set tabletWeight(newValue) { this.__tabletWeight.set(newValue); }
        get title() { return this.__title.get(); }
        set title(newValue) { this.__title.set(newValue); }
        /**
         * Creates and returns a new MasterDetailDetailRegion instance in the SDK and on the server.
         * The new MasterDetailDetailRegion will be automatically stored in the 'detail' property
         * of the parent MasterDetail element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, MasterDetailDetailRegion.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetailDetailRegion, "detail", false);
        }
        /**
         * Creates and returns a new MasterDetailDetailRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MasterDetailDetailRegion);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.responsiveWeight = 9;
            this.tabletWeight = 9;
            this.title = texts_1.texts.Text.create(this.model);
        }
    }
    MasterDetailDetailRegion.structureTypeName = "Pages$MasterDetailDetailRegion";
    MasterDetailDetailRegion.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "properties": {
            "title": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pages.MasterDetailDetailRegion = MasterDetailDetailRegion;
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * In version 7.1.0: introduced
     */
    class MasterDetailMasterRegion extends MasterDetailRegion {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__responsiveWeight = new internal.PrimitiveProperty(MasterDetailMasterRegion, this, "responsiveWeight", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__tabletWeight = new internal.PrimitiveProperty(MasterDetailMasterRegion, this, "tabletWeight", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new MasterDetailMasterRegion() cannot be invoked directly, please use 'model.pages.createMasterDetailMasterRegion()'");
            }
        }
        get containerAsMasterDetail() { return super.getContainerAs(MasterDetail); }
        get responsiveWeight() { return this.__responsiveWeight.get(); }
        set responsiveWeight(newValue) { this.__responsiveWeight.set(newValue); }
        get tabletWeight() { return this.__tabletWeight.get(); }
        set tabletWeight(newValue) { this.__tabletWeight.set(newValue); }
        /**
         * Creates and returns a new MasterDetailMasterRegion instance in the SDK and on the server.
         * The new MasterDetailMasterRegion will be automatically stored in the 'master' property
         * of the parent MasterDetail element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, MasterDetailMasterRegion.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MasterDetailMasterRegion, "master", false);
        }
        /**
         * Creates and returns a new MasterDetailMasterRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MasterDetailMasterRegion);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.responsiveWeight = 3;
            this.tabletWeight = 3;
        }
    }
    MasterDetailMasterRegion.structureTypeName = "Pages$MasterDetailMasterRegion";
    MasterDetailMasterRegion.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pages.MasterDetailMasterRegion = MasterDetailMasterRegion;
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-widgets relevant section in reference guide}
     */
    class MenuWidget extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__menuSource = new internal.PartProperty(MenuWidget, this, "menuSource", null, true);
            if (arguments.length < 4) {
                throw new Error("new MenuWidget() cannot be invoked directly, please use 'model.pages.createMenuWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get menuSource() { return this.__menuSource.get(); }
        set menuSource(newValue) { this.__menuSource.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.menuSource = NavigationSource.create(this.model);
        }
    }
    MenuWidget.structureTypeName = "Pages$MenuWidget";
    MenuWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "menuSource": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.MenuWidget = MenuWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-bar relevant section in reference guide}
     */
    class MenuBar extends MenuWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new MenuBar() cannot be invoked directly, please use 'model.pages.createMenuBar()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, MenuBar.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, MenuBar.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, MenuBar, "footerWidget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "leftWidget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "rightWidget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, MenuBar.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "firstWidget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "secondWidget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widgets", true);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, MenuBar.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, MenuBar, "parameterWidget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, MenuBar.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, MenuBar, "reportWidget", false);
        }
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MenuBar);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    MenuBar.structureTypeName = "Pages$MenuBar";
    MenuBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MenuBar = MenuBar;
    class MenuSource extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new MenuSource() cannot be invoked directly, please use 'model.pages.createMenuSource()'");
            }
        }
        get containerAsMenuWidget() { return super.getContainerAs(MenuWidget); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    MenuSource.structureTypeName = "Pages$MenuSource";
    MenuSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MenuSource = MenuSource;
    class MenuDocumentSource extends MenuSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__menu = new internal.ByNameReferenceProperty(MenuDocumentSource, this, "menu", null, "Menus$MenuDocument");
            if (arguments.length < 4) {
                throw new Error("new MenuDocumentSource() cannot be invoked directly, please use 'model.pages.createMenuDocumentSource()'");
            }
        }
        get containerAsMenuWidget() { return super.getContainerAs(MenuWidget); }
        get menu() { return this.__menu.get(); }
        set menu(newValue) { this.__menu.set(newValue); }
        get menuQualifiedName() { return this.__menu.qualifiedName(); }
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * The new MenuDocumentSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, MenuDocumentSource, "menuSource", false);
        }
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MenuDocumentSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    MenuDocumentSource.structureTypeName = "Pages$MenuDocumentSource";
    MenuDocumentSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MenuDocumentSource = MenuDocumentSource;
    class MicroflowClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__microflowSettings = new internal.PartProperty(MicroflowClientAction, this, "microflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new MicroflowClientAction() cannot be invoked directly, please use 'model.pages.createMicroflowClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsDataViewActionButton() { return super.getContainerAs(DataViewActionButton); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        get microflowSettings() { return this.__microflowSettings.get(); }
        set microflowSettings(newValue) { this.__microflowSettings.set(newValue); }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "value", false);
        }
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MicroflowClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.microflowSettings = MicroflowSettings.create(this.model);
        }
    }
    MicroflowClientAction.structureTypeName = "Pages$MicroflowClientAction";
    MicroflowClientAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "microflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.MicroflowClientAction = MicroflowClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/starting-microflows relevant section in reference guide}
     */
    class MicroflowSettings extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__microflow = new internal.ByNameReferenceProperty(MicroflowSettings, this, "microflow", null, "Microflows$Microflow");
            /** @internal */
            this.__useAllPages = new internal.PrimitiveProperty(MicroflowSettings, this, "useAllPages", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__progressBar = new internal.EnumProperty(MicroflowSettings, this, "progressBar", ProgressBarType.None, ProgressBarType);
            /** @internal */
            this.__progressMessage = new internal.PartProperty(MicroflowSettings, this, "progressMessage", null, false);
            /** @internal */
            this.__asynchronous = new internal.PrimitiveProperty(MicroflowSettings, this, "asynchronous", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__formValidations = new internal.EnumProperty(MicroflowSettings, this, "formValidations", FormValidations.All, FormValidations);
            /** @internal */
            this.__confirmationInfo = new internal.PartProperty(MicroflowSettings, this, "confirmationInfo", null, false);
            if (arguments.length < 4) {
                throw new Error("new MicroflowSettings() cannot be invoked directly, please use 'model.pages.createMicroflowSettings()'");
            }
        }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsMicroflowClientAction() { return super.getContainerAs(MicroflowClientAction); }
        get containerAsMicroflowSource() { return super.getContainerAs(MicroflowSource); }
        get containerAsOnClickMicroflow() { return super.getContainerAs(OnClickMicroflow); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsSelectorMicroflowSource() { return super.getContainerAs(SelectorMicroflowSource); }
        get microflow() { return this.__microflow.get(); }
        set microflow(newValue) { this.__microflow.set(newValue); }
        get microflowQualifiedName() { return this.__microflow.qualifiedName(); }
        get useAllPages() { return this.__useAllPages.get(); }
        set useAllPages(newValue) { this.__useAllPages.set(newValue); }
        get progressBar() { return this.__progressBar.get(); }
        set progressBar(newValue) { this.__progressBar.set(newValue); }
        get progressMessage() { return this.__progressMessage.get(); }
        set progressMessage(newValue) { this.__progressMessage.set(newValue); }
        get asynchronous() { return this.__asynchronous.get(); }
        set asynchronous(newValue) { this.__asynchronous.set(newValue); }
        get formValidations() { return this.__formValidations.get(); }
        set formValidations(newValue) { this.__formValidations.set(newValue); }
        get confirmationInfo() { return this.__confirmationInfo.get(); }
        set confirmationInfo(newValue) { this.__confirmationInfo.set(newValue); }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAssociationWidgetUnderOnChangeMicroflowSettings(container) {
            internal.createInVersionCheck(container.model, MicroflowSettings.structureTypeName, { end: "7.12.0" });
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAttributeWidgetUnderOnChangeMicroflowSettings(container) {
            internal.createInVersionCheck(container.model, MicroflowSettings.structureTypeName, { end: "7.12.0" });
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onEnterMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAttributeWidgetUnderOnEnterMicroflowSettings(container) {
            internal.createInVersionCheck(container.model, MicroflowSettings.structureTypeName, { end: "7.12.0" });
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onEnterMicroflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onLeaveMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAttributeWidgetUnderOnLeaveMicroflowSettings(container) {
            internal.createInVersionCheck(container.model, MicroflowSettings.structureTypeName, { end: "7.12.0" });
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onLeaveMicroflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowClientAction element passed as argument.
         */
        static createInMicroflowClientActionUnderMicroflowSettings(container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowSource element passed as argument.
         */
        static createInMicroflowSourceUnderMicroflowSettings(container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent OnClickMicroflow element passed as argument.
         */
        static createInOnClickMicroflowUnderMicroflowSettings(container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInReferenceSetSelectorUnderOnChangeMicroflowSettings(container) {
            internal.createInVersionCheck(container.model, MicroflowSettings.structureTypeName, { end: "7.12.0" });
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'dataSourceMicroflowSettings' property
         * of the parent SelectorMicroflowSource element passed as argument.
         */
        static createInSelectorMicroflowSourceUnderDataSourceMicroflowSettings(container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "dataSourceMicroflowSettings", false);
        }
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MicroflowSettings);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.formValidations = FormValidations.All;
            this.progressBar = ProgressBarType.None;
        }
    }
    MicroflowSettings.structureTypeName = "Pages$MicroflowSettings";
    MicroflowSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MicroflowSettings = MicroflowSettings;
    class MicroflowSource extends DataSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__microflowSettings = new internal.PartProperty(MicroflowSource, this, "microflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new MicroflowSource() cannot be invoked directly, please use 'model.pages.createMicroflowSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get microflowSettings() { return this.__microflowSettings.get(); }
        set microflowSettings(newValue) { this.__microflowSettings.set(newValue); }
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * The new MicroflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, MicroflowSource, "dataSource", false);
        }
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, MicroflowSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.microflowSettings = MicroflowSettings.create(this.model);
        }
    }
    MicroflowSource.structureTypeName = "Pages$MicroflowSource";
    MicroflowSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "microflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.MicroflowSource = MicroflowSource;
    /**
     * In version 7.12.0: introduced
     */
    class NanoflowSource extends DataSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__nanoflow = new internal.ByNameReferenceProperty(NanoflowSource, this, "nanoflow", null, "Microflows$Nanoflow");
            if (arguments.length < 4) {
                throw new Error("new NanoflowSource() cannot be invoked directly, please use 'model.pages.createNanoflowSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        get nanoflow() { return this.__nanoflow.get(); }
        set nanoflow(newValue) { this.__nanoflow.set(newValue); }
        get nanoflowQualifiedName() { return this.__nanoflow.qualifiedName(); }
        /**
         * Creates and returns a new NanoflowSource instance in the SDK and on the server.
         * The new NanoflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.12.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, NanoflowSource.structureTypeName, { start: "7.12.0" });
            return internal.instancehelpers.createElement(container, NanoflowSource, "dataSource", false);
        }
        /**
         * Creates and returns a new NanoflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NanoflowSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NanoflowSource.structureTypeName = "Pages$NanoflowSource";
    NanoflowSource.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.12.0"
    }, internal.StructureType.Element);
    pages.NanoflowSource = NanoflowSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-list relevant section in reference guide}
     */
    class NavigationList extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__items = new internal.PartListProperty(NavigationList, this, "items", []);
            if (arguments.length < 4) {
                throw new Error("new NavigationList() cannot be invoked directly, please use 'model.pages.createNavigationList()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get items() { return this.__items.get(); }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, NavigationList.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, NavigationList.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, NavigationList, "footerWidget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "leftWidget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "rightWidget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, NavigationList.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "firstWidget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "secondWidget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widgets", true);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, NavigationList.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, NavigationList, "parameterWidget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, NavigationList.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, NavigationList, "reportWidget", false);
        }
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NavigationList);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.items.replace([NavigationListItem.create(this.model), NavigationListItem.create(this.model), NavigationListItem.create(this.model)]);
        }
    }
    NavigationList.structureTypeName = "Pages$NavigationList";
    NavigationList.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NavigationList = NavigationList;
    class NavigationListItem extends ActionItem {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widget = new internal.PartProperty(NavigationListItem, this, "widget", null, false);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(NavigationListItem, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(NavigationListItem, this, "style", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__conditionalVisibilitySettings = new internal.PartProperty(NavigationListItem, this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4) {
                throw new Error("new NavigationListItem() cannot be invoked directly, please use 'model.pages.createNavigationListItem()'");
            }
        }
        get containerAsNavigationList() { return super.getContainerAs(NavigationList); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        get conditionalVisibilitySettings() { return this.__conditionalVisibilitySettings.get(); }
        set conditionalVisibilitySettings(newValue) { this.__conditionalVisibilitySettings.set(newValue); }
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * The new NavigationListItem will be automatically stored in the 'items' property
         * of the parent NavigationList element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, NavigationListItem, "items", true);
        }
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NavigationListItem);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NavigationListItem.structureTypeName = "Pages$NavigationListItem";
    NavigationListItem.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NavigationListItem = NavigationListItem;
    class NavigationSource extends MenuSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__profileType = new internal.EnumProperty(NavigationSource, this, "profileType", navigation_1.navigation.ProfileType.Desktop, navigation_1.navigation.ProfileType);
            /** @internal */
            this.__navigationProfile = new internal.ByNameReferenceProperty(NavigationSource, this, "navigationProfile", null, "Navigation$NavigationProfile");
            if (arguments.length < 4) {
                throw new Error("new NavigationSource() cannot be invoked directly, please use 'model.pages.createNavigationSource()'");
            }
        }
        get containerAsMenuWidget() { return super.getContainerAs(MenuWidget); }
        /**
         * In version 7.2.0: deleted
         */
        get profileType() { return this.__profileType.get(); }
        set profileType(newValue) { this.__profileType.set(newValue); }
        /**
         * In version 7.2.0: introduced
         */
        get navigationProfile() { return this.__navigationProfile.get(); }
        set navigationProfile(newValue) { this.__navigationProfile.set(newValue); }
        get navigationProfileQualifiedName() { return this.__navigationProfile.qualifiedName(); }
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * The new NavigationSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, NavigationSource, "menuSource", false);
        }
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NavigationSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__profileType.isAvailable) {
                this.profileType = navigation_1.navigation.ProfileType.Desktop;
            }
        }
    }
    NavigationSource.structureTypeName = "Pages$NavigationSource";
    NavigationSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "profileType": {
                "deleted": "7.2.0",
                "deletionMessage": null
            },
            "navigationProfile": {
                "introduced": "7.2.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.NavigationSource = NavigationSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-tree relevant section in reference guide}
     */
    class NavigationTree extends MenuWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new NavigationTree() cannot be invoked directly, please use 'model.pages.createNavigationTree()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, NavigationTree.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, NavigationTree.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, NavigationTree, "footerWidget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "leftWidget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "rightWidget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, NavigationTree.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "firstWidget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "secondWidget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widgets", true);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, NavigationTree.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, NavigationTree, "parameterWidget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, NavigationTree.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, NavigationTree, "reportWidget", false);
        }
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NavigationTree);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NavigationTree.structureTypeName = "Pages$NavigationTree";
    NavigationTree.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NavigationTree = NavigationTree;
    /**
     * See: {@link https://docs.mendix.com/refguide7/new-button relevant section in reference guide}
     */
    class NewButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__entity = new internal.ByNameReferenceProperty(NewButton, this, "entity", null, "DomainModels$Entity");
            /** @internal */
            this.__entityPath = new internal.PrimitiveProperty(NewButton, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__entityRef = new internal.PartProperty(NewButton, this, "entityRef", null, false);
            /** @internal */
            this.__pageSettings = new internal.PartProperty(NewButton, this, "pageSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new NewButton() cannot be invoked directly, please use 'model.pages.createNewButton()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 6.3.0: deleted
         */
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        get entityQualifiedName() { return this.__entity.qualifiedName(); }
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         * In version 6.3.0: introduced
         */
        get entityPath() { return this.__entityPath.get(); }
        set entityPath(newValue) { this.__entityPath.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get entityRef() { return this.__entityRef.get(); }
        set entityRef(newValue) { this.__entityRef.set(newValue); }
        get pageSettings() { return this.__pageSettings.get(); }
        set pageSettings(newValue) { this.__pageSettings.set(newValue); }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, NewButton.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, NewButton.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, NewButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, NewButton.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, NewButton, "widgets", true);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, NewButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, NewButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, NewButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, NewButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NewButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "New";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Nieuw";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            this.pageSettings = PageSettings.create(this.model);
        }
    }
    NewButton.structureTypeName = "Pages$NewButton";
    NewButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "entity": {
                "deleted": "6.3.0",
                "deletionMessage": "Use 'entityPath' instead."
            },
            "entityPath": {
                "introduced": "6.3.0",
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'entityRef' instead"
            },
            "entityRef": {
                "introduced": "7.11.0"
            },
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.NewButton = NewButton;
    class NoClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new NoClientAction() cannot be invoked directly, please use 'model.pages.createNoClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsDataViewActionButton() { return super.getContainerAs(DataViewActionButton); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, NoClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, NoClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, NoClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, NoClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, NoClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, NoClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, NoClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, NoClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, NoClientAction.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, NoClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, NoClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, NoClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, NoClientAction, "value", false);
        }
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, NoClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    NoClientAction.structureTypeName = "Pages$NoClientAction";
    NoClientAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NoClientAction = NoClientAction;
    class OfflineSchema extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__role = new internal.ByNameReferenceProperty(OfflineSchema, this, "role", null, "Security$UserRole");
            /** @internal */
            this.__tables = new internal.PrimitiveListProperty(OfflineSchema, this, "tables", [], internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new OfflineSchema() cannot be invoked directly, please use 'model.pages.createOfflineSchema()'");
            }
        }
        get role() { return this.__role.get(); }
        set role(newValue) { this.__role.set(newValue); }
        get roleQualifiedName() { return this.__role.qualifiedName(); }
        /**
         * In version 6.4.0: introduced
         */
        get tables() { return this.__tables.get(); }
        /**
         * Creates and returns a new OfflineSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, OfflineSchema);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    OfflineSchema.structureTypeName = "Pages$OfflineSchema";
    OfflineSchema.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "tables": {
                "introduced": "6.4.0"
            }
        }
    }, internal.StructureType.Element);
    pages.OfflineSchema = OfflineSchema;
    class OfflineSchemaFetchInstruction extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__tableName = new internal.PrimitiveProperty(OfflineSchemaFetchInstruction, this, "tableName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__xPath = new internal.PrimitiveProperty(OfflineSchemaFetchInstruction, this, "xPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new OfflineSchemaFetchInstruction() cannot be invoked directly, please use 'model.pages.createOfflineSchemaFetchInstruction()'");
            }
        }
        get tableName() { return this.__tableName.get(); }
        set tableName(newValue) { this.__tableName.set(newValue); }
        get xPath() { return this.__xPath.get(); }
        set xPath(newValue) { this.__xPath.set(newValue); }
        /**
         * Creates and returns a new OfflineSchemaFetchInstruction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, OfflineSchemaFetchInstruction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    OfflineSchemaFetchInstruction.structureTypeName = "Pages$OfflineSchemaFetchInstruction";
    OfflineSchemaFetchInstruction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OfflineSchemaFetchInstruction = OfflineSchemaFetchInstruction;
    class OnClickBehavior extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new OnClickBehavior() cannot be invoked directly, please use 'model.pages.createOnClickBehavior()'");
            }
        }
        get containerAsDynamicImageViewer() { return super.getContainerAs(DynamicImageViewer); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    OnClickBehavior.structureTypeName = "Pages$OnClickBehavior";
    OnClickBehavior.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OnClickBehavior = OnClickBehavior;
    class OnClickEnlarge extends OnClickBehavior {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new OnClickEnlarge() cannot be invoked directly, please use 'model.pages.createOnClickEnlarge()'");
            }
        }
        get containerAsDynamicImageViewer() { return super.getContainerAs(DynamicImageViewer); }
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * The new OnClickEnlarge will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, OnClickEnlarge, "onClickBehavior", false);
        }
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, OnClickEnlarge);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    OnClickEnlarge.structureTypeName = "Pages$OnClickEnlarge";
    OnClickEnlarge.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OnClickEnlarge = OnClickEnlarge;
    class OnClickMicroflow extends OnClickBehavior {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__microflowSettings = new internal.PartProperty(OnClickMicroflow, this, "microflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new OnClickMicroflow() cannot be invoked directly, please use 'model.pages.createOnClickMicroflow()'");
            }
        }
        get containerAsDynamicImageViewer() { return super.getContainerAs(DynamicImageViewer); }
        get microflowSettings() { return this.__microflowSettings.get(); }
        set microflowSettings(newValue) { this.__microflowSettings.set(newValue); }
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * The new OnClickMicroflow will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, OnClickMicroflow, "onClickBehavior", false);
        }
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, OnClickMicroflow);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.microflowSettings = MicroflowSettings.create(this.model);
        }
    }
    OnClickMicroflow.structureTypeName = "Pages$OnClickMicroflow";
    OnClickMicroflow.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "microflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.OnClickMicroflow = OnClickMicroflow;
    class OnClickNothing extends OnClickBehavior {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new OnClickNothing() cannot be invoked directly, please use 'model.pages.createOnClickNothing()'");
            }
        }
        get containerAsDynamicImageViewer() { return super.getContainerAs(DynamicImageViewer); }
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * The new OnClickNothing will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, OnClickNothing, "onClickBehavior", false);
        }
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, OnClickNothing);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    OnClickNothing.structureTypeName = "Pages$OnClickNothing";
    OnClickNothing.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OnClickNothing = OnClickNothing;
    /**
     * In version 7.3.0: introduced
     */
    class OpenLinkClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__linkType = new internal.EnumProperty(OpenLinkClientAction, this, "linkType", LinkType.Web, LinkType);
            /** @internal */
            this.__address = new internal.PartProperty(OpenLinkClientAction, this, "address", null, true);
            if (arguments.length < 4) {
                throw new Error("new OpenLinkClientAction() cannot be invoked directly, please use 'model.pages.createOpenLinkClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        get linkType() { return this.__linkType.get(); }
        set linkType(newValue) { this.__linkType.set(newValue); }
        get address() { return this.__address.get(); }
        set address(newValue) { this.__address.set(newValue); }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInMenuItemUnderAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.3.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "action", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.3.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "action", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInActionItemUnderAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.3.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "action", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInGridActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.3.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "action", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInListViewUnderClickAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.3.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.3.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, OpenLinkClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, OpenLinkClientAction, "value", false);
        }
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, OpenLinkClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.address = StaticOrDynamicString.create(this.model);
            this.linkType = LinkType.Web;
        }
    }
    OpenLinkClientAction.structureTypeName = "Pages$OpenLinkClientAction";
    OpenLinkClientAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.3.0",
        "properties": {
            "address": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.OpenLinkClientAction = OpenLinkClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
     */
    class Page extends FormBase {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__layoutCall = new internal.PartProperty(Page, this, "layoutCall", null, true);
            /** @internal */
            this.__title = new internal.PartProperty(Page, this, "title", null, true);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(Page, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(Page, this, "style", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__allowedRoles = new internal.ByNameReferenceListProperty(Page, this, "allowedRoles", [], "Security$ModuleRole");
            /** @internal */
            this.__popupCloseAction = new internal.PrimitiveProperty(Page, this, "popupCloseAction", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__popupWidth = new internal.PrimitiveProperty(Page, this, "popupWidth", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__popupHeight = new internal.PrimitiveProperty(Page, this, "popupHeight", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__popupResizable = new internal.PrimitiveProperty(Page, this, "popupResizable", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__markAsUsed = new internal.PrimitiveProperty(Page, this, "markAsUsed", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__url = new internal.PrimitiveProperty(Page, this, "url", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get layoutCall() { return this.__layoutCall.get(); }
        set layoutCall(newValue) { this.__layoutCall.set(newValue); }
        get title() { return this.__title.get(); }
        set title(newValue) { this.__title.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        get allowedRoles() { return this.__allowedRoles.get(); }
        get allowedRolesQualifiedNames() { return this.__allowedRoles.qualifiedNames(); }
        /**
         * In version 6.7.0: introduced
         */
        get popupCloseAction() { return this.__popupCloseAction.get(); }
        set popupCloseAction(newValue) { this.__popupCloseAction.set(newValue); }
        get popupWidth() { return this.__popupWidth.get(); }
        set popupWidth(newValue) { this.__popupWidth.set(newValue); }
        get popupHeight() { return this.__popupHeight.get(); }
        set popupHeight(newValue) { this.__popupHeight.set(newValue); }
        get popupResizable() { return this.__popupResizable.get(); }
        set popupResizable(newValue) { this.__popupResizable.set(newValue); }
        get markAsUsed() { return this.__markAsUsed.get(); }
        set markAsUsed(newValue) { this.__markAsUsed.set(newValue); }
        /**
         * In version 6.7.0: introduced
         */
        get url() { return this.__url.get(); }
        set url(newValue) { this.__url.set(newValue); }
        /**
         * Creates a new Page unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container) {
            return internal.instancehelpers.createUnit(container, Page);
        }
        /** @internal */
        _isByNameReferrable() { return true; }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.layoutCall = LayoutCall.create(this.model);
            this.popupResizable = true;
            this.title = ((text) => {
                text.translations.replace([((translation) => {
                        translation.languageCode = "en_US";
                        translation.text = "Page Title";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        }
    }
    Page.structureTypeName = "Pages$Page";
    Page.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "layoutCall": {
                "required": {
                    "currentValue": true
                }
            },
            "title": {
                "required": {
                    "currentValue": true
                }
            },
            "popupCloseAction": {
                "introduced": "6.7.0"
            },
            "url": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.ModelUnit);
    pages.Page = Page;
    class PageClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__pageSettings = new internal.PartProperty(PageClientAction, this, "pageSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new PageClientAction() cannot be invoked directly, please use 'model.pages.createPageClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsDataViewActionButton() { return super.getContainerAs(DataViewActionButton); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        get pageSettings() { return this.__pageSettings.get(); }
        set pageSettings(newValue) { this.__pageSettings.set(newValue); }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, PageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, PageClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, PageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, PageClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, PageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, PageClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, PageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, PageClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, PageClientAction.structureTypeName, { end: "6.6.0" });
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, PageClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, PageClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, PageClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, PageClientAction, "value", false);
        }
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PageClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.pageSettings = PageSettings.create(this.model);
        }
    }
    PageClientAction.structureTypeName = "Pages$PageClientAction";
    PageClientAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.PageClientAction = PageClientAction;
    class PageForSpecialization extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__entity = new internal.ByNameReferenceProperty(PageForSpecialization, this, "entity", null, "DomainModels$Entity");
            /** @internal */
            this.__pageSettings = new internal.PartProperty(PageForSpecialization, this, "pageSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new PageForSpecialization() cannot be invoked directly, please use 'model.pages.createPageForSpecialization()'");
            }
        }
        get containerAsGridEditButton() { return super.getContainerAs(GridEditButton); }
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        get entityQualifiedName() { return this.__entity.qualifiedName(); }
        get pageSettings() { return this.__pageSettings.get(); }
        set pageSettings(newValue) { this.__pageSettings.set(newValue); }
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
         * of the parent GridEditButton element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, PageForSpecialization, "pagesForSpecializations", true);
        }
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PageForSpecialization);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.pageSettings = PageSettings.create(this.model);
        }
    }
    PageForSpecialization.structureTypeName = "Pages$PageForSpecialization";
    PageForSpecialization.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "entity": {
                "required": {
                    "currentValue": true
                }
            },
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.PageForSpecialization = PageForSpecialization;
    /**
     * See: {@link https://docs.mendix.com/refguide7/opening-pages relevant section in reference guide}
     */
    class PageSettings extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__page = new internal.ByNameReferenceProperty(PageSettings, this, "page", null, "Pages$Page");
            /** @internal */
            this.__formTitle = new internal.PartProperty(PageSettings, this, "formTitle", null, false);
            /** @internal */
            this.__location = new internal.EnumProperty(PageSettings, this, "location", FormLocation.Popup, FormLocation);
            if (arguments.length < 4) {
                throw new Error("new PageSettings() cannot be invoked directly, please use 'model.pages.createPageSettings()'");
            }
        }
        get containerAsShowPageAction() { return super.getContainerAs(microflows_1.microflows.ShowPageAction); }
        get containerAsNavigationProfile() { return super.getContainerAs(navigation_1.navigation.NavigationProfile); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsDataGridAddButton() { return super.getContainerAs(DataGridAddButton); }
        get containerAsGridEditButton() { return super.getContainerAs(GridEditButton); }
        get containerAsGridNewButton() { return super.getContainerAs(GridNewButton); }
        get containerAsNewButton() { return super.getContainerAs(NewButton); }
        get containerAsPageClientAction() { return super.getContainerAs(PageClientAction); }
        get containerAsPageForSpecialization() { return super.getContainerAs(PageForSpecialization); }
        get containerAsReferenceSelector() { return super.getContainerAs(ReferenceSelector); }
        get page() { return this.__page.get(); }
        set page(newValue) { this.__page.set(newValue); }
        get pageQualifiedName() { return this.__page.qualifiedName(); }
        get formTitle() { return this.__formTitle.get(); }
        set formTitle(newValue) { this.__formTitle.set(newValue); }
        get location() { return this.__location.get(); }
        set location(newValue) { this.__location.set(newValue); }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent microflows.ShowPageAction element passed as argument.
         */
        static createInShowPageActionUnderPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'loginPageSettings' property
         * of the parent navigation.NavigationProfile element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInNavigationProfileUnderLoginPageSettings(container) {
            internal.createInVersionCheck(container.model, PageSettings.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PageSettings, "loginPageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'selectPageSettings' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createInAssociationWidgetUnderSelectPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "selectPageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent DataGridAddButton element passed as argument.
         */
        static createInDataGridAddButtonUnderPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridEditButton element passed as argument.
         */
        static createInGridEditButtonUnderPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridNewButton element passed as argument.
         */
        static createInGridNewButtonUnderPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent NewButton element passed as argument.
         */
        static createInNewButtonUnderPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageClientAction element passed as argument.
         */
        static createInPageClientActionUnderPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageForSpecialization element passed as argument.
         */
        static createInPageForSpecializationUnderPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'gotoPageSettings' property
         * of the parent ReferenceSelector element passed as argument.
         */
        static createInReferenceSelectorUnderGotoPageSettings(container) {
            return internal.instancehelpers.createElement(container, PageSettings, "gotoPageSettings", false);
        }
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PageSettings);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.location = FormLocation.Popup;
        }
    }
    PageSettings.structureTypeName = "Pages$PageSettings";
    PageSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.PageSettings = PageSettings;
    /**
     * See: {@link https://docs.mendix.com/refguide7/page-template relevant section in reference guide}
     *
     * In version 7.7.0: introduced
     */
    class PageTemplate extends TemplateFormBase {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__type = new internal.EnumProperty(PageTemplate, this, "type", PageTemplateType.Standard, PageTemplateType);
            /** @internal */
            this.__layoutCall = new internal.PartProperty(PageTemplate, this, "layoutCall", null, true);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(PageTemplate, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(PageTemplate, this, "style", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get type() { return this.__type.get(); }
        set type(newValue) { this.__type.set(newValue); }
        get layoutCall() { return this.__layoutCall.get(); }
        set layoutCall(newValue) { this.__layoutCall.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        /**
         * Creates a new PageTemplate unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container) {
            return internal.instancehelpers.createUnit(container, PageTemplate);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.layoutCall = LayoutCall.create(this.model);
            this.type = PageTemplateType.Standard;
        }
    }
    PageTemplate.structureTypeName = "Pages$PageTemplate";
    PageTemplate.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.7.0",
        "properties": {
            "layoutCall": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.ModelUnit);
    pages.PageTemplate = PageTemplate;
    /**
     * See: {@link https://docs.mendix.com/refguide7/password-text-box relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class PasswordTextBox extends LoginTextBox {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new PasswordTextBox() cannot be invoked directly, please use 'model.pages.createPasswordTextBox()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "footerWidget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "leftWidget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "rightWidget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "firstWidget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "secondWidget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widget", false);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, PasswordTextBox.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, PasswordTextBox, "widgets", true);
        }
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, PasswordTextBox);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    PasswordTextBox.structureTypeName = "Pages$PasswordTextBox";
    PasswordTextBox.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.PasswordTextBox = PasswordTextBox;
    /**
     * See: {@link https://docs.mendix.com/refguide7/placeholder relevant section in reference guide}
     */
    class Placeholder extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new Placeholder() cannot be invoked directly, please use 'model.pages.createPlaceholder()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, Placeholder.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, Placeholder.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, Placeholder, "footerWidget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "leftWidget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "rightWidget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, Placeholder.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "firstWidget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "secondWidget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widgets", true);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, Placeholder.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Placeholder, "parameterWidget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, Placeholder.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Placeholder, "reportWidget", false);
        }
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, Placeholder);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    Placeholder.structureTypeName = "Pages$Placeholder";
    Placeholder.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Placeholder = Placeholder;
    /**
     * See: {@link https://docs.mendix.com/refguide7/radio-buttons relevant section in reference guide}
     */
    class RadioButtonGroup extends AttributeWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__renderHorizontal = new internal.PrimitiveProperty(RadioButtonGroup, this, "renderHorizontal", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new RadioButtonGroup() cannot be invoked directly, please use 'model.pages.createRadioButtonGroup()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get renderHorizontal() { return this.__renderHorizontal.get(); }
        set renderHorizontal(newValue) { this.__renderHorizontal.set(newValue); }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "footerWidget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "leftWidget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "rightWidget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "firstWidget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "secondWidget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widgets", true);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "parameterWidget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "reportWidget", false);
        }
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, RadioButtonGroup);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.renderHorizontal = true;
        }
    }
    RadioButtonGroup.structureTypeName = "Pages$RadioButtonGroup";
    RadioButtonGroup.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.RadioButtonGroup = RadioButtonGroup;
    /**
     * See: {@link https://docs.mendix.com/refguide7/range-search-field relevant section in reference guide}
     */
    class RangeSearchField extends SearchField {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__lowerBound = new internal.PrimitiveProperty(RangeSearchField, this, "lowerBound", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__upperBound = new internal.PrimitiveProperty(RangeSearchField, this, "upperBound", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__lowerBoundRef = new internal.PartProperty(RangeSearchField, this, "lowerBoundRef", null, false);
            /** @internal */
            this.__upperBoundRef = new internal.PartProperty(RangeSearchField, this, "upperBoundRef", null, false);
            /** @internal */
            this.__includeLower = new internal.PrimitiveProperty(RangeSearchField, this, "includeLower", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__includeUpper = new internal.PrimitiveProperty(RangeSearchField, this, "includeUpper", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new RangeSearchField() cannot be invoked directly, please use 'model.pages.createRangeSearchField()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get lowerBound() { return this.__lowerBound.get(); }
        set lowerBound(newValue) { this.__lowerBound.set(newValue); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get upperBound() { return this.__upperBound.get(); }
        set upperBound(newValue) { this.__upperBound.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get lowerBoundRef() { return this.__lowerBoundRef.get(); }
        set lowerBoundRef(newValue) { this.__lowerBoundRef.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get upperBoundRef() { return this.__upperBoundRef.get(); }
        set upperBoundRef(newValue) { this.__upperBoundRef.set(newValue); }
        get includeLower() { return this.__includeLower.get(); }
        set includeLower(newValue) { this.__includeLower.set(newValue); }
        get includeUpper() { return this.__includeUpper.get(); }
        set includeUpper(newValue) { this.__includeUpper.set(newValue); }
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * The new RangeSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, RangeSearchField, "items", true);
        }
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, RangeSearchField);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    RangeSearchField.structureTypeName = "Pages$RangeSearchField";
    RangeSearchField.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "lowerBound": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'lowerBoundRef' instead"
            },
            "upperBound": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'upperBoundRef' instead"
            },
            "lowerBoundRef": {
                "introduced": "7.11.0"
            },
            "upperBoundRef": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.RangeSearchField = RangeSearchField;
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-selector relevant section in reference guide}
     */
    class ReferenceSelector extends AssociationWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__required = new internal.PrimitiveProperty(ReferenceSelector, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__requiredMessage = new internal.PartProperty(ReferenceSelector, this, "requiredMessage", null, true);
            /** @internal */
            this.__validation = new internal.PartProperty(ReferenceSelector, this, "validation", null, true);
            /** @internal */
            this.__renderMode = new internal.EnumProperty(ReferenceSelector, this, "renderMode", ReferenceSelectorRenderModeType.DropDown, ReferenceSelectorRenderModeType);
            /** @internal */
            this.__gotoPageSettings = new internal.PartProperty(ReferenceSelector, this, "gotoPageSettings", null, true);
            /** @internal */
            this.__formattingInfo = new internal.PartProperty(ReferenceSelector, this, "formattingInfo", null, true);
            /** @internal */
            this.__emptyOptionCaption = new internal.PartProperty(ReferenceSelector, this, "emptyOptionCaption", null, true);
            if (arguments.length < 4) {
                throw new Error("new ReferenceSelector() cannot be invoked directly, please use 'model.pages.createReferenceSelector()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 7.6.0: deleted
         */
        get required() { return this.__required.get(); }
        set required(newValue) { this.__required.set(newValue); }
        /**
         * In version 7.6.0: deleted
         */
        get requiredMessage() { return this.__requiredMessage.get(); }
        set requiredMessage(newValue) { this.__requiredMessage.set(newValue); }
        /**
         * In version 7.6.0: introduced
         */
        get validation() { return this.__validation.get(); }
        set validation(newValue) { this.__validation.set(newValue); }
        get renderMode() { return this.__renderMode.get(); }
        set renderMode(newValue) { this.__renderMode.set(newValue); }
        get gotoPageSettings() { return this.__gotoPageSettings.get(); }
        set gotoPageSettings(newValue) { this.__gotoPageSettings.set(newValue); }
        get formattingInfo() { return this.__formattingInfo.get(); }
        set formattingInfo(newValue) { this.__formattingInfo.set(newValue); }
        /**
         * In version 7.2.0: introduced
         */
        get emptyOptionCaption() { return this.__emptyOptionCaption.get(); }
        set emptyOptionCaption(newValue) { this.__emptyOptionCaption.set(newValue); }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ReferenceSelector, "footerWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "leftWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "rightWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "firstWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "secondWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widgets", true);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ReferenceSelector, "parameterWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ReferenceSelector, "reportWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ReferenceSelector);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__emptyOptionCaption.isAvailable) {
                this.emptyOptionCaption = texts_1.texts.Text.create(this.model);
            }
            this.formattingInfo = FormattingInfo.create(this.model);
            this.gotoPageSettings = PageSettings.create(this.model);
            this.renderMode = ReferenceSelectorRenderModeType.DropDown;
            if (this.__requiredMessage.isAvailable) {
                this.requiredMessage = texts_1.texts.Text.create(this.model);
            }
            if (this.__validation.isAvailable) {
                this.validation = WidgetValidation.create(this.model);
            }
        }
    }
    ReferenceSelector.structureTypeName = "Pages$ReferenceSelector";
    ReferenceSelector.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "required": {
                "deleted": "7.6.0",
                "deletionMessage": "Use validation property instead"
            },
            "requiredMessage": {
                "deleted": "7.6.0",
                "deletionMessage": "Use validation property instead",
                "required": {
                    "currentValue": true
                }
            },
            "validation": {
                "introduced": "7.6.0",
                "required": {
                    "currentValue": true
                }
            },
            "gotoPageSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            },
            "emptyOptionCaption": {
                "introduced": "7.2.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ReferenceSelector = ReferenceSelector;
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-set-selector relevant section in reference guide}
     */
    class ReferenceSetSelector extends ColumnGrid {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__onChangeMicroflowSettings = new internal.PartProperty(ReferenceSetSelector, this, "onChangeMicroflowSettings", null, true);
            /** @internal */
            this.__onChangeAction = new internal.PartProperty(ReferenceSetSelector, this, "onChangeAction", null, true);
            /** @internal */
            this.__constrainedBy = new internal.PrimitiveListProperty(ReferenceSetSelector, this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__constrainedByRefs = new internal.PartListProperty(ReferenceSetSelector, this, "constrainedByRefs", []);
            /** @internal */
            this.__xPathConstraint = new internal.PrimitiveProperty(ReferenceSetSelector, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__removeAllFromContext = new internal.PrimitiveProperty(ReferenceSetSelector, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__removeFromContextEntities = new internal.ByNameReferenceListProperty(ReferenceSetSelector, this, "removeFromContextEntities", [], "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new ReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createReferenceSetSelector()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 7.13.0: deleted
         */
        get onChangeMicroflowSettings() { return this.__onChangeMicroflowSettings.get(); }
        set onChangeMicroflowSettings(newValue) { this.__onChangeMicroflowSettings.set(newValue); }
        /**
         * In version 7.13.0: introduced
         */
        get onChangeAction() { return this.__onChangeAction.get(); }
        set onChangeAction(newValue) { this.__onChangeAction.set(newValue); }
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         */
        get constrainedBy() { return this.__constrainedBy.get(); }
        /**
         * In version 7.11.0: introduced
         */
        get constrainedByRefs() { return this.__constrainedByRefs.get(); }
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint() { return this.__xPathConstraint.get(); }
        set xPathConstraint(newValue) { this.__xPathConstraint.set(newValue); }
        get removeAllFromContext() { return this.__removeAllFromContext.get(); }
        set removeAllFromContext(newValue) { this.__removeAllFromContext.set(newValue); }
        get removeFromContextEntities() { return this.__removeFromContextEntities.get(); }
        get removeFromContextEntitiesQualifiedNames() { return this.__removeFromContextEntities.qualifiedNames(); }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "footerWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "leftWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "rightWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "firstWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "secondWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widgets", true);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "parameterWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "reportWidget", false);
        }
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ReferenceSetSelector);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.dataSource = ReferenceSetSource.create(this.model);
            if (this.__onChangeAction.isAvailable) {
                this.onChangeAction = NoClientAction.create(this.model);
            }
            if (this.__onChangeMicroflowSettings.isAvailable) {
                this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
            }
        }
    }
    ReferenceSetSelector.structureTypeName = "Pages$ReferenceSetSelector";
    ReferenceSetSelector.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "onChangeMicroflowSettings": {
                "deleted": "7.13.0",
                "deletionMessage": "Use property 'onChangeAction' instead",
                "required": {
                    "currentValue": true
                }
            },
            "onChangeAction": {
                "introduced": "7.13.0",
                "required": {
                    "currentValue": true
                }
            },
            "constrainedBy": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'constrainedByRefs' instead"
            },
            "constrainedByRefs": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.ReferenceSetSelector = ReferenceSetSelector;
    class ReferenceSetSource extends GridBaseSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ReferenceSetSource() cannot be invoked directly, please use 'model.pages.createReferenceSetSource()'");
            }
        }
        get containerAsEntityWidget() { return super.getContainerAs(EntityWidget); }
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSource, "dataSource", false);
        }
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ReferenceSetSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ReferenceSetSource.structureTypeName = "Pages$ReferenceSetSource";
    ReferenceSetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ReferenceSetSource = ReferenceSetSource;
    /**
     * In version 7.12.0: introduced
     */
    class RetrievalQuery extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__queryId = new internal.PrimitiveProperty(RetrievalQuery, this, "queryId", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__allowedUserRoles = new internal.ByNameReferenceListProperty(RetrievalQuery, this, "allowedUserRoles", [], "Security$UserRole");
            /** @internal */
            this.__schemaId = new internal.PrimitiveProperty(RetrievalQuery, this, "schemaId", "", internal.PrimitiveTypeEnum.Guid);
            /** @internal */
            this.__xPath = new internal.PrimitiveProperty(RetrievalQuery, this, "xPath", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__pageName = new internal.PrimitiveProperty(RetrievalQuery, this, "pageName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new RetrievalQuery() cannot be invoked directly, please use 'model.pages.createRetrievalQuery()'");
            }
        }
        get queryId() { return this.__queryId.get(); }
        set queryId(newValue) { this.__queryId.set(newValue); }
        get allowedUserRoles() { return this.__allowedUserRoles.get(); }
        get allowedUserRolesQualifiedNames() { return this.__allowedUserRoles.qualifiedNames(); }
        get schemaId() { return this.__schemaId.get(); }
        set schemaId(newValue) { this.__schemaId.set(newValue); }
        get xPath() { return this.__xPath.get(); }
        set xPath(newValue) { this.__xPath.set(newValue); }
        /**
         * In version 7.14.0: introduced
         */
        get pageName() { return this.__pageName.get(); }
        set pageName(newValue) { this.__pageName.set(newValue); }
        /**
         * Creates and returns a new RetrievalQuery instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, RetrievalQuery);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.schemaId = utils_1.utils.randomUuid();
        }
    }
    RetrievalQuery.structureTypeName = "Pages$RetrievalQuery";
    RetrievalQuery.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.12.0",
        "properties": {
            "pageName": {
                "introduced": "7.14.0"
            }
        }
    }, internal.StructureType.Element);
    pages.RetrievalQuery = RetrievalQuery;
    /**
     * In version 6.2.0: introduced
     */
    class RetrievalSchema extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__usedAttributes = new internal.PrimitiveListProperty(RetrievalSchema, this, "usedAttributes", [], internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__usedAssociations = new internal.PrimitiveListProperty(RetrievalSchema, this, "usedAssociations", [], internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__widgetName = new internal.PrimitiveProperty(RetrievalSchema, this, "widgetName", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__entity = new internal.PrimitiveProperty(RetrievalSchema, this, "entity", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new RetrievalSchema() cannot be invoked directly, please use 'model.pages.createRetrievalSchema()'");
            }
        }
        /**
         * In version 7.2.0: deleted
         */
        get usedAttributes() { return this.__usedAttributes.get(); }
        /**
         * In version 7.2.0: introduced
         */
        get usedAssociations() { return this.__usedAssociations.get(); }
        /**
         * In version 7.14.0: introduced
         */
        get widgetName() { return this.__widgetName.get(); }
        set widgetName(newValue) { this.__widgetName.set(newValue); }
        /**
         * In version 7.4.0: deleted
         */
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        /**
         * Creates and returns a new RetrievalSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, RetrievalSchema);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    RetrievalSchema.structureTypeName = "Pages$RetrievalSchema";
    RetrievalSchema.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.2.0",
        "properties": {
            "usedAttributes": {
                "deleted": "7.2.0",
                "deletionMessage": null
            },
            "usedAssociations": {
                "introduced": "7.2.0"
            },
            "widgetName": {
                "introduced": "7.14.0"
            },
            "entity": {
                "deleted": "7.4.0",
                "deletionMessage": null
            }
        }
    }, internal.StructureType.Element);
    pages.RetrievalSchema = RetrievalSchema;
    /**
     * See: {@link https://docs.mendix.com/refguide7/save-button relevant section in reference guide}
     *
     * In version 7.0.2: deleted
     */
    class SaveButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__syncAutomatically = new internal.PrimitiveProperty(SaveButton, this, "syncAutomatically", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__closePage = new internal.PrimitiveProperty(SaveButton, this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SaveButton() cannot be invoked directly, please use 'model.pages.createSaveButton()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 6.6.0: introduced
         */
        get syncAutomatically() { return this.__syncAutomatically.get(); }
        set syncAutomatically(newValue) { this.__syncAutomatically.set(newValue); }
        /**
         * In version 6.7.0: introduced
         */
        get closePage() { return this.__closePage.get(); }
        set closePage(newValue) { this.__closePage.set(newValue); }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { start: "6.7.0", end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SaveButton, "widgets", true);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SaveButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, SaveButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SaveButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SaveButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Save";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Opslaan";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            if (this.__closePage.isAvailable) {
                this.closePage = true;
            }
        }
    }
    SaveButton.structureTypeName = "Pages$SaveButton";
    SaveButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "7.0.2",
        "deletionMessage": "Use an ActionButton with SaveChangesClientAction instead",
        "properties": {
            "syncAutomatically": {
                "introduced": "6.6.0"
            },
            "closePage": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.Element);
    pages.SaveButton = SaveButton;
    /**
     * In version 7.0.2: introduced
     */
    class SaveChangesClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__syncAutomatically = new internal.PrimitiveProperty(SaveChangesClientAction, this, "syncAutomatically", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__closePage = new internal.PrimitiveProperty(SaveChangesClientAction, this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SaveChangesClientAction() cannot be invoked directly, please use 'model.pages.createSaveChangesClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        get syncAutomatically() { return this.__syncAutomatically.get(); }
        set syncAutomatically(newValue) { this.__syncAutomatically.set(newValue); }
        get closePage() { return this.__closePage.get(); }
        set closePage(newValue) { this.__closePage.set(newValue); }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "action", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, SaveChangesClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, SaveChangesClientAction, "value", false);
        }
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SaveChangesClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.closePage = true;
        }
    }
    SaveChangesClientAction.structureTypeName = "Pages$SaveChangesClientAction";
    SaveChangesClientAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.SaveChangesClientAction = SaveChangesClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
     */
    class ScrollContainer extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__center = new internal.PartProperty(ScrollContainer, this, "center", null, true);
            /** @internal */
            this.__left = new internal.PartProperty(ScrollContainer, this, "left", null, false);
            /** @internal */
            this.__right = new internal.PartProperty(ScrollContainer, this, "right", null, false);
            /** @internal */
            this.__top = new internal.PartProperty(ScrollContainer, this, "top", null, false);
            /** @internal */
            this.__bottom = new internal.PartProperty(ScrollContainer, this, "bottom", null, false);
            /** @internal */
            this.__layoutMode = new internal.EnumProperty(ScrollContainer, this, "layoutMode", LayoutModeType.Headline, LayoutModeType);
            /** @internal */
            this.__widthMode = new internal.EnumProperty(ScrollContainer, this, "widthMode", SizeMode.Auto, SizeMode);
            /** @internal */
            this.__width = new internal.PrimitiveProperty(ScrollContainer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__alignment = new internal.EnumProperty(ScrollContainer, this, "alignment", AlignmentEnum.Center, AlignmentEnum);
            /** @internal */
            this.__scrollBehavior = new internal.EnumProperty(ScrollContainer, this, "scrollBehavior", ScrollBehavior.PerRegion, ScrollBehavior);
            if (arguments.length < 4) {
                throw new Error("new ScrollContainer() cannot be invoked directly, please use 'model.pages.createScrollContainer()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get center() { return this.__center.get(); }
        set center(newValue) { this.__center.set(newValue); }
        get left() { return this.__left.get(); }
        set left(newValue) { this.__left.set(newValue); }
        get right() { return this.__right.get(); }
        set right(newValue) { this.__right.set(newValue); }
        get top() { return this.__top.get(); }
        set top(newValue) { this.__top.set(newValue); }
        get bottom() { return this.__bottom.get(); }
        set bottom(newValue) { this.__bottom.set(newValue); }
        get layoutMode() { return this.__layoutMode.get(); }
        set layoutMode(newValue) { this.__layoutMode.set(newValue); }
        get widthMode() { return this.__widthMode.get(); }
        set widthMode(newValue) { this.__widthMode.set(newValue); }
        get width() { return this.__width.get(); }
        set width(newValue) { this.__width.set(newValue); }
        get alignment() { return this.__alignment.get(); }
        set alignment(newValue) { this.__alignment.set(newValue); }
        get scrollBehavior() { return this.__scrollBehavior.get(); }
        set scrollBehavior(newValue) { this.__scrollBehavior.set(newValue); }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, ScrollContainer.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, ScrollContainer.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, ScrollContainer, "footerWidget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "leftWidget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "rightWidget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ScrollContainer.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "firstWidget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "secondWidget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widgets", true);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, ScrollContainer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ScrollContainer, "parameterWidget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, ScrollContainer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, ScrollContainer, "reportWidget", false);
        }
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ScrollContainer);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.alignment = AlignmentEnum.Center;
            this.center = ScrollContainerRegion.create(this.model);
            this.layoutMode = LayoutModeType.Headline;
            this.scrollBehavior = ScrollBehavior.PerRegion;
            this.width = 960;
            this.widthMode = SizeMode.Auto;
        }
    }
    ScrollContainer.structureTypeName = "Pages$ScrollContainer";
    ScrollContainer.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "center": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ScrollContainer = ScrollContainer;
    class ScrollContainerRegion extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widget = new internal.PartProperty(ScrollContainerRegion, this, "widget", null, false);
            /** @internal */
            this.__sizeMode = new internal.EnumProperty(ScrollContainerRegion, this, "sizeMode", SizeMode.Auto, SizeMode);
            /** @internal */
            this.__size = new internal.PrimitiveProperty(ScrollContainerRegion, this, "size", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(ScrollContainerRegion, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(ScrollContainerRegion, this, "style", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__toggleMode = new internal.EnumProperty(ScrollContainerRegion, this, "toggleMode", ToggleMode.None, ToggleMode);
            if (arguments.length < 4) {
                throw new Error("new ScrollContainerRegion() cannot be invoked directly, please use 'model.pages.createScrollContainerRegion()'");
            }
        }
        get containerAsScrollContainer() { return super.getContainerAs(ScrollContainer); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        get sizeMode() { return this.__sizeMode.get(); }
        set sizeMode(newValue) { this.__sizeMode.set(newValue); }
        get size() { return this.__size.get(); }
        set size(newValue) { this.__size.set(newValue); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        /**
         * In version 6.10.0: introduced
         */
        get toggleMode() { return this.__toggleMode.get(); }
        set toggleMode(newValue) { this.__toggleMode.set(newValue); }
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'bottom' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderBottom(container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "bottom", false);
        }
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'center' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderCenter(container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "center", false);
        }
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'left' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderLeft(container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "left", false);
        }
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'right' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderRight(container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "right", false);
        }
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'top' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderTop(container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "top", false);
        }
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ScrollContainerRegion);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.size = 200;
            this.sizeMode = SizeMode.Auto;
            if (this.__toggleMode.isAvailable) {
                this.toggleMode = ToggleMode.None;
            }
        }
    }
    ScrollContainerRegion.structureTypeName = "Pages$ScrollContainerRegion";
    ScrollContainerRegion.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "toggleMode": {
                "introduced": "6.10.0"
            }
        }
    }, internal.StructureType.Element);
    pages.ScrollContainerRegion = ScrollContainerRegion;
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-bar relevant section in reference guide}
     */
    class SearchBar extends ControlBar {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__type = new internal.EnumProperty(SearchBar, this, "type", SearchBarTypeEnum.FoldableClosed, SearchBarTypeEnum);
            /** @internal */
            this.__waitForSearch = new internal.PrimitiveProperty(SearchBar, this, "waitForSearch", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SearchBar() cannot be invoked directly, please use 'model.pages.createSearchBar()'");
            }
        }
        get containerAsGridBaseSource() { return super.getContainerAs(GridBaseSource); }
        get containerAsGridDatabaseSource() { return super.getContainerAs(GridDatabaseSource); }
        get type() { return this.__type.get(); }
        set type(newValue) { this.__type.set(newValue); }
        get waitForSearch() { return this.__waitForSearch.get(); }
        set waitForSearch(newValue) { this.__waitForSearch.set(newValue); }
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridBaseSource element passed as argument.
         */
        static createInGridBaseSourceUnderSearchBar(container) {
            return internal.instancehelpers.createElement(container, SearchBar, "searchBar", false);
        }
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridDatabaseSource element passed as argument.
         */
        static createInGridDatabaseSourceUnderSearchBar(container) {
            return internal.instancehelpers.createElement(container, SearchBar, "searchBar", false);
        }
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SearchBar);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.type = SearchBarTypeEnum.FoldableClosed;
        }
    }
    SearchBar.structureTypeName = "Pages$SearchBar";
    SearchBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SearchBar = SearchBar;
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-button relevant section in reference guide}
     */
    class SelectButton extends GridControlBarButton {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new SelectButton() cannot be invoked directly, please use 'model.pages.createSelectButton()'");
            }
        }
        get containerAsControlBar() { return super.getContainerAs(ControlBar); }
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * The new SelectButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, SelectButton, "items", true);
        }
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SelectButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Select";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Selecteren";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
        }
    }
    SelectButton.structureTypeName = "Pages$SelectButton";
    SelectButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SelectButton = SelectButton;
    class SelectorSource extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new SelectorSource() cannot be invoked directly, please use 'model.pages.createSelectorSource()'");
            }
        }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    SelectorSource.structureTypeName = "Pages$SelectorSource";
    SelectorSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SelectorSource = SelectorSource;
    /**
     * In version 6.1.0: introduced
     */
    class SelectorDatabaseSource extends SelectorSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__databaseConstraints = new internal.PartListProperty(SelectorDatabaseSource, this, "databaseConstraints", []);
            /** @internal */
            this.__sortBar = new internal.PartProperty(SelectorDatabaseSource, this, "sortBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new SelectorDatabaseSource() cannot be invoked directly, please use 'model.pages.createSelectorDatabaseSource()'");
            }
        }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get databaseConstraints() { return this.__databaseConstraints.get(); }
        /**
         * In version 6.2.0: introduced
         */
        get sortBar() { return this.__sortBar.get(); }
        set sortBar(newValue) { this.__sortBar.set(newValue); }
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * The new SelectorDatabaseSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0 and higher
         */
        static createIn(container) {
            internal.createInVersionCheck(container.model, SelectorDatabaseSource.structureTypeName, { start: "6.1.0" });
            return internal.instancehelpers.createElement(container, SelectorDatabaseSource, "selectorSource", false);
        }
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SelectorDatabaseSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__sortBar.isAvailable) {
                this.sortBar = GridSortBar.create(this.model);
            }
        }
    }
    SelectorDatabaseSource.structureTypeName = "Pages$SelectorDatabaseSource";
    SelectorDatabaseSource.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.1.0",
        "properties": {
            "sortBar": {
                "introduced": "6.2.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SelectorDatabaseSource = SelectorDatabaseSource;
    class SelectorMicroflowSource extends SelectorSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__dataSourceMicroflowSettings = new internal.PartProperty(SelectorMicroflowSource, this, "dataSourceMicroflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new SelectorMicroflowSource() cannot be invoked directly, please use 'model.pages.createSelectorMicroflowSource()'");
            }
        }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get dataSourceMicroflowSettings() { return this.__dataSourceMicroflowSettings.get(); }
        set dataSourceMicroflowSettings(newValue) { this.__dataSourceMicroflowSettings.set(newValue); }
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * The new SelectorMicroflowSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, SelectorMicroflowSource, "selectorSource", false);
        }
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SelectorMicroflowSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.dataSourceMicroflowSettings = MicroflowSettings.create(this.model);
        }
    }
    SelectorMicroflowSource.structureTypeName = "Pages$SelectorMicroflowSource";
    SelectorMicroflowSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "dataSourceMicroflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SelectorMicroflowSource = SelectorMicroflowSource;
    class SelectorXPathSource extends SelectorSource {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__sortBar = new internal.PartProperty(SelectorXPathSource, this, "sortBar", null, true);
            /** @internal */
            this.__xPathConstraint = new internal.PrimitiveProperty(SelectorXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__constrainedBy = new internal.PrimitiveListProperty(SelectorXPathSource, this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__constrainedByRefs = new internal.PartListProperty(SelectorXPathSource, this, "constrainedByRefs", []);
            /** @internal */
            this.__applyContext = new internal.PrimitiveProperty(SelectorXPathSource, this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__removeAllFromContext = new internal.PrimitiveProperty(SelectorXPathSource, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__removeFromContextEntities = new internal.ByNameReferenceListProperty(SelectorXPathSource, this, "removeFromContextEntities", [], "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new SelectorXPathSource() cannot be invoked directly, please use 'model.pages.createSelectorXPathSource()'");
            }
        }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get sortBar() { return this.__sortBar.get(); }
        set sortBar(newValue) { this.__sortBar.set(newValue); }
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint() { return this.__xPathConstraint.get(); }
        set xPathConstraint(newValue) { this.__xPathConstraint.set(newValue); }
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         */
        get constrainedBy() { return this.__constrainedBy.get(); }
        /**
         * In version 7.11.0: introduced
         */
        get constrainedByRefs() { return this.__constrainedByRefs.get(); }
        get applyContext() { return this.__applyContext.get(); }
        set applyContext(newValue) { this.__applyContext.set(newValue); }
        get removeAllFromContext() { return this.__removeAllFromContext.get(); }
        set removeAllFromContext(newValue) { this.__removeAllFromContext.set(newValue); }
        get removeFromContextEntities() { return this.__removeFromContextEntities.get(); }
        get removeFromContextEntitiesQualifiedNames() { return this.__removeFromContextEntities.qualifiedNames(); }
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * The new SelectorXPathSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, SelectorXPathSource, "selectorSource", false);
        }
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SelectorXPathSource);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.sortBar = GridSortBar.create(this.model);
        }
    }
    SelectorXPathSource.structureTypeName = "Pages$SelectorXPathSource";
    SelectorXPathSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sortBar": {
                "required": {
                    "currentValue": true
                }
            },
            "constrainedBy": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'constrainedByRefs' instead"
            },
            "constrainedByRefs": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.SelectorXPathSource = SelectorXPathSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sidebar-toggle-button relevant section in reference guide}
     */
    class SidebarToggleButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__region = new internal.EnumProperty(SidebarToggleButton, this, "region", SidebarToggleRegion.Left, SidebarToggleRegion);
            /** @internal */
            this.__mode = new internal.EnumProperty(SidebarToggleButton, this, "mode", SidebarToggleMode.PushContentAside, SidebarToggleMode);
            /** @internal */
            this.__initiallyOpen = new internal.PrimitiveProperty(SidebarToggleButton, this, "initiallyOpen", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SidebarToggleButton() cannot be invoked directly, please use 'model.pages.createSidebarToggleButton()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * In version 6.10.0: deleted
         */
        get region() { return this.__region.get(); }
        set region(newValue) { this.__region.set(newValue); }
        /**
         * In version 6.10.0: deleted
         */
        get mode() { return this.__mode.get(); }
        set mode(newValue) { this.__mode.set(newValue); }
        /**
         * In version 6.10.0: deleted
         */
        get initiallyOpen() { return this.__initiallyOpen.get(); }
        set initiallyOpen(newValue) { this.__initiallyOpen.set(newValue); }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widgets", true);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SidebarToggleButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    return;
                }
                this.caption = ((clientTemplate) => {
                    clientTemplate.template = ((text) => {
                        text.translations.replace([((translation) => {
                                translation.languageCode = "en_US";
                                translation.text = "Toggle";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                                translation.languageCode = "nl_NL";
                                translation.text = "Toggle";
                                return translation;
                            })(texts_1.texts.Translation.create(this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(this.model));
                    return clientTemplate;
                })(ClientTemplate.create(this.model));
            })();
            if (this.__mode.isAvailable) {
                this.mode = SidebarToggleMode.PushContentAside;
            }
            if (this.__region.isAvailable) {
                this.region = SidebarToggleRegion.Left;
            }
        }
    }
    SidebarToggleButton.structureTypeName = "Pages$SidebarToggleButton";
    SidebarToggleButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "region": {
                "deleted": "6.10.0",
                "deletionMessage": null
            },
            "mode": {
                "deleted": "6.10.0",
                "deletionMessage": null
            },
            "initiallyOpen": {
                "deleted": "6.10.0",
                "deletionMessage": null
            }
        }
    }, internal.StructureType.Element);
    pages.SidebarToggleButton = SidebarToggleButton;
    /**
     * In version 7.1.0: introduced
     */
    class SignOutClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new SignOutClientAction() cannot be invoked directly, please use 'model.pages.createSignOutClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMenuItemUnderAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "action", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "action", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInActionItemUnderAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "action", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInGridActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "action", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInListViewUnderClickAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, SignOutClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, SignOutClientAction, "value", false);
        }
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SignOutClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    SignOutClientAction.structureTypeName = "Pages$SignOutClientAction";
    SignOutClientAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.1.0"
    }, internal.StructureType.Element);
    pages.SignOutClientAction = SignOutClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/simple-menu-bar relevant section in reference guide}
     */
    class SimpleMenuBar extends MenuWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__orientation = new internal.EnumProperty(SimpleMenuBar, this, "orientation", SimpleMenuBarOrientation.Horizontal, SimpleMenuBarOrientation);
            if (arguments.length < 4) {
                throw new Error("new SimpleMenuBar() cannot be invoked directly, please use 'model.pages.createSimpleMenuBar()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get orientation() { return this.__orientation.get(); }
        set orientation(newValue) { this.__orientation.set(newValue); }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "footerWidget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "leftWidget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "rightWidget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "firstWidget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "secondWidget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widgets", true);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "parameterWidget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "reportWidget", false);
        }
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SimpleMenuBar);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.orientation = SimpleMenuBarOrientation.Horizontal;
        }
    }
    SimpleMenuBar.structureTypeName = "Pages$SimpleMenuBar";
    SimpleMenuBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SimpleMenuBar = SimpleMenuBar;
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
     */
    class Snippet extends FormBase {
        constructor(model, structureTypeName, id, isPartial, container) {
            super(model, structureTypeName, id, isPartial, container);
            /** @internal */
            this.__entity = new internal.ByNameReferenceProperty(Snippet, this, "entity", null, "DomainModels$Entity");
            /** @internal */
            this.__widget = new internal.PartProperty(Snippet, this, "widget", null, false);
            this._containmentName = "documents";
        }
        get containerAsFolderBase() { return super.getContainerAs(projects_1.projects.FolderBase); }
        get entity() { return this.__entity.get(); }
        set entity(newValue) { this.__entity.set(newValue); }
        get entityQualifiedName() { return this.__entity.qualifiedName(); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates a new Snippet unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container) {
            return internal.instancehelpers.createUnit(container, Snippet);
        }
        /** @internal */
        _isByNameReferrable() { return true; }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    Snippet.structureTypeName = "Pages$Snippet";
    Snippet.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "entity": {
                "public": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.ModelUnit);
    pages.Snippet = Snippet;
    class SnippetCall extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__snippet = new internal.ByNameReferenceProperty(SnippetCall, this, "snippet", null, "Pages$Snippet");
            if (arguments.length < 4) {
                throw new Error("new SnippetCall() cannot be invoked directly, please use 'model.pages.createSnippetCall()'");
            }
        }
        get containerAsSnippetCallWidget() { return super.getContainerAs(SnippetCallWidget); }
        get snippet() { return this.__snippet.get(); }
        set snippet(newValue) { this.__snippet.set(newValue); }
        get snippetQualifiedName() { return this.__snippet.qualifiedName(); }
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * The new SnippetCall will be automatically stored in the 'snippetCall' property
         * of the parent SnippetCallWidget element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, SnippetCall, "snippetCall", false);
        }
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SnippetCall);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    SnippetCall.structureTypeName = "Pages$SnippetCall";
    SnippetCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SnippetCall = SnippetCall;
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet-call relevant section in reference guide}
     */
    class SnippetCallWidget extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__snippetCall = new internal.PartProperty(SnippetCallWidget, this, "snippetCall", null, true);
            if (arguments.length < 4) {
                throw new Error("new SnippetCallWidget() cannot be invoked directly, please use 'model.pages.createSnippetCallWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get snippetCall() { return this.__snippetCall.get(); }
        set snippetCall(newValue) { this.__snippetCall.set(newValue); }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "footerWidget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "leftWidget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "rightWidget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "firstWidget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "secondWidget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widgets", true);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "parameterWidget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "reportWidget", false);
        }
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SnippetCallWidget);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.snippetCall = SnippetCall.create(this.model);
        }
    }
    SnippetCallWidget.structureTypeName = "Pages$SnippetCallWidget";
    SnippetCallWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "snippetCall": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SnippetCallWidget = SnippetCallWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image relevant section in reference guide}
     */
    class StaticImageViewer extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__image = new internal.ByNameReferenceProperty(StaticImageViewer, this, "image", null, "Images$Image");
            /** @internal */
            this.__widthUnit = new internal.EnumProperty(StaticImageViewer, this, "widthUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            /** @internal */
            this.__heightUnit = new internal.EnumProperty(StaticImageViewer, this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            /** @internal */
            this.__width = new internal.PrimitiveProperty(StaticImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__height = new internal.PrimitiveProperty(StaticImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__clickAction = new internal.PartProperty(StaticImageViewer, this, "clickAction", null, true);
            /** @internal */
            this.__responsive = new internal.PrimitiveProperty(StaticImageViewer, this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new StaticImageViewer() cannot be invoked directly, please use 'model.pages.createStaticImageViewer()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get image() { return this.__image.get(); }
        set image(newValue) { this.__image.set(newValue); }
        get imageQualifiedName() { return this.__image.qualifiedName(); }
        get widthUnit() { return this.__widthUnit.get(); }
        set widthUnit(newValue) { this.__widthUnit.set(newValue); }
        get heightUnit() { return this.__heightUnit.get(); }
        set heightUnit(newValue) { this.__heightUnit.set(newValue); }
        get width() { return this.__width.get(); }
        set width(newValue) { this.__width.set(newValue); }
        get height() { return this.__height.get(); }
        set height(newValue) { this.__height.set(newValue); }
        get clickAction() { return this.__clickAction.get(); }
        set clickAction(newValue) { this.__clickAction.set(newValue); }
        get responsive() { return this.__responsive.get(); }
        set responsive(newValue) { this.__responsive.set(newValue); }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, StaticImageViewer, "footerWidget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "leftWidget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "rightWidget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "firstWidget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "secondWidget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widgets", true);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, StaticImageViewer, "parameterWidget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, StaticImageViewer, "reportWidget", false);
        }
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, StaticImageViewer);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.clickAction = NoClientAction.create(this.model);
            this.heightUnit = ImageSizeUnit.Auto;
            this.responsive = true;
            this.widthUnit = ImageSizeUnit.Auto;
        }
    }
    StaticImageViewer.structureTypeName = "Pages$StaticImageViewer";
    StaticImageViewer.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "clickAction": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.StaticImageViewer = StaticImageViewer;
    class StaticOrDynamicString extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__isDynamic = new internal.PrimitiveProperty(StaticOrDynamicString, this, "isDynamic", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__value = new internal.PrimitiveProperty(StaticOrDynamicString, this, "value", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__attribute = new internal.PrimitiveProperty(StaticOrDynamicString, this, "attribute", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__attributeRef = new internal.PartProperty(StaticOrDynamicString, this, "attributeRef", null, false);
            if (arguments.length < 4) {
                throw new Error("new StaticOrDynamicString() cannot be invoked directly, please use 'model.pages.createStaticOrDynamicString()'");
            }
        }
        get containerAsLinkButton() { return super.getContainerAs(LinkButton); }
        get containerAsOpenLinkClientAction() { return super.getContainerAs(OpenLinkClientAction); }
        get isDynamic() { return this.__isDynamic.get(); }
        set isDynamic(newValue) { this.__isDynamic.set(newValue); }
        get value() { return this.__value.get(); }
        set value(newValue) { this.__value.set(newValue); }
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attribute() { return this.__attribute.get(); }
        set attribute(newValue) { this.__attribute.set(newValue); }
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef() { return this.__attributeRef.get(); }
        set attributeRef(newValue) { this.__attributeRef.set(newValue); }
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * The new StaticOrDynamicString will be automatically stored in the 'address' property
         * of the parent LinkButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLinkButtonUnderAddress(container) {
            internal.createInVersionCheck(container.model, StaticOrDynamicString.structureTypeName, { end: "7.2.0" });
            return internal.instancehelpers.createElement(container, StaticOrDynamicString, "address", false);
        }
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * The new StaticOrDynamicString will be automatically stored in the 'address' property
         * of the parent OpenLinkClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInOpenLinkClientActionUnderAddress(container) {
            internal.createInVersionCheck(container.model, StaticOrDynamicString.structureTypeName, { start: "7.3.0" });
            return internal.instancehelpers.createElement(container, StaticOrDynamicString, "address", false);
        }
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, StaticOrDynamicString);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    StaticOrDynamicString.structureTypeName = "Pages$StaticOrDynamicString";
    StaticOrDynamicString.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "attribute": {
                "deleted": "7.11.0",
                "deletionMessage": "Use property 'attributeRef' instead"
            },
            "attributeRef": {
                "introduced": "7.11.0"
            }
        }
    }, internal.StructureType.Element);
    pages.StaticOrDynamicString = StaticOrDynamicString;
    /**
     * In version 7.0.2: deleted
     */
    class SyncButton extends Button {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new SyncButton() cannot be invoked directly, please use 'model.pages.createSyncButton()'");
            }
        }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { start: "6.7.0", end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "footerWidget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "leftWidget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "rightWidget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "firstWidget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "secondWidget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "7.0.1" });
            return internal.instancehelpers.createElement(container, SyncButton, "widgets", true);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SyncButton, "parameterWidget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, SyncButton.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, SyncButton, "reportWidget", false);
        }
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SyncButton);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((clientTemplate) => {
                clientTemplate.template = ((text) => {
                    text.translations.replace([((translation) => {
                            translation.languageCode = "en_US";
                            translation.text = "Synchronize";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model)), ((translation) => {
                            translation.languageCode = "nl_NL";
                            translation.text = "Synchroniseren";
                            return translation;
                        })(texts_1.texts.Translation.create(this.model))]);
                    return text;
                })(texts_1.texts.Text.create(this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        }
    }
    SyncButton.structureTypeName = "Pages$SyncButton";
    SyncButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "7.0.2",
        "deletionMessage": "Use an ActionButton with SyncClientAction instead"
    }, internal.StructureType.Element);
    pages.SyncButton = SyncButton;
    /**
     * In version 7.0.2: introduced
     */
    class SyncClientAction extends ClientAction {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new SyncClientAction() cannot be invoked directly, please use 'model.pages.createSyncClientAction()'");
            }
        }
        get containerAsMenuItem() { return super.getContainerAs(menus_1.menus.MenuItem); }
        get containerAsActionButton() { return super.getContainerAs(ActionButton); }
        get containerAsActionItem() { return super.getContainerAs(ActionItem); }
        get containerAsAssociationWidget() { return super.getContainerAs(AssociationWidget); }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsGridActionButton() { return super.getContainerAs(GridActionButton); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsReferenceSetSelector() { return super.getContainerAs(ReferenceSetSelector); }
        get containerAsStaticImageViewer() { return super.getContainerAs(StaticImageViewer); }
        get containerAsActionValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.ActionValue); }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "action", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "action", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "action", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "onEnterAction", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "onLeaveAction", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "action", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.13.0" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "onChangeAction", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "clickAction", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'value' property
         * of the parent pluginwidgets.ActionValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInActionValueUnderValue(container) {
            internal.createInVersionCheck(container.model, SyncClientAction.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, SyncClientAction, "value", false);
        }
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, SyncClientAction);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    SyncClientAction.structureTypeName = "Pages$SyncClientAction";
    SyncClientAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.SyncClientAction = SyncClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-container relevant section in reference guide}
     */
    class TabContainer extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__tabPages = new internal.PartListProperty(TabContainer, this, "tabPages", []);
            /** @internal */
            this.__defaultPage = new internal.ByIdReferenceProperty(TabContainer, this, "defaultPage", null);
            if (arguments.length < 4) {
                throw new Error("new TabContainer() cannot be invoked directly, please use 'model.pages.createTabContainer()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get tabPages() { return this.__tabPages.get(); }
        get defaultPage() { return this.__defaultPage.get(); }
        set defaultPage(newValue) { this.__defaultPage.set(newValue); }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, TabContainer.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, TabContainer.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, TabContainer, "footerWidget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "leftWidget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "rightWidget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, TabContainer.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "firstWidget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "secondWidget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widgets", true);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, TabContainer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TabContainer, "parameterWidget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, TabContainer.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TabContainer, "reportWidget", false);
        }
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TabContainer);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    TabContainer.structureTypeName = "Pages$TabContainer";
    TabContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TabContainer = TabContainer;
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-page relevant section in reference guide}
     */
    class TabPage extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__name = new internal.PrimitiveProperty(TabPage, this, "name", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__caption = new internal.PartProperty(TabPage, this, "caption", null, true);
            /** @internal */
            this.__refreshOnShow = new internal.PrimitiveProperty(TabPage, this, "refreshOnShow", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__conditionalVisibilitySettings = new internal.PartProperty(TabPage, this, "conditionalVisibilitySettings", null, false);
            /** @internal */
            this.__widget = new internal.PartProperty(TabPage, this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new TabPage() cannot be invoked directly, please use 'model.pages.createTabPage()'");
            }
        }
        get containerAsTabContainer() { return super.getContainerAs(TabContainer); }
        get name() { return this.__name.get(); }
        set name(newValue) { this.__name.set(newValue); }
        get caption() { return this.__caption.get(); }
        set caption(newValue) { this.__caption.set(newValue); }
        get refreshOnShow() { return this.__refreshOnShow.get(); }
        set refreshOnShow(newValue) { this.__refreshOnShow.set(newValue); }
        get conditionalVisibilitySettings() { return this.__conditionalVisibilitySettings.get(); }
        set conditionalVisibilitySettings(newValue) { this.__conditionalVisibilitySettings.set(newValue); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * The new TabPage will be automatically stored in the 'tabPages' property
         * of the parent TabContainer element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, TabPage, "tabPages", true);
        }
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TabPage);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.caption = ((text) => {
                text.translations.replace([((translation) => {
                        translation.languageCode = "en_US";
                        translation.text = "TabPage";
                        return translation;
                    })(texts_1.texts.Translation.create(this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        }
    }
    TabPage.structureTypeName = "Pages$TabPage";
    TabPage.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TabPage = TabPage;
    /**
     * See: {@link https://docs.mendix.com/refguide7/table relevant section in reference guide}
     */
    class Table extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__cells = new internal.PartListProperty(Table, this, "cells", []);
            /** @internal */
            this.__columns = new internal.PartListProperty(Table, this, "columns", []);
            /** @internal */
            this.__widthUnit = new internal.EnumProperty(Table, this, "widthUnit", UnitEnum.Weight, UnitEnum);
            /** @internal */
            this.__rows = new internal.PartListProperty(Table, this, "rows", []);
            if (arguments.length < 4) {
                throw new Error("new Table() cannot be invoked directly, please use 'model.pages.createTable()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get cells() { return this.__cells.get(); }
        get columns() { return this.__columns.get(); }
        get widthUnit() { return this.__widthUnit.get(); }
        set widthUnit(newValue) { this.__widthUnit.set(newValue); }
        get rows() { return this.__rows.get(); }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, Table.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, Table.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, Table, "footerWidget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "leftWidget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "rightWidget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, Table.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "firstWidget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "secondWidget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, Table, "widgets", true);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, Table.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Table, "parameterWidget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, Table.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Table, "reportWidget", false);
        }
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, Table);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.cells.replace([TableCell.create(this.model)]);
                    return;
                }
            })();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.columns.replace([((tableColumn) => {
                            tableColumn.width = 1;
                            return tableColumn;
                        })(TableColumn.create(this.model))]);
                    return;
                }
            })();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.rows.replace([TableRow.create(this.model)]);
                    return;
                }
            })();
            this.widthUnit = UnitEnum.Weight;
        }
    }
    Table.structureTypeName = "Pages$Table";
    Table.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "cells": {},
            "columns": {},
            "rows": {}
        }
    }, internal.StructureType.Element);
    pages.Table = Table;
    class TableCell extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(TableCell, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(TableCell, this, "style", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__isHeader = new internal.PrimitiveProperty(TableCell, this, "isHeader", false, internal.PrimitiveTypeEnum.Boolean);
            /** @internal */
            this.__widget = new internal.PartProperty(TableCell, this, "widget", null, false);
            /** @internal */
            this.__leftColumnIndex = new internal.PrimitiveProperty(TableCell, this, "leftColumnIndex", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__topRowIndex = new internal.PrimitiveProperty(TableCell, this, "topRowIndex", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__width = new internal.PrimitiveProperty(TableCell, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__height = new internal.PrimitiveProperty(TableCell, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TableCell() cannot be invoked directly, please use 'model.pages.createTableCell()'");
            }
        }
        get containerAsTable() { return super.getContainerAs(Table); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        get isHeader() { return this.__isHeader.get(); }
        set isHeader(newValue) { this.__isHeader.set(newValue); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        get leftColumnIndex() { return this.__leftColumnIndex.get(); }
        set leftColumnIndex(newValue) { this.__leftColumnIndex.set(newValue); }
        get topRowIndex() { return this.__topRowIndex.get(); }
        set topRowIndex(newValue) { this.__topRowIndex.set(newValue); }
        get width() { return this.__width.get(); }
        set width(newValue) { this.__width.set(newValue); }
        get height() { return this.__height.get(); }
        set height(newValue) { this.__height.set(newValue); }
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * The new TableCell will be automatically stored in the 'cells' property
         * of the parent Table element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, TableCell, "cells", true);
        }
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TableCell);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.height = 1;
                    return;
                }
            })();
            (() => {
                if (internal.isAtLeast("7.13.0", this.model)) {
                    this.width = 1;
                    return;
                }
            })();
        }
    }
    TableCell.structureTypeName = "Pages$TableCell";
    TableCell.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "width": {},
            "height": {}
        }
    }, internal.StructureType.Element);
    pages.TableCell = TableCell;
    class TableColumn extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__width = new internal.PrimitiveProperty(TableColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TableColumn() cannot be invoked directly, please use 'model.pages.createTableColumn()'");
            }
        }
        get containerAsTable() { return super.getContainerAs(Table); }
        get width() { return this.__width.get(); }
        set width(newValue) { this.__width.set(newValue); }
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * The new TableColumn will be automatically stored in the 'columns' property
         * of the parent Table element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, TableColumn, "columns", true);
        }
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TableColumn);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    TableColumn.structureTypeName = "Pages$TableColumn";
    TableColumn.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TableColumn = TableColumn;
    class TableRow extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__class = new internal.PrimitiveProperty(TableRow, this, "class", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__style = new internal.PrimitiveProperty(TableRow, this, "style", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__conditionalVisibilitySettings = new internal.PartProperty(TableRow, this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4) {
                throw new Error("new TableRow() cannot be invoked directly, please use 'model.pages.createTableRow()'");
            }
        }
        get containerAsTable() { return super.getContainerAs(Table); }
        get class() { return this.__class.get(); }
        set class(newValue) { this.__class.set(newValue); }
        get style() { return this.__style.get(); }
        set style(newValue) { this.__style.set(newValue); }
        get conditionalVisibilitySettings() { return this.__conditionalVisibilitySettings.get(); }
        set conditionalVisibilitySettings(newValue) { this.__conditionalVisibilitySettings.set(newValue); }
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * The new TableRow will be automatically stored in the 'rows' property
         * of the parent Table element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, TableRow, "rows", true);
        }
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TableRow);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    TableRow.structureTypeName = "Pages$TableRow";
    TableRow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TableRow = TableRow;
    /**
     * See: {@link https://docs.mendix.com/refguide7/template-grid relevant section in reference guide}
     */
    class TemplateGrid extends Grid {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__contents = new internal.PartProperty(TemplateGrid, this, "contents", null, true);
            /** @internal */
            this.__numberOfRows = new internal.PrimitiveProperty(TemplateGrid, this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__numberOfColumns = new internal.PrimitiveProperty(TemplateGrid, this, "numberOfColumns", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TemplateGrid() cannot be invoked directly, please use 'model.pages.createTemplateGrid()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get contents() { return this.__contents.get(); }
        set contents(newValue) { this.__contents.set(newValue); }
        get numberOfRows() { return this.__numberOfRows.get(); }
        set numberOfRows(newValue) { this.__numberOfRows.set(newValue); }
        get numberOfColumns() { return this.__numberOfColumns.get(); }
        set numberOfColumns(newValue) { this.__numberOfColumns.set(newValue); }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, TemplateGrid.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, TemplateGrid.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, TemplateGrid, "footerWidget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "leftWidget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "rightWidget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, TemplateGrid.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "firstWidget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "secondWidget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widgets", true);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, TemplateGrid.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TemplateGrid, "parameterWidget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, TemplateGrid.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TemplateGrid, "reportWidget", false);
        }
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TemplateGrid);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.contents = TemplateGridContents.create(this.model);
            this.numberOfColumns = 2;
            this.numberOfRows = 3;
        }
    }
    TemplateGrid.structureTypeName = "Pages$TemplateGrid";
    TemplateGrid.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "contents": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TemplateGrid = TemplateGrid;
    class TemplateGridContents extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widget = new internal.PartProperty(TemplateGridContents, this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new TemplateGridContents() cannot be invoked directly, please use 'model.pages.createTemplateGridContents()'");
            }
        }
        get containerAsTemplateGrid() { return super.getContainerAs(TemplateGrid); }
        get widget() { return this.__widget.get(); }
        set widget(newValue) { this.__widget.set(newValue); }
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'contents' property
         * of the parent TemplateGrid element passed as argument.
         */
        static createIn(container) {
            return internal.instancehelpers.createElement(container, TemplateGridContents, "contents", false);
        }
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TemplateGridContents);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    TemplateGridContents.structureTypeName = "Pages$TemplateGridContents";
    TemplateGridContents.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TemplateGridContents = TemplateGridContents;
    class TextWidget extends AttributeWidgetWithPlaceholder {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__maxLengthCode = new internal.PrimitiveProperty(TextWidget, this, "maxLengthCode", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TextWidget() cannot be invoked directly, please use 'model.pages.createTextWidget()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get maxLengthCode() { return this.__maxLengthCode.get(); }
        set maxLengthCode(newValue) { this.__maxLengthCode.set(newValue); }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.maxLengthCode = -1;
        }
    }
    TextWidget.structureTypeName = "Pages$TextWidget";
    TextWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TextWidget = TextWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-area relevant section in reference guide}
     */
    class TextArea extends TextWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__numberOfLines = new internal.PrimitiveProperty(TextArea, this, "numberOfLines", 0, internal.PrimitiveTypeEnum.Integer);
            /** @internal */
            this.__counterMessage = new internal.PartProperty(TextArea, this, "counterMessage", null, true);
            /** @internal */
            this.__textTooLongMessage = new internal.PartProperty(TextArea, this, "textTooLongMessage", null, true);
            if (arguments.length < 4) {
                throw new Error("new TextArea() cannot be invoked directly, please use 'model.pages.createTextArea()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get numberOfLines() { return this.__numberOfLines.get(); }
        set numberOfLines(newValue) { this.__numberOfLines.set(newValue); }
        get counterMessage() { return this.__counterMessage.get(); }
        set counterMessage(newValue) { this.__counterMessage.set(newValue); }
        get textTooLongMessage() { return this.__textTooLongMessage.get(); }
        set textTooLongMessage(newValue) { this.__textTooLongMessage.set(newValue); }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, TextArea.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, TextArea.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, TextArea, "footerWidget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "leftWidget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "rightWidget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, TextArea.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "firstWidget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "secondWidget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, TextArea, "widgets", true);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, TextArea.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TextArea, "parameterWidget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, TextArea.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TextArea, "reportWidget", false);
        }
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TextArea);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.counterMessage = texts_1.texts.Text.create(this.model);
            this.numberOfLines = 5;
            this.textTooLongMessage = texts_1.texts.Text.create(this.model);
        }
    }
    TextArea.structureTypeName = "Pages$TextArea";
    TextArea.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "counterMessage": {
                "required": {
                    "currentValue": true
                }
            },
            "textTooLongMessage": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TextArea = TextArea;
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-box relevant section in reference guide}
     */
    class TextBox extends TextWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__inputMask = new internal.PrimitiveProperty(TextBox, this, "inputMask", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__formattingInfo = new internal.PartProperty(TextBox, this, "formattingInfo", null, true);
            /** @internal */
            this.__isPasswordBox = new internal.PrimitiveProperty(TextBox, this, "isPasswordBox", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new TextBox() cannot be invoked directly, please use 'model.pages.createTextBox()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get inputMask() { return this.__inputMask.get(); }
        set inputMask(newValue) { this.__inputMask.set(newValue); }
        get formattingInfo() { return this.__formattingInfo.get(); }
        set formattingInfo(newValue) { this.__formattingInfo.set(newValue); }
        get isPasswordBox() { return this.__isPasswordBox.get(); }
        set isPasswordBox(newValue) { this.__isPasswordBox.set(newValue); }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, TextBox.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, TextBox.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, TextBox, "footerWidget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "leftWidget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "rightWidget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, TextBox.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "firstWidget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "secondWidget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, TextBox, "widgets", true);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, TextBox.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TextBox, "parameterWidget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, TextBox.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, TextBox, "reportWidget", false);
        }
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, TextBox);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            this.formattingInfo = FormattingInfo.create(this.model);
        }
    }
    TextBox.structureTypeName = "Pages$TextBox";
    TextBox.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TextBox = TextBox;
    /**
     * See: {@link https://docs.mendix.com/refguide7/page-title relevant section in reference guide}
     */
    class Title extends ConditionallyVisibleWidget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new Title() cannot be invoked directly, please use 'model.pages.createTitle()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, Title.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, Title.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, Title, "footerWidget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "leftWidget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "rightWidget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, Title.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "firstWidget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "secondWidget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, Title, "widgets", true);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, Title.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Title, "parameterWidget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, Title.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, Title, "reportWidget", false);
        }
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, Title);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    Title.structureTypeName = "Pages$Title";
    Title.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Title = Title;
    /**
     * See: {@link https://docs.mendix.com/refguide7/validation-message relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class ValidationMessage extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new ValidationMessage() cannot be invoked directly, please use 'model.pages.createValidationMessage()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "footerWidget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDataViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInDivContainerUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGroupBoxUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderLeftWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "leftWidget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInHeaderUnderRightWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "rightWidget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInLayoutGridColumnUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewTemplateUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInNavigationListItemUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInScrollContainerRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSnippetUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderFirstWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "firstWidget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInSplitPaneUnderSecondWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "secondWidget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTabPageUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTableCellUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInTemplateGridContentsUnderWidget(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widget", false);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInVerticalFlowUnderWidgets(container) {
            internal.createInVersionCheck(container.model, ValidationMessage.structureTypeName, { start: "7.0.2" });
            return internal.instancehelpers.createElement(container, ValidationMessage, "widgets", true);
        }
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, ValidationMessage);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    ValidationMessage.structureTypeName = "Pages$ValidationMessage";
    ValidationMessage.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.2"
    }, internal.StructureType.Element);
    pages.ValidationMessage = ValidationMessage;
    class VerticalFlow extends Widget {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__widgets = new internal.PartListProperty(VerticalFlow, this, "widgets", []);
            if (arguments.length < 4) {
                throw new Error("new VerticalFlow() cannot be invoked directly, please use 'model.pages.createVerticalFlow()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        get widgets() { return this.__widgets.get(); }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, VerticalFlow.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, VerticalFlow.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, VerticalFlow, "footerWidget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "leftWidget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "rightWidget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, VerticalFlow.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "firstWidget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "secondWidget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widgets", true);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, VerticalFlow.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, VerticalFlow, "parameterWidget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, VerticalFlow.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, VerticalFlow, "reportWidget", false);
        }
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, VerticalFlow);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    VerticalFlow.structureTypeName = "Pages$VerticalFlow";
    VerticalFlow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.VerticalFlow = VerticalFlow;
    /**
     * See: {@link https://docs.mendix.com/refguide7/vertical-split-pane relevant section in reference guide}
     */
    class VerticalSplitPane extends SplitPane {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            if (arguments.length < 4) {
                throw new Error("new VerticalSplitPane() cannot be invoked directly, please use 'model.pages.createVerticalSplitPane()'");
            }
        }
        get containerAsBuildingBlock() { return super.getContainerAs(BuildingBlock); }
        get containerAsDataView() { return super.getContainerAs(DataView); }
        get containerAsDivContainer() { return super.getContainerAs(DivContainer); }
        get containerAsGroupBox() { return super.getContainerAs(GroupBox); }
        get containerAsHeader() { return super.getContainerAs(Header); }
        get containerAsLayout() { return super.getContainerAs(Layout); }
        get containerAsLayoutCallArgument() { return super.getContainerAs(LayoutCallArgument); }
        get containerAsLayoutGridColumn() { return super.getContainerAs(LayoutGridColumn); }
        get containerAsListView() { return super.getContainerAs(ListView); }
        get containerAsListViewTemplate() { return super.getContainerAs(ListViewTemplate); }
        get containerAsMasterDetailRegion() { return super.getContainerAs(MasterDetailRegion); }
        get containerAsNavigationListItem() { return super.getContainerAs(NavigationListItem); }
        get containerAsScrollContainerRegion() { return super.getContainerAs(ScrollContainerRegion); }
        get containerAsSnippet() { return super.getContainerAs(Snippet); }
        get containerAsSplitPane() { return super.getContainerAs(SplitPane); }
        get containerAsTabPage() { return super.getContainerAs(TabPage); }
        get containerAsTableCell() { return super.getContainerAs(TableCell); }
        get containerAsTemplateGridContents() { return super.getContainerAs(TemplateGridContents); }
        get containerAsVerticalFlow() { return super.getContainerAs(VerticalFlow); }
        get containerAsReportPane() { return super.getContainerAs(reports_1.reports.ReportPane); }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInBuildingBlockUnderWidget(container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 and higher
         */
        static createInDataViewUnderFooterWidget(container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.structureTypeName, { start: "6.7.0" });
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "footerWidget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "leftWidget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "rightWidget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMasterDetailRegionUnderWidget(container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.structureTypeName, { start: "7.1.0" });
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "firstWidget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "secondWidget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widgets", true);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "parameterWidget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.structureTypeName, { end: "6.9.0" });
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "reportWidget", false);
        }
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, VerticalSplitPane);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
        }
    }
    VerticalSplitPane.structureTypeName = "Pages$VerticalSplitPane";
    VerticalSplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.VerticalSplitPane = VerticalSplitPane;
    /**
     * In version 7.6.0: introduced
     */
    class WidgetValidation extends internal.Element {
        constructor(model, structureTypeName, id, isPartial, unit, container) {
            super(model, structureTypeName, id, isPartial, unit, container);
            /** @internal */
            this.__expression = new internal.PrimitiveProperty(WidgetValidation, this, "expression", "", internal.PrimitiveTypeEnum.String);
            /** @internal */
            this.__expressionModel = new internal.PartProperty(WidgetValidation, this, "expressionModel", null, true);
            /** @internal */
            this.__message = new internal.PartProperty(WidgetValidation, this, "message", null, true);
            if (arguments.length < 4) {
                throw new Error("new WidgetValidation() cannot be invoked directly, please use 'model.pages.createWidgetValidation()'");
            }
        }
        get containerAsAttributeWidget() { return super.getContainerAs(AttributeWidget); }
        get containerAsReferenceSelector() { return super.getContainerAs(ReferenceSelector); }
        get containerAsAttributeValue() { return super.getContainerAs(pluginwidgets_1.pluginwidgets.AttributeValue); }
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         */
        get expression() { return this.__expression.get(); }
        set expression(newValue) { this.__expression.set(newValue); }
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * In version 7.9.0: introduced
         */
        get expressionModel() { return this.__expressionModel.get(); }
        set expressionModel(newValue) { this.__expressionModel.set(newValue); }
        get message() { return this.__message.get(); }
        set message(newValue) { this.__message.set(newValue); }
        /**
         * Creates and returns a new WidgetValidation instance in the SDK and on the server.
         * The new WidgetValidation will be automatically stored in the 'validation' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInAttributeWidgetUnderValidation(container) {
            internal.createInVersionCheck(container.model, WidgetValidation.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, WidgetValidation, "validation", false);
        }
        /**
         * Creates and returns a new WidgetValidation instance in the SDK and on the server.
         * The new WidgetValidation will be automatically stored in the 'validation' property
         * of the parent ReferenceSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInReferenceSelectorUnderValidation(container) {
            internal.createInVersionCheck(container.model, WidgetValidation.structureTypeName, { start: "7.6.0" });
            return internal.instancehelpers.createElement(container, WidgetValidation, "validation", false);
        }
        /**
         * Creates and returns a new WidgetValidation instance in the SDK and on the server.
         * The new WidgetValidation will be automatically stored in the 'validations' property
         * of the parent pluginwidgets.AttributeValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInAttributeValueUnderValidations(container) {
            internal.createInVersionCheck(container.model, WidgetValidation.structureTypeName, { start: "7.7.0" });
            return internal.instancehelpers.createElement(container, WidgetValidation, "validations", true);
        }
        /**
         * Creates and returns a new WidgetValidation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model) {
            return internal.instancehelpers.createElement(model, WidgetValidation);
        }
        /** @internal */
        _initializeDefaultProperties() {
            super._initializeDefaultProperties();
            if (this.__expressionModel.isAvailable) {
                this.expressionModel = expressions_1.expressions.NoExpression.create(this.model);
            }
            this.message = texts_1.texts.Text.create(this.model);
        }
    }
    WidgetValidation.structureTypeName = "Pages$WidgetValidation";
    WidgetValidation.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.6.0",
        "properties": {
            "expressionModel": {
                "introduced": "7.9.0",
                "required": {
                    "currentValue": true
                }
            },
            "message": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.WidgetValidation = WidgetValidation;
})(pages = exports.pages || (exports.pages = {}));
const documenttemplates_1 = require("./documenttemplates");
const domainmodels_1 = require("./domainmodels");
const expressions_1 = require("./expressions");
const menus_1 = require("./menus");
const microflows_1 = require("./microflows");
const navigation_1 = require("./navigation");
const pluginwidgets_1 = require("./pluginwidgets");
const reports_1 = require("./reports");
const texts_1 = require("./texts");
//# sourceMappingURL=pages.js.map